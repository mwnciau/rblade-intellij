// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RBlade.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.mwnciau.rblade;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.mwnciau.rblade.psi.RBladeTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayDeque;
import java.util.Set;

public class RBladeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_VERBATIM = 2;
  public static final int RBLADE_RUBY = 4;
  public static final int RBLADE_PRINT = 6;
  public static final int RBLADE_UNSAFE_PRINT = 8;
  public static final int ERB_STATEMENT = 10;
  public static final int STATE_RUBY_BLOCK = 12;
  public static final int STATE_RUBY_BLOCK_END = 14;
  public static final int STATE_STRING_LITERAL = 16;
  public static final int STATE_STRING_LITERAL_INTERPOLATION = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\0\1\4\1\7\1\10\2\0\1\11"+
    "\1\12\1\0\1\13\12\14\1\15\1\0\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\31\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\31\1\53\1\54\1\55"+
    "\1\0\1\56\1\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\31\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\57\1\60\1\45\1\46"+
    "\1\47\1\50\1\61\1\52\1\31\1\62\1\53\1\63"+
    "\2\0\5\64\1\65\32\64\1\65\217\64\2\66\115\64"+
    "\1\67\u0200\64\1\65\177\64\13\65\35\64\2\65\5\64"+
    "\1\65\57\64\1\65\312\64\1\70\325\64\1\65\377\64";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\3\2\2\3\13\4\1\5\1\4\1\6"+
    "\1\7\1\10\1\11\3\4\1\12\1\6\1\12\3\13"+
    "\1\14\4\13\6\15\1\4\1\16\3\4\1\17\1\20"+
    "\36\0\1\21\3\0\1\4\4\0\1\22\1\0\1\4"+
    "\11\0\1\23\32\0\1\24\33\0\1\4\74\0\2\24"+
    "\1\0\1\1\1\25\24\0\1\26\3\0\1\27\2\0"+
    "\1\4\35\0\1\30\1\31\41\0\1\24\1\0\2\1"+
    "\5\0\1\24\12\0\1\26\11\0\1\4\62\0\2\1"+
    "\1\24\4\0\3\1\10\0\1\32\1\0\1\26\5\0"+
    "\1\4\54\0\1\25\3\0\1\26\5\0\1\4\36\0"+
    "\1\33\1\4\20\0\1\4\14\0\1\4\11\0\1\4"+
    "\11\0\1\4\5\0\1\4\5\0\2\4\1\0\1\34"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u04ad\0\u0720\0\u04ad\0\u04ad\0\u04ad\0\u04ad\0\u0759\0\u0792"+
    "\0\u07cb\0\u04ad\0\u0558\0\u0804\0\u04ad\0\u083d\0\u0876\0\u04ad"+
    "\0\u04e6\0\u08af\0\u0558\0\u08e8\0\u04ad\0\u0921\0\u04e6\0\u0591"+
    "\0\u0792\0\u0558\0\u095a\0\u04ad\0\u0993\0\u09cc\0\u0a05\0\u0558"+
    "\0\u04ad\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94"+
    "\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u04ad"+
    "\0\u05ca\0\u06ae\0\u10ec\0\u1125\0\u115e\0\u1197\0\u08e8\0\u11d0"+
    "\0\u04ad\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f"+
    "\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f"+
    "\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u04ad\0\u2166"+
    "\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e"+
    "\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6"+
    "\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e"+
    "\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16"+
    "\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde"+
    "\0\u2e17\0\u2e50\0\u2e89\0\u04ad\0\u04ad\0\u2ec2\0\u2efb\0\u2f34"+
    "\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc"+
    "\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4"+
    "\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u2010\0\u341a\0\u3453"+
    "\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b"+
    "\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3"+
    "\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab"+
    "\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u04ad\0\u3b3a"+
    "\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02"+
    "\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3eca"+
    "\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092"+
    "\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a"+
    "\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422"+
    "\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578\0\u45b1\0\u45ea"+
    "\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707\0\u04ad\0\u4740\0\u4779"+
    "\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908\0\u4941"+
    "\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09"+
    "\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1"+
    "\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99"+
    "\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061"+
    "\0\u509a\0\u50d3\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229"+
    "\0\u5262\0\u529b\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8\0\u53f1"+
    "\0\u542a\0\u5463\0\u549c\0\u54d5\0\u550e\0\u433e\0\u5547\0\u5580"+
    "\0\u55b9\0\u0d23\0\u55f2\0\u562b\0\u5664\0\u569d\0\u56d6\0\u570f"+
    "\0\u5748\0\u5781\0\u57ba\0\u57f3\0\u04ad\0\u582c\0\u5865\0\u589e"+
    "\0\u58d7\0\u5910\0\u5949\0\u5982\0\u59bb\0\u59f4\0\u5a2d\0\u5a66"+
    "\0\u5a9f\0\u5ad8\0\u5b11\0\u5b4a\0\u5b83\0\u5bbc\0\u5bf5\0\u5c2e"+
    "\0\u5c67\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84\0\u5dbd\0\u5df6"+
    "\0\u5e2f\0\u5e68\0\u5ea1\0\u5eda\0\u5f13\0\u5f4c\0\u5f85\0\u5fbe"+
    "\0\u5ff7\0\u6030\0\u6069\0\u60a2\0\u60db\0\u6114\0\u614d\0\u6186"+
    "\0\u61bf\0\u549c\0\u61f8\0\u6231\0\u626a\0\u55f2\0\u62a3\0\u62dc"+
    "\0\u6315\0\u62dc\0\u634e\0\u6387\0\u63c0\0\u33e1\0\u63f9\0\u6432"+
    "\0\u646b\0\u64a4\0\u64dd\0\u6516\0\u654f\0\u6588\0\u65c1\0\u65fa"+
    "\0\u6633\0\u666c\0\u4d0a\0\u66a5\0\u66de\0\u6717\0\u6750\0\u6789"+
    "\0\u67c2\0\u67fb\0\u6834\0\u686d\0\u68a6\0\u68df\0\u6918\0\u6951"+
    "\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0\0\u6b19"+
    "\0\u6b52\0\u6b8b\0\u04ad\0\u6bc4\0\u6bfd\0\u6c36\0\u6c6f\0\u6ca8"+
    "\0\u6ce1\0\u6d1a\0\u6d53\0\u6d8c\0\u6dc5\0\u6dfe\0\u6e37\0\u6e70"+
    "\0\u6ea9\0\u6ee2\0\u6f1b\0\u6f54\0\u6f8d\0\u6fc6\0\u6fff\0\u7038"+
    "\0\u7071\0\u70aa\0\u70e3\0\u711c\0\u7155\0\u718e\0\u71c7\0\u7200"+
    "\0\u7239\0\u7272\0\u72ab\0\u72e4\0\u731d\0\u7356\0\u738f\0\u73c8"+
    "\0\u7401\0\u743a\0\u7473\0\u74ac\0\u74e5\0\u751e\0\u7557\0\u7590"+
    "\0\u75c9\0\u7602\0\u763b\0\u7674\0\u76ad\0\u76e6\0\u771f\0\u7758"+
    "\0\u7791\0\u77ca\0\u7803\0\u783c\0\u7875\0\u78ae\0\u78e7\0\u7920"+
    "\0\u7959\0\u7992\0\u79cb\0\u7a04\0\u04ad\0\u7a3d\0\u7a76\0\u7aaf"+
    "\0\u7ae8\0\u7b21\0\u7b5a\0\u7b93\0\u7bcc\0\u7c05\0\u7c3e\0\u7c77"+
    "\0\u7cb0\0\u7ce9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\16\20\1\21\3\20\1\22\37\20\1\23\6\20\22\24"+
    "\1\25\46\24\16\26\1\27\3\26\1\30\37\26\1\31"+
    "\24\26\1\27\3\26\1\32\37\26\1\31\1\33\10\26"+
    "\1\34\12\26\1\27\3\26\1\32\37\26\1\31\14\26"+
    "\1\35\7\26\1\27\3\26\1\32\37\26\1\31\6\26"+
    "\1\36\2\37\1\40\1\41\1\36\1\42\1\43\1\44"+
    "\1\45\1\36\1\26\1\36\1\46\1\47\2\36\1\50"+
    "\1\51\30\36\1\43\1\36\1\52\4\36\1\53\1\54"+
    "\1\36\1\37\3\36\3\55\1\56\2\55\1\57\1\55"+
    "\1\60\5\55\1\61\3\55\1\62\37\55\1\63\1\64"+
    "\5\55\5\65\1\66\10\65\1\67\3\65\1\70\31\65"+
    "\1\71\5\65\1\72\6\65\4\73\1\74\1\73\1\75"+
    "\4\73\1\26\2\73\1\76\3\73\1\77\37\73\1\100"+
    "\1\101\5\73\16\0\1\102\43\0\1\103\6\0\71\14"+
    "\16\0\1\104\3\0\1\105\64\0\1\106\72\0\1\107"+
    "\50\0\16\20\1\0\3\20\1\0\37\20\1\0\6\20"+
    "\6\0\1\110\104\0\1\111\1\0\1\112\1\113\1\114"+
    "\1\115\1\116\2\0\1\117\2\0\1\120\1\121\1\122"+
    "\1\123\1\0\1\124\1\125\1\0\1\126\1\127\1\130"+
    "\6\0\1\124\1\125\1\0\1\131\3\0\1\117\1\125"+
    "\4\0\1\132\56\0\1\133\6\0\22\24\1\0\46\24"+
    "\27\0\1\134\140\0\1\135\111\0\1\136\17\0\1\127"+
    "\103\0\1\137\55\0\1\127\104\0\1\140\10\0\1\141"+
    "\105\0\1\140\50\0\1\36\2\0\1\36\1\0\1\36"+
    "\4\0\1\36\1\0\1\36\1\0\3\36\2\0\30\36"+
    "\1\0\1\36\1\0\4\36\2\0\1\36\1\0\3\36"+
    "\1\0\2\142\30\0\1\143\31\0\1\142\1\143\2\0"+
    "\1\36\2\0\1\144\1\0\1\36\4\0\1\36\1\0"+
    "\1\36\1\0\3\36\2\0\30\36\1\0\1\36\1\0"+
    "\4\36\2\0\1\36\1\0\3\36\14\41\1\0\3\41"+
    "\1\44\2\41\10\0\1\145\6\0\1\145\5\0\1\145"+
    "\2\0\4\41\3\145\2\41\5\0\1\36\2\0\1\36"+
    "\1\0\1\36\1\135\3\0\1\36\1\0\1\36\1\0"+
    "\3\36\2\0\30\36\1\0\1\36\1\0\4\36\2\0"+
    "\1\36\1\0\3\36\71\26\27\0\1\146\17\0\1\127"+
    "\104\0\1\44\10\0\1\147\105\0\1\60\77\0\1\150"+
    "\17\0\1\127\104\0\1\60\67\0\1\151\6\0\4\73"+
    "\1\0\1\73\1\0\4\73\1\0\46\73\2\0\5\73"+
    "\14\74\1\0\6\74\10\0\1\152\6\0\1\152\5\0"+
    "\1\152\2\0\4\74\3\152\2\74\5\0\4\73\1\0"+
    "\1\73\1\135\4\73\1\0\46\73\2\0\11\73\1\0"+
    "\1\73\1\0\4\73\1\0\33\73\1\153\12\73\2\0"+
    "\5\73\6\0\1\154\144\0\1\155\14\0\1\156\104\0"+
    "\1\157\37\0\1\160\14\0\1\161\70\0\1\162\62\0"+
    "\5\163\1\164\1\165\62\163\24\0\1\166\1\167\1\170"+
    "\1\171\1\172\2\0\1\173\2\0\1\174\1\175\1\176"+
    "\1\177\1\0\1\200\1\201\1\0\1\202\1\0\1\203"+
    "\6\0\1\200\1\201\5\0\1\173\1\201\36\0\1\204"+
    "\5\0\1\205\13\0\1\205\34\0\1\206\6\0\1\207"+
    "\2\0\1\210\62\0\1\211\3\0\1\212\32\0\1\212"+
    "\25\0\1\213\11\0\1\214\1\215\1\216\71\0\1\217"+
    "\60\0\1\220\67\0\1\221\70\0\1\222\3\0\1\223"+
    "\32\0\1\223\37\0\1\224\1\0\1\225\54\0\1\226"+
    "\17\0\1\227\2\0\1\230\10\0\1\227\40\0\1\231"+
    "\16\0\1\232\51\0\1\233\2\0\1\234\12\0\1\235"+
    "\62\0\1\236\60\0\1\237\73\0\1\240\41\0\1\241"+
    "\56\0\1\165\11\0\1\242\65\0\12\243\1\244\50\243"+
    "\1\245\5\243\37\0\1\246\36\0\1\164\122\0\1\247"+
    "\43\0\1\250\115\0\1\251\31\0\1\36\2\0\1\36"+
    "\1\0\1\36\4\0\1\36\1\0\1\36\1\0\3\36"+
    "\2\0\30\36\1\0\1\36\1\0\4\36\1\0\1\44"+
    "\1\36\1\0\3\36\14\41\1\0\6\41\30\0\4\41"+
    "\3\0\2\41\44\0\1\252\70\0\1\253\31\0\14\74"+
    "\1\0\6\74\30\0\4\74\3\0\2\74\5\0\4\73"+
    "\1\0\1\73\1\0\4\73\1\0\13\73\1\254\32\73"+
    "\2\0\5\73\5\0\1\255\75\0\1\256\64\0\1\257"+
    "\106\0\1\260\1\261\1\262\1\263\1\264\2\0\1\265"+
    "\2\0\1\266\1\267\1\270\1\271\1\0\1\272\1\273"+
    "\1\0\1\274\1\0\1\275\6\0\1\272\1\273\5\0"+
    "\1\265\1\273\4\0\1\276\56\0\1\257\25\0\1\277"+
    "\51\0\20\162\1\300\50\162\6\163\1\301\62\163\6\164"+
    "\1\302\62\164\71\165\35\0\1\303\5\0\1\304\13\0"+
    "\1\304\34\0\1\305\6\0\1\306\2\0\1\307\62\0"+
    "\1\310\3\0\1\311\32\0\1\311\25\0\1\312\11\0"+
    "\1\313\1\314\1\315\71\0\1\316\60\0\1\165\67\0"+
    "\1\317\70\0\1\320\3\0\1\321\32\0\1\321\37\0"+
    "\1\322\1\0\1\323\54\0\1\324\17\0\1\325\2\0"+
    "\1\326\10\0\1\325\40\0\1\327\16\0\1\330\51\0"+
    "\1\331\2\0\1\332\12\0\1\333\62\0\1\334\63\0"+
    "\1\335\61\0\1\336\74\0\1\337\105\0\1\340\13\0"+
    "\1\340\6\0\1\340\30\0\1\341\64\0\1\342\75\0"+
    "\1\343\4\0\1\344\77\0\1\345\13\0\1\345\6\0"+
    "\1\345\26\0\1\346\107\0\1\347\13\0\1\347\6\0"+
    "\1\347\42\0\1\350\55\0\1\351\20\0\1\220\64\0"+
    "\1\352\13\0\1\352\12\0\1\353\1\0\1\354\3\0"+
    "\1\355\4\0\1\354\4\0\1\354\1\0\30\354\3\0"+
    "\4\354\54\0\1\356\74\0\1\357\7\0\1\357\44\0"+
    "\1\360\61\0\1\220\67\0\1\340\110\0\1\361\52\0"+
    "\1\362\10\0\1\363\74\0\1\364\1\220\12\0\1\364"+
    "\6\0\1\364\24\0\1\365\16\0\1\366\52\0\1\367"+
    "\101\0\1\370\73\0\1\371\53\0\1\372\26\0\1\373"+
    "\53\0\1\374\7\0\1\375\66\0\1\376\13\0\1\376"+
    "\40\0\1\377\3\0\1\373\32\0\1\373\5\0\1\165"+
    "\65\0\3\242\1\u0100\65\242\63\243\1\245\17\243\1\u0101"+
    "\50\243\1\245\70\243\1\u0102\5\243\26\0\1\u0103\70\0"+
    "\1\u0104\54\0\1\u0105\57\0\2\u0106\62\0\1\u0106\31\0"+
    "\1\u0107\70\0\1\u0108\42\0\4\73\1\0\1\73\1\0"+
    "\4\73\1\0\27\73\1\u0109\13\73\1\u0109\2\73\2\0"+
    "\5\73\6\255\1\u010a\62\255\12\0\1\u010b\113\0\1\u010c"+
    "\5\0\1\u010d\13\0\1\u010d\34\0\1\u010e\6\0\1\u010f"+
    "\2\0\1\u0110\62\0\1\u0111\3\0\1\u0112\32\0\1\u0112"+
    "\25\0\1\u0113\11\0\1\u0114\1\u0115\1\u0116\71\0\1\u0117"+
    "\60\0\1\257\67\0\1\u0118\70\0\1\u0119\3\0\1\u011a"+
    "\32\0\1\u011a\37\0\1\u011b\1\0\1\u011c\54\0\1\u011d"+
    "\17\0\1\u011e\2\0\1\u011f\10\0\1\u011e\40\0\1\u0120"+
    "\16\0\1\u0121\51\0\1\u0122\2\0\1\u0123\12\0\1\u0124"+
    "\62\0\1\u0125\63\0\1\u0126\41\0\1\257\104\0\1\257"+
    "\51\0\6\162\1\0\11\162\1\300\50\162\6\163\1\301"+
    "\11\163\1\u0127\50\163\6\164\1\302\11\164\1\u0128\50\164"+
    "\23\0\1\u0129\74\0\1\u012a\105\0\1\u012b\13\0\1\u012b"+
    "\6\0\1\u012b\30\0\1\u012c\64\0\1\u012d\75\0\1\u012e"+
    "\4\0\1\u012f\77\0\1\u0130\13\0\1\u0130\6\0\1\u0130"+
    "\26\0\1\u0131\107\0\1\u0132\13\0\1\u0132\6\0\1\u0132"+
    "\42\0\1\u0133\55\0\1\165\20\0\1\165\64\0\1\165"+
    "\13\0\1\165\56\0\1\u0134\74\0\1\u0135\7\0\1\u0135"+
    "\44\0\1\u0136\61\0\1\165\67\0\1\u012b\110\0\1\312"+
    "\52\0\1\u0137\10\0\1\u0138\74\0\1\u0131\1\165\12\0"+
    "\1\u0131\6\0\1\u0131\24\0\1\u0139\16\0\1\u013a\52\0"+
    "\1\u013b\101\0\1\u013c\73\0\1\u013d\53\0\1\u013e\26\0"+
    "\1\u013f\53\0\1\u0140\7\0\1\u0141\52\0\1\u0142\3\0"+
    "\1\u013f\32\0\1\u013f\41\0\1\u0143\54\0\1\u0144\74\0"+
    "\1\220\66\0\1\u0145\107\0\1\u0146\13\0\1\u0146\6\0"+
    "\1\u0146\34\0\1\u0147\32\0\1\u0147\31\0\1\u0148\64\0"+
    "\1\u0149\77\0\1\u014a\65\0\1\220\3\0\1\117\32\0"+
    "\1\117\47\0\1\u014b\24\0\1\353\1\0\1\220\3\0"+
    "\1\355\4\0\1\354\4\0\1\220\1\0\30\351\3\0"+
    "\4\351\10\0\1\353\1\0\1\354\3\0\1\355\4\0"+
    "\1\354\4\0\1\354\1\0\4\354\1\u014c\23\354\3\0"+
    "\1\u014d\3\354\10\0\1\353\5\0\1\355\113\0\1\u014e"+
    "\103\0\1\220\44\0\1\220\74\0\1\u014f\104\0\1\u0150"+
    "\2\0\1\u0151\13\0\1\u0151\6\0\1\u0151\27\0\1\u0152"+
    "\12\0\1\u0146\61\0\1\u0153\64\0\1\u0154\110\0\1\u0155"+
    "\74\0\1\u0156\45\0\1\u0157\107\0\1\u0158\47\0\1\u0144"+
    "\100\0\1\340\62\0\1\342\74\0\1\u0159\32\0\1\u0159"+
    "\26\0\1\u015a\103\0\1\220\31\0\3\242\1\u015b\65\242"+
    "\12\u0101\1\u015c\50\u0101\1\u015d\5\u0101\63\0\1\u015e\54\0"+
    "\1\u015f\6\0\1\u0160\55\0\1\u0161\12\0\1\u0162\1\u0161"+
    "\11\0\12\u0105\1\u0163\56\u0105\43\0\1\u0164\12\0\1\u0165"+
    "\1\u0164\54\0\1\u0166\12\0\1\u0167\1\u0166\11\0\4\73"+
    "\1\0\1\73\1\0\4\73\1\0\10\73\1\u0168\35\73"+
    "\2\0\5\73\6\255\1\u010a\11\255\1\257\50\255\12\u010b"+
    "\1\u0169\56\u010b\23\0\1\u016a\74\0\1\u016b\105\0\1\u016c"+
    "\13\0\1\u016c\6\0\1\u016c\30\0\1\u016d\64\0\1\u016e"+
    "\75\0\1\u016f\4\0\1\u0170\77\0\1\u0171\13\0\1\u0171"+
    "\6\0\1\u0171\26\0\1\u0172\107\0\1\u0173\13\0\1\u0173"+
    "\6\0\1\u0173\42\0\1\u0174\55\0\1\u0175\20\0\1\257"+
    "\64\0\1\u0176\13\0\1\u0176\56\0\1\u0177\74\0\1\u0178"+
    "\7\0\1\u0178\44\0\1\u0179\61\0\1\257\67\0\1\u016c"+
    "\110\0\1\u017a\52\0\1\u017b\10\0\1\u017c\74\0\1\u017d"+
    "\1\257\12\0\1\u017d\6\0\1\u017d\24\0\1\u017e\16\0"+
    "\1\u017f\52\0\1\u0180\101\0\1\u0181\73\0\1\u0182\53\0"+
    "\1\u0183\26\0\1\u0184\53\0\1\u0185\7\0\1\u0186\52\0"+
    "\1\u0187\3\0\1\u0184\32\0\1\u0184\2\0\71\u0128\37\0"+
    "\1\u0188\54\0\1\u0189\74\0\1\165\66\0\1\u018a\107\0"+
    "\1\u018b\13\0\1\u018b\6\0\1\u018b\34\0\1\u018c\32\0"+
    "\1\u018c\31\0\1\u018d\64\0\1\u018e\77\0\1\165\65\0"+
    "\1\165\3\0\1\173\32\0\1\173\47\0\1\u013b\55\0"+
    "\1\u018f\103\0\1\165\44\0\1\165\110\0\1\u0190\2\0"+
    "\1\u0191\13\0\1\u0191\6\0\1\u0191\27\0\1\u0192\12\0"+
    "\1\u018b\55\0\1\u0193\110\0\1\u0194\74\0\1\165\45\0"+
    "\1\u0195\107\0\1\u0196\47\0\1\u0189\100\0\1\u012b\62\0"+
    "\1\u012d\74\0\1\u0197\32\0\1\u0197\41\0\1\165\65\0"+
    "\1\360\33\0\1\360\34\0\1\220\33\0\1\220\34\0"+
    "\1\u0198\33\0\1\u0198\44\0\1\220\13\0\1\220\6\0"+
    "\1\220\40\0\1\u0199\76\0\1\340\47\0\1\u019a\45\0"+
    "\1\353\1\0\1\354\3\0\1\355\4\0\1\354\4\0"+
    "\1\354\1\0\4\354\1\u014c\20\354\1\u019b\2\354\3\0"+
    "\1\u019c\3\354\61\0\1\u019d\53\0\1\206\62\0\1\u019e"+
    "\101\0\1\224\62\0\1\220\65\0\1\u019f\70\0\1\u01a0"+
    "\107\0\1\u01a1\23\0\1\353\1\0\1\354\3\0\1\355"+
    "\4\0\1\354\4\0\1\354\1\0\10\354\1\u01a2\4\354"+
    "\1\u01a3\12\354\3\0\1\u01a4\3\354\4\0\1\117\42\0"+
    "\1\u01a5\15\0\1\u01a6\45\0\1\u01a7\32\0\1\u01a7\3\0"+
    "\1\u01a8\1\u01a9\4\0\1\355\55\0\1\u01a9\30\0\1\u01aa"+
    "\100\0\1\u01ab\70\0\1\220\56\0\1\u01ac\45\0\3\242"+
    "\1\u015b\57\242\1\u01ad\5\242\12\u0101\1\u01ae\50\u0101\1\u015d"+
    "\17\u0101\1\u015c\50\u0101\1\u01af\5\u0101\27\0\1\u01b0\110\0"+
    "\1\u015f\67\0\1\u01b1\65\0\1\u0161\13\0\1\u0161\11\0"+
    "\12\u0105\1\u01b2\56\u0105\46\0\1\u01b3\65\0\1\u0164\13\0"+
    "\1\u0164\57\0\1\u01b4\65\0\1\u0166\13\0\1\u0166\11\0"+
    "\4\73\1\0\1\73\1\0\4\73\1\0\7\73\1\u01b5"+
    "\36\73\2\0\5\73\12\u010b\1\u01b6\56\u010b\37\0\1\u01b7"+
    "\54\0\1\u01b8\74\0\1\257\66\0\1\u01b9\107\0\1\u01ba"+
    "\13\0\1\u01ba\6\0\1\u01ba\34\0\1\u01bb\32\0\1\u01bb"+
    "\31\0\1\u01bc\64\0\1\u01bd\77\0\1\u01be\65\0\1\257"+
    "\3\0\1\265\32\0\1\265\47\0\1\u01bf\26\0\1\257"+
    "\15\0\1\257\1\0\30\u0175\3\0\4\u0175\36\0\1\u01c0"+
    "\26\0\1\u01c1\44\0\1\u01c2\103\0\1\257\44\0\1\257"+
    "\74\0\1\u01c3\104\0\1\u01c4\2\0\1\u01c5\13\0\1\u01c5"+
    "\6\0\1\u01c5\27\0\1\u01c6\12\0\1\u01ba\61\0\1\u01c7"+
    "\64\0\1\u01c8\110\0\1\u01c9\74\0\1\257\45\0\1\u01ca"+
    "\107\0\1\u01cb\47\0\1\u01b8\100\0\1\u016c\62\0\1\u016e"+
    "\74\0\1\u01cc\32\0\1\u01cc\41\0\1\257\65\0\1\u0136"+
    "\33\0\1\u0136\34\0\1\165\33\0\1\165\34\0\1\u01cd"+
    "\33\0\1\u01cd\44\0\1\165\13\0\1\165\6\0\1\165"+
    "\40\0\1\u01ce\76\0\1\u012b\47\0\1\u01cf\104\0\1\322"+
    "\57\0\1\u01d0\70\0\1\u01d1\107\0\1\u01d2\62\0\1\u01d3"+
    "\15\0\1\u01d4\45\0\1\u01d5\32\0\1\u01d5\27\0\1\u01d6"+
    "\100\0\1\u01d7\70\0\1\165\62\0\1\224\70\0\1\u01d8"+
    "\76\0\1\u0198\66\0\1\u01d9\32\0\1\u01d9\31\0\1\u019e"+
    "\20\0\1\u01da\21\0\1\353\1\0\1\354\3\0\1\355"+
    "\4\0\1\354\4\0\1\220\1\0\30\354\3\0\4\354"+
    "\46\0\1\u01db\70\0\1\u01dc\56\0\1\u01dd\102\0\1\225"+
    "\64\0\1\117\4\0\1\u01de\25\0\1\117\41\0\1\u01df"+
    "\71\0\1\u01a5\73\0\1\u0198\13\0\1\u0198\11\0\1\u01e0"+
    "\1\u01e1\5\u01e0\1\u01e2\4\u01e0\1\u01a9\6\u01e0\30\u01a9\3\u01e0"+
    "\4\u01a9\23\u01e0\1\u01a9\6\u01e0\30\u01a9\3\u01e0\4\u01a9\7\u01e0"+
    "\45\0\1\u0198\51\0\1\u01e3\107\0\1\u01e4\23\0\12\u0101"+
    "\1\u01ae\50\u0101\1\u01e5\5\u0101\12\u0105\1\u0163\50\u0105\1\u01e6"+
    "\5\u0105\43\0\1\u01e7\13\0\1\u01e7\35\0\1\u01e8\44\0"+
    "\12\u0105\1\u01b2\50\u0105\1\u01e9\5\u0105\24\0\1\u01ea\70\0"+
    "\1\u01eb\44\0\4\73\1\0\1\73\1\0\4\73\1\0"+
    "\31\73\1\u01ec\14\73\2\0\5\73\12\u010b\1\u01b6\50\u010b"+
    "\1\u01ed\5\u010b\34\0\1\u0179\33\0\1\u0179\34\0\1\257"+
    "\33\0\1\257\34\0\1\u01ee\33\0\1\u01ee\44\0\1\257"+
    "\13\0\1\257\6\0\1\257\40\0\1\u01ef\76\0\1\u016c"+
    "\47\0\1\u01f0\73\0\1\u01c0\20\0\1\u01f1\5\0\1\u01f2"+
    "\64\0\1\u01f3\53\0\1\u010e\62\0\1\u01c0\101\0\1\u011b"+
    "\62\0\1\257\65\0\1\u01f4\70\0\1\u01f5\107\0\1\u01f6"+
    "\55\0\1\265\4\0\1\u01f7\15\0\1\u01f8\7\0\1\265"+
    "\42\0\1\u01f9\15\0\1\u01fa\45\0\1\u01fb\32\0\1\u01fb"+
    "\27\0\1\u01fc\100\0\1\u01fd\70\0\1\257\62\0\1\322"+
    "\70\0\1\u01fe\76\0\1\u01cd\72\0\1\322\70\0\1\u01ff"+
    "\56\0\1\u0200\102\0\1\u0201\71\0\1\u01d3\73\0\1\u01cd"+
    "\13\0\1\u01cd\56\0\1\u01cd\51\0\1\u0202\70\0\1\360"+
    "\107\0\1\u0203\51\0\1\u0153\107\0\1\360\70\0\1\u0204"+
    "\60\0\1\u0205\33\0\14\u01e0\1\u01a9\5\u01e0\1\u0206\30\u01a9"+
    "\3\u01e0\4\u01a9\10\u01e0\1\u01e1\5\u01e0\1\u01e2\4\u01e0\1\u01a9"+
    "\5\u01e0\1\u0206\30\u01a9\3\u01e0\4\u01a9\7\u01e0\43\0\1\u0207"+
    "\12\0\1\u0208\1\u0207\44\0\1\u0209\32\0\1\u0209\2\0"+
    "\12\u0101\1\u015c\50\u0101\1\u0128\5\u0101\24\0\1\u020a\116\0"+
    "\1\u020b\16\0\12\u0105\1\u0163\50\u0105\1\u0128\5\u0105\52\0"+
    "\1\44\70\0\1\60\16\0\4\73\1\0\1\73\1\0"+
    "\4\73\1\0\17\73\1\u020c\26\73\2\0\2\73\1\u020c"+
    "\2\73\12\u010b\1\u0169\50\u010b\1\257\5\u010b\27\0\1\u011b"+
    "\70\0\1\u020d\76\0\1\u01ee\66\0\1\u020e\32\0\1\u020e"+
    "\31\0\1\u01c0\20\0\1\u01f1\57\0\1\u020f\70\0\1\u0210"+
    "\56\0\1\u0211\102\0\1\u011c\64\0\1\265\4\0\1\u01f7"+
    "\25\0\1\265\41\0\1\u0212\71\0\1\u01f9\73\0\1\u01ee"+
    "\13\0\1\u01ee\56\0\1\u01ee\51\0\1\u0213\70\0\1\u0136"+
    "\107\0\1\u0136\70\0\1\u0214\60\0\1\u013b\76\0\1\u0215"+
    "\12\0\1\u0216\1\u0215\43\0\1\u0217\71\0\1\u0218\32\0"+
    "\1\u0218\54\0\1\220\16\0\14\u01e0\1\u01a9\5\u01e0\1\u0206"+
    "\4\u01a9\1\u0219\23\u01a9\3\u01e0\4\u01a9\7\u01e0\27\0\1\u021a"+
    "\104\0\1\u0207\13\0\1\u0207\47\0\1\u021b\55\0\1\u021c"+
    "\45\0\4\73\1\0\1\73\1\0\4\73\1\0\22\73"+
    "\1\u021d\23\73\2\0\5\73\26\0\1\u0179\107\0\1\u021e"+
    "\51\0\1\u01c7\107\0\1\u0179\70\0\1\u021f\60\0\1\u0180"+
    "\76\0\1\u0220\12\0\1\u0221\1\u0220\44\0\1\u0222\32\0"+
    "\1\u0222\31\0\1\u0223\104\0\1\u0215\13\0\1\u0215\44\0"+
    "\1\u0224\22\0\1\u0225\7\0\1\u0224\42\0\1\377\30\0"+
    "\14\u01e0\1\u01a9\6\u01e0\14\u01a9\1\u0226\13\u01a9\3\u01e0\4\u01a9"+
    "\7\u01e0\37\0\1\u0227\31\0\22\u021b\1\u0228\46\u021b\45\0"+
    "\1\u0229\23\0\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b"+
    "\6\u021d\1\u022a\37\u021d\2\u021b\5\u021d\32\0\1\u022b\71\0"+
    "\1\u022c\32\0\1\u022c\31\0\1\u022d\104\0\1\u0220\13\0"+
    "\1\u0220\51\0\1\u0142\67\0\1\u022e\70\0\1\u022f\64\0"+
    "\1\u0224\32\0\1\u0224\2\0\14\u01e0\1\u01a9\6\u01e0\3\u01a9"+
    "\1\u0230\24\u01a9\3\u01e0\4\u01a9\7\u01e0\26\0\1\u0231\42\0"+
    "\22\u021b\1\u0228\4\u021b\1\u0232\41\u021b\33\0\1\u0233\32\0"+
    "\1\u0233\2\0\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b"+
    "\6\u021d\1\u022a\4\u021d\1\u0234\32\u021d\2\u021b\5\u021d\33\0"+
    "\1\u0235\22\0\1\u0236\7\0\1\u0235\42\0\1\u0187\67\0"+
    "\1\u0237\57\0\1\u0238\70\0\1\u0239\42\0\14\u01e0\1\u01a9"+
    "\6\u01e0\20\u01a9\1\u023a\7\u01a9\3\u01e0\1\u023b\1\u023a\2\u01a9"+
    "\7\u01e0\27\0\1\u023c\41\0\22\u021b\1\u0228\14\u021b\1\u023d"+
    "\31\u021b\36\0\1\u020b\32\0\4\u021d\1\u021b\1\u021d\1\u021b"+
    "\4\u021d\1\u021b\6\u021d\1\u022a\14\u021d\1\u023e\22\u021d\2\u021b"+
    "\5\u021d\37\0\1\u023f\64\0\1\u0235\32\0\1\u0235\30\0"+
    "\1\u0240\71\0\1\316\70\0\1\u0241\41\0\14\u01e0\1\u01a9"+
    "\6\u01e0\23\u01a9\1\u0242\4\u01a9\3\u01e0\4\u01a9\23\u01e0\1\u01a9"+
    "\6\u01e0\20\u01a9\1\u023a\7\u01a9\3\u01e0\1\u01a9\1\u023a\2\u01a9"+
    "\7\u01e0\43\0\1\220\13\0\1\220\11\0\22\u021b\1\u0228"+
    "\3\u021b\1\u0243\42\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d"+
    "\1\u021b\6\u021d\1\u022a\3\u021d\1\u0244\33\u021d\2\u021b\5\u021d"+
    "\26\0\1\u0245\71\0\1\u0246\112\0\1\352\7\0\1\352"+
    "\7\0\14\u01e0\1\u01a9\6\u01e0\1\u01a9\1\u0247\26\u01a9\3\u01e0"+
    "\4\u01a9\7\u01e0\22\u021b\1\u0228\24\u021b\1\u0248\6\u021b\1\u0249"+
    "\12\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b\6\u021d"+
    "\1\u022a\24\u021d\1\u024a\6\u021d\1\u024b\3\u021d\2\u021b\5\u021d"+
    "\27\0\1\u024c\104\0\1\257\13\0\1\257\11\0\14\u01e0"+
    "\1\u01a9\6\u01e0\27\u01a9\1\u024d\3\u01e0\4\u01a9\7\u01e0\22\u021b"+
    "\1\u0228\4\u021b\1\u024e\63\u021b\1\u0228\24\u021b\1\u0248\21\u021b"+
    "\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b\6\u021d\1\u022a"+
    "\4\u021d\1\u024f\32\u021d\2\u021b\11\u021d\1\u021b\1\u021d\1\u021b"+
    "\4\u021d\1\u021b\6\u021d\1\u022a\24\u021d\1\u024a\12\u021d\2\u021b"+
    "\5\u021d\51\0\1\u0176\7\0\1\u0176\7\0\22\u021b\1\u0228"+
    "\20\u021b\1\u0250\13\u021b\1\u0250\11\u021b\4\u021d\1\u021b\1\u021d"+
    "\1\u021b\4\u021d\1\u021b\6\u021d\1\u022a\20\u021d\1\u0251\13\u021d"+
    "\1\u0251\2\u021d\2\u021b\5\u021d\22\u021b\1\u0228\1\u021b\1\u0252"+
    "\44\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b\6\u021d"+
    "\1\u022a\1\u021d\1\u0253\35\u021d\2\u021b\5\u021d\22\u021b\1\u0228"+
    "\1\u0254\45\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b"+
    "\6\u021d\1\u022a\1\u0255\36\u021d\2\u021b\5\u021d\22\u021b\1\u0228"+
    "\22\u021b\1\u0256\23\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d"+
    "\1\u021b\6\u021d\1\u022a\22\u021d\1\u0257\14\u021d\2\u021b\5\u021d"+
    "\22\u021b\1\u0228\10\u021b\1\u0258\32\u021b\1\u0258\2\u021b\4\u021d"+
    "\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b\6\u021d\1\u022a\10\u021d"+
    "\1\u0259\26\u021d\2\u021b\2\u021d\1\u0259\2\u021d\22\u021b\1\u0228"+
    "\13\u021b\1\u025a\32\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d"+
    "\1\u021b\6\u021d\1\u022a\13\u021d\1\u025a\23\u021d\2\u021b\5\u021d"+
    "\71\u025a";

  private static int [] zzUnpacktrans() {
    int [] result = new int[32034];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\1\3\0\6\1\1\11\12\1\1\11\1\1"+
    "\4\11\3\1\1\11\2\1\1\11\2\1\1\11\4\1"+
    "\1\11\6\1\1\11\4\1\1\11\36\0\1\11\3\0"+
    "\1\1\4\0\1\11\1\0\1\1\5\0\2\1\2\0"+
    "\1\1\32\0\1\1\33\0\1\1\2\0\1\11\17\0"+
    "\2\1\50\0\2\1\1\0\2\11\24\0\1\1\3\0"+
    "\1\1\2\0\1\1\35\0\1\11\1\1\41\0\1\1"+
    "\1\0\2\1\5\0\1\1\12\0\1\11\11\0\1\1"+
    "\14\0\2\1\44\0\3\1\4\0\3\1\10\0\1\11"+
    "\1\0\1\1\5\0\1\1\10\0\1\1\10\0\1\1"+
    "\32\0\1\1\3\0\1\1\5\0\1\1\6\0\1\1"+
    "\27\0\1\11\1\1\20\0\1\1\14\0\1\1\11\0"+
    "\1\1\11\0\1\1\5\0\1\1\5\0\2\1\1\0"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int parentheses;
    private ArrayDeque<Integer> stateStack = new ArrayDeque<Integer>();
    private ArrayDeque<Character> blockStack = new ArrayDeque<Character>();
    private boolean stringIsInterpolated;
    private String rubyBlockEndDelimiter;
    private String currentStatement = "";
    private boolean lastCharacterWasWord = false;
    private Set<String> naryStatements = Set.of("pushif", "prependif", "each", "eachelse", "eachwithindex", "eachwithindexelse", "props");

    private char flipBracket(char bracket){
        switch (bracket) {
            case '{': return '}';
            case '[': return ']';
            case '(': return ')';
            case '<': return '>';
            default: return bracket;
        }
    }

    private void checkLastChar(){
      char chr = yycharat(yylength() - 1);

      lastCharacterWasWord = (chr >= 'a' && chr <= 'z') || (chr >= 'A' && chr <= 'Z') || (chr >= '0' && chr <= '9') || chr == '_';
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RBladeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 30: break;
          case 2:
            { lastCharacterWasWord = false;
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 31: break;
          case 3:
            { return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 32: break;
          case 4:
            { return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 33: break;
          case 5:
            { stateStack.addFirst(STATE_RUBY_BLOCK);
                                            blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                            stringIsInterpolated = yycharat(0) == '"' || yylength() == 2 || (yylength() == 3 && (yycharat(1) == 'Q' || yycharat(1) == 'W' || yycharat(1) == 'I' || yycharat(1) == 'r' || yycharat(1) == 'x'));
                                            yybegin(STATE_STRING_LITERAL);
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 34: break;
          case 6:
            { if (!blockStack.isEmpty() && yycharat(0) == '|' && blockStack.peekFirst() == '|') {
                                                blockStack.removeFirst();
                                            } else {
                                                blockStack.addFirst(flipBracket(yycharat(0)));
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 35: break;
          case 7:
            { if (blockStack.isEmpty() && rubyBlockEndDelimiter.equals(yytext().toString().replace("_", "").toLowerCase())) {
                                                yypushback(yylength());
                                                yybegin(stateStack.removeFirst());
                                            } else {
                                                if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
                                                    blockStack.removeFirst();
                                                }

                                                return RBladeTypes.RUBY_EXPRESSION;
                                            }
            }
          // fall through
          case 36: break;
          case 8:
            { if (blockStack.isEmpty() && (naryStatements.contains(currentStatement))) {
                                            return RBladeTypes.RBLADE_STATEMENT_COMMA;
                                          } else {
                                            return RBladeTypes.RUBY_EXPRESSION;
                                          }
            }
          // fall through
          case 37: break;
          case 9:
            { if (blockStack.isEmpty() && currentStatement.equals("props")) {
                                                return RBladeTypes.RBLADE_STATEMENT_PROPS_COLON;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 38: break;
          case 10:
            { if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
                                                blockStack.removeFirst();
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 39: break;
          case 11:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 40: break;
          case 12:
            { yybegin(YYINITIAL);
                                          currentStatement = "";
                                          return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 41: break;
          case 13:
            { if (yycharat(0) == blockStack.getFirst()) {
                                                blockStack.removeFirst();
                                                yybegin(stateStack.removeFirst());
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 42: break;
          case 14:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION);
                                          blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                          yybegin(STATE_STRING_LITERAL);

                                          return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 43: break;
          case 15:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 44: break;
          case 16:
            { yybegin(stateStack.removeFirst()); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 45: break;
          case 17:
            { lastCharacterWasWord = false;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 46: break;
          case 18:
            { if (stringIsInterpolated) {
                                              stateStack.addFirst(STATE_STRING_LITERAL);
                                              yybegin(STATE_STRING_LITERAL_INTERPOLATION);
                                            }
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 47: break;
          case 19:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 12;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 11;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 48: break;
          case 20:
            { if (lastCharacterWasWord) {
          return RBladeTypes.HTML_TEMPLATE;
      }
      checkLastChar();

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 49: break;
          case 21:
            { if (lastCharacterWasWord) {
        lastCharacterWasWord = false;
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = false;

      stateStack.addFirst(STATE_RUBY_BLOCK_END);
      rubyBlockEndDelimiter = ")";
      yybegin(STATE_RUBY_BLOCK);
      currentStatement = yytext().toString().replaceAll("[^a-zA-Z]", "").toLowerCase();

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 50: break;
          case 22:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { lastCharacterWasWord = false;
      yybegin(RBLADE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 51: break;
          case 23:
            { if (blockStack.isEmpty() && currentStatement.startsWith("each")) {
                                                return RBladeTypes.RBLADE_STATEMENT_EACH_IN;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 52: break;
          case 24:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 13;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 14;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { lastCharacterWasWord = false;
      yybegin(ERB_STATEMENT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 53: break;
          case 25:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 11;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return RBladeTypes.COMMENT;
            }
          // fall through
          case 54: break;
          case 26:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { lastCharacterWasWord = false;
      yybegin(RBLADE_UNSAFE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 55: break;
          case 27:
            { lastCharacterWasWord = true;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 56: break;
          case 28:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { if (lastCharacterWasWord) {
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = true;
      yybegin(RBLADE_RUBY);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 57: break;
          case 29:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 9);
            { if (lastCharacterWasWord) {
      return RBladeTypes.HTML_TEMPLATE;
  }
  yybegin(STATE_VERBATIM);
  return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RBlade.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.mwnciau.rblade;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.mwnciau.rblade.psi.RBladeTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayDeque;
import java.util.Set;

public class RBladeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_VERBATIM = 2;
  public static final int STATE_RUBY_BLOCK = 4;
  public static final int STATE_RUBY_BLOCK_END = 6;
  public static final int STATE_STRING_LITERAL = 8;
  public static final int STATE_STRING_LITERAL_INTERPOLATION = 10;
  public static final int STATE_REGEX_LITERAL = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\0\1\4\1\7\1\10\2\0\1\11"+
    "\1\12\1\0\1\13\12\0\1\14\1\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\30\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\30\1\52\1\53\1\54"+
    "\1\0\1\55\1\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\30\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\56\1\57\1\44\1\45"+
    "\1\46\1\47\1\60\1\51\1\30\1\61\1\52\1\62"+
    "\7\0\1\2\32\0\1\63\217\0\2\64\115\0\1\65"+
    "\u0200\0\1\63\177\0\13\63\35\0\2\2\5\0\1\63"+
    "\57\0\1\63\312\0\1\66\325\0\1\63\377\0\u0100\67";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\6\1\3\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\2\1\7\1\2\2\10\3\11\1\12\2\11\3\13"+
    "\1\2\1\14\2\2\1\15\1\16\1\2\1\17\1\2"+
    "\1\20\22\0\1\21\3\0\1\2\1\3\1\22\3\0"+
    "\1\23\1\14\1\24\1\0\1\1\1\20\32\0\1\25"+
    "\20\0\1\26\6\0\1\20\47\0\1\25\1\0\1\27"+
    "\24\0\1\30\2\0\1\31\14\0\1\1\30\0\1\25"+
    "\1\0\1\25\7\0\1\25\2\0\1\32\22\0\1\1"+
    "\1\0\1\1\7\0\1\1\12\0\1\25\24\0\1\1"+
    "\53\0\1\33\22\0\1\25\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u0380\0\u0380\0\u0380\0\u03f0\0\u0380\0\u0428"+
    "\0\u0380\0\u0460\0\u0380\0\u0498\0\u04d0\0\u0380\0\u0508\0\u0540"+
    "\0\u0380\0\u0578\0\u05b0\0\u05e8\0\u0380\0\u0620\0\u0658\0\u0380"+
    "\0\u0380\0\u0380\0\u0380\0\u05b0\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8"+
    "\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0310\0\u0b28\0\u0b60\0\u0b98\0\u0380\0\u0bd0\0\u0540"+
    "\0\u0c08\0\u0380\0\u0c40\0\u0380\0\u0c78\0\u0380\0\u0cb0\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228"+
    "\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u0380\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u0380\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8"+
    "\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\u1ff0\0\u2028\0\u1298\0\u0380\0\u2060\0\u2098\0\u20d0\0\u2108"+
    "\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8"+
    "\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488"+
    "\0\u16c0\0\u24c0\0\u24f8\0\u0380\0\u2530\0\u2568\0\u25a0\0\u25d8"+
    "\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798"+
    "\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958"+
    "\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18"+
    "\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8"+
    "\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98"+
    "\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u1298\0\u3020"+
    "\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0"+
    "\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0"+
    "\0\u33d8\0\u3410\0\u3448\0\u2798\0\u3480\0\u34b8\0\u34f0\0\u3528"+
    "\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0\0\u36e8"+
    "\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8"+
    "\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68"+
    "\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28"+
    "\0\u3c60\0\u3c98\0\u3cd0\0\u2878\0\u3d08\0\u3d40\0\u3d78\0\u3db0"+
    "\0\u3de8\0\u3e20\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70"+
    "\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130"+
    "\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0"+
    "\0\u4328\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0"+
    "\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u0380"+
    "\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8"+
    "\0\u4830\0\u4868\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8"+
    "\0\u49f0\0\u4a28\0\u0380\0\u4a60\0\u4a98\0\u4ad0\0\u4b08";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\15\10\1\11\3\10\1\12\37\10\1\13\6\10\21\14"+
    "\1\15\46\14\1\16\2\17\1\20\1\21\1\16\1\22"+
    "\1\23\1\24\1\25\1\16\1\26\1\27\4\16\1\30"+
    "\30\16\1\23\1\16\1\31\4\16\1\23\1\32\1\17"+
    "\4\16\3\33\1\34\2\33\1\35\1\33\1\36\10\33"+
    "\1\37\40\33\1\40\5\33\5\41\1\42\45\41\1\43"+
    "\14\41\4\44\1\45\1\44\1\46\4\44\1\47\45\44"+
    "\1\50\1\51\5\44\13\52\1\53\37\52\1\54\14\52"+
    "\15\10\1\0\3\10\1\0\37\10\1\0\6\10\6\0"+
    "\1\55\102\0\1\56\1\0\1\57\1\60\1\61\1\62"+
    "\1\63\2\0\1\64\2\0\1\65\1\66\1\67\1\70"+
    "\1\0\1\71\1\72\1\0\1\73\1\74\1\75\6\0"+
    "\1\71\1\72\1\0\1\76\2\0\1\64\1\72\5\0"+
    "\1\77\55\0\1\100\6\0\21\14\1\0\46\14\26\0"+
    "\1\101\41\0\1\16\2\0\1\16\1\0\1\16\4\0"+
    "\1\16\2\0\4\16\1\0\30\16\1\0\1\16\1\0"+
    "\4\16\3\0\4\16\1\0\2\102\27\0\1\103\30\0"+
    "\1\102\1\103\3\0\1\16\2\0\1\104\1\0\1\16"+
    "\4\0\1\16\2\0\4\16\1\0\30\16\1\0\1\16"+
    "\1\0\4\16\3\0\4\16\70\0\2\21\1\0\14\21"+
    "\1\24\12\21\1\105\6\21\1\105\5\21\1\105\6\21"+
    "\3\105\6\21\1\0\13\106\1\0\54\106\26\0\1\107"+
    "\123\0\1\24\10\0\1\110\103\0\1\36\76\0\1\111"+
    "\123\0\1\36\66\0\1\112\6\0\70\52\4\44\1\0"+
    "\1\44\1\0\4\44\1\0\45\44\2\0\5\44\2\45"+
    "\1\0\27\45\1\113\6\45\1\113\5\45\1\113\6\45"+
    "\3\113\6\45\1\0\13\114\1\0\54\114\5\0\1\115"+
    "\1\116\7\0\1\117\74\0\1\120\1\121\1\122\1\123"+
    "\1\124\2\0\1\125\2\0\1\126\1\127\1\130\1\131"+
    "\1\0\1\132\1\133\1\0\1\134\1\0\1\135\6\0"+
    "\1\132\1\133\4\0\1\125\1\133\36\0\1\136\5\0"+
    "\1\137\13\0\1\137\33\0\1\140\6\0\1\141\2\0"+
    "\1\142\61\0\1\143\3\0\1\144\31\0\1\144\25\0"+
    "\1\145\11\0\1\146\1\147\1\150\70\0\1\151\57\0"+
    "\1\152\66\0\1\153\67\0\1\154\3\0\1\155\31\0"+
    "\1\155\37\0\1\156\1\0\1\157\53\0\1\160\17\0"+
    "\1\161\2\0\1\162\10\0\1\161\37\0\1\163\16\0"+
    "\1\164\50\0\1\165\2\0\1\166\12\0\1\167\61\0"+
    "\1\170\57\0\1\171\72\0\1\172\117\0\1\116\11\0"+
    "\1\173\76\0\1\174\113\0\1\175\67\0\1\176\31\0"+
    "\1\16\2\0\1\16\1\0\1\16\4\0\1\16\2\0"+
    "\4\16\1\0\30\16\1\0\1\16\1\0\4\16\1\0"+
    "\1\24\1\0\4\16\2\21\1\0\64\21\37\0\1\177"+
    "\67\0\1\200\31\0\2\45\1\0\64\45\1\0\6\115"+
    "\1\201\61\115\16\0\1\202\105\0\1\203\5\0\1\204"+
    "\13\0\1\204\33\0\1\205\6\0\1\206\2\0\1\207"+
    "\61\0\1\210\3\0\1\211\31\0\1\211\25\0\1\212"+
    "\11\0\1\213\1\214\1\215\70\0\1\216\57\0\1\116"+
    "\66\0\1\217\67\0\1\220\3\0\1\221\31\0\1\221"+
    "\37\0\1\222\1\0\1\223\53\0\1\224\17\0\1\225"+
    "\2\0\1\226\10\0\1\225\37\0\1\227\16\0\1\230"+
    "\50\0\1\231\2\0\1\232\12\0\1\233\61\0\1\234"+
    "\62\0\1\235\60\0\1\236\73\0\1\237\104\0\1\240"+
    "\13\0\1\240\5\0\1\240\30\0\1\241\63\0\1\242"+
    "\74\0\1\243\4\0\1\244\76\0\1\245\13\0\1\245"+
    "\5\0\1\245\26\0\1\246\106\0\1\247\13\0\1\247"+
    "\5\0\1\247\42\0\1\250\54\0\1\251\20\0\1\152"+
    "\63\0\1\252\13\0\1\252\12\0\1\253\5\0\1\254"+
    "\124\0\1\255\73\0\1\256\7\0\1\256\43\0\1\257"+
    "\60\0\1\152\66\0\1\240\107\0\1\260\51\0\1\261"+
    "\10\0\1\262\73\0\1\263\1\152\12\0\1\263\5\0"+
    "\1\263\24\0\1\264\16\0\1\265\51\0\1\266\100\0"+
    "\1\267\72\0\1\270\52\0\1\271\26\0\1\272\52\0"+
    "\1\273\7\0\1\274\65\0\1\275\13\0\1\275\37\0"+
    "\1\276\3\0\1\272\31\0\1\272\15\0\1\277\102\0"+
    "\1\300\43\0\2\301\60\0\1\301\31\0\1\302\67\0"+
    "\1\303\42\0\6\115\1\201\10\115\1\304\50\115\22\0"+
    "\1\305\73\0\1\306\104\0\1\307\13\0\1\307\5\0"+
    "\1\307\30\0\1\310\63\0\1\311\74\0\1\312\4\0"+
    "\1\313\76\0\1\314\13\0\1\314\5\0\1\314\26\0"+
    "\1\315\106\0\1\316\13\0\1\316\5\0\1\316\42\0"+
    "\1\317\54\0\1\320\20\0\1\116\63\0\1\321\13\0"+
    "\1\321\55\0\1\322\73\0\1\323\7\0\1\323\43\0"+
    "\1\324\60\0\1\116\66\0\1\307\107\0\1\325\51\0"+
    "\1\326\10\0\1\327\73\0\1\330\1\116\12\0\1\330"+
    "\5\0\1\330\24\0\1\331\16\0\1\332\51\0\1\333"+
    "\100\0\1\334\72\0\1\335\52\0\1\336\26\0\1\337"+
    "\52\0\1\340\7\0\1\341\51\0\1\342\3\0\1\337"+
    "\31\0\1\337\41\0\1\343\53\0\1\344\73\0\1\152"+
    "\65\0\1\345\106\0\1\346\13\0\1\346\5\0\1\346"+
    "\34\0\1\347\31\0\1\347\31\0\1\350\63\0\1\351"+
    "\76\0\1\352\64\0\1\152\3\0\1\64\31\0\1\64"+
    "\47\0\1\353\43\0\1\354\1\0\30\354\3\0\4\354"+
    "\10\0\1\253\5\0\1\254\16\0\1\355\26\0\1\356"+
    "\43\0\1\357\102\0\1\152\43\0\1\152\73\0\1\360"+
    "\103\0\1\361\2\0\1\362\13\0\1\362\5\0\1\362"+
    "\27\0\1\363\12\0\1\346\60\0\1\364\63\0\1\365"+
    "\107\0\1\366\73\0\1\367\44\0\1\370\106\0\1\371"+
    "\46\0\1\344\77\0\1\240\61\0\1\242\73\0\1\372"+
    "\31\0\1\372\26\0\1\373\102\0\1\152\31\0\12\277"+
    "\1\374\55\277\46\0\1\375\6\0\1\376\54\0\1\377"+
    "\12\0\1\u0100\1\377\53\0\1\u0101\12\0\1\u0102\1\u0101"+
    "\47\0\1\u0103\53\0\1\u0104\73\0\1\116\65\0\1\u0105"+
    "\106\0\1\u0106\13\0\1\u0106\5\0\1\u0106\34\0\1\u0107"+
    "\31\0\1\u0107\31\0\1\u0108\63\0\1\u0109\76\0\1\u010a"+
    "\64\0\1\116\3\0\1\125\31\0\1\125\47\0\1\u010b"+
    "\43\0\1\u010c\1\0\30\u010c\3\0\4\u010c\35\0\1\u010d"+
    "\26\0\1\u010e\43\0\1\u010f\102\0\1\116\43\0\1\116"+
    "\73\0\1\u0110\103\0\1\u0111\2\0\1\u0112\13\0\1\u0112"+
    "\5\0\1\u0112\27\0\1\u0113\12\0\1\u0106\60\0\1\u0114"+
    "\63\0\1\u0115\107\0\1\u0116\73\0\1\116\44\0\1\u0117"+
    "\106\0\1\u0118\46\0\1\u0104\77\0\1\307\61\0\1\311"+
    "\73\0\1\u0119\31\0\1\u0119\41\0\1\116\64\0\1\257"+
    "\32\0\1\257\34\0\1\152\32\0\1\152\34\0\1\u011a"+
    "\32\0\1\u011a\44\0\1\152\13\0\1\152\5\0\1\152"+
    "\40\0\1\u011b\75\0\1\240\46\0\1\u011c\45\0\1\253"+
    "\5\0\1\254\16\0\1\355\20\0\1\u011d\5\0\1\u011e"+
    "\63\0\1\u011f\17\0\1\253\5\0\1\254\10\0\1\354"+
    "\1\0\30\354\3\0\4\354\43\0\1\140\61\0\1\355"+
    "\100\0\1\156\61\0\1\152\64\0\1\u0120\67\0\1\u0121"+
    "\106\0\1\u0122\23\0\1\253\5\0\1\254\22\0\1\64"+
    "\4\0\1\u0123\15\0\1\u0124\6\0\1\64\42\0\1\u0125"+
    "\15\0\1\u0126\44\0\1\u0127\31\0\1\u0127\27\0\1\u0128"+
    "\77\0\1\u0129\67\0\1\152\55\0\1\u012a\45\0\12\277"+
    "\1\u012b\55\277\26\0\1\u012c\107\0\1\375\66\0\1\u012d"+
    "\64\0\1\377\13\0\1\377\56\0\1\u012e\64\0\1\u0101"+
    "\13\0\1\u0101\44\0\1\324\32\0\1\324\34\0\1\116"+
    "\32\0\1\116\34\0\1\u012f\32\0\1\u012f\44\0\1\116"+
    "\13\0\1\116\5\0\1\116\40\0\1\u0130\75\0\1\307"+
    "\46\0\1\u0131\72\0\1\u010d\20\0\1\u0132\5\0\1\u0133"+
    "\63\0\1\u0134\52\0\1\205\61\0\1\u010d\100\0\1\222"+
    "\61\0\1\116\64\0\1\u0135\67\0\1\u0136\106\0\1\u0137"+
    "\54\0\1\125\4\0\1\u0138\15\0\1\u0139\6\0\1\125"+
    "\42\0\1\u013a\15\0\1\u013b\44\0\1\u013c\31\0\1\u013c"+
    "\27\0\1\u013d\77\0\1\u013e\67\0\1\116\61\0\1\156"+
    "\67\0\1\u013f\75\0\1\u011a\65\0\1\u0140\31\0\1\u0140"+
    "\31\0\1\355\20\0\1\u011d\21\0\1\253\5\0\1\254"+
    "\10\0\1\152\105\0\1\u0141\67\0\1\u0142\55\0\1\u0143"+
    "\101\0\1\157\63\0\1\64\4\0\1\u0123\24\0\1\64"+
    "\41\0\1\u0144\70\0\1\u0125\72\0\1\u011a\13\0\1\u011a"+
    "\55\0\1\u011a\50\0\1\u0145\106\0\1\u0146\23\0\12\277"+
    "\1\u012b\47\277\1\u0147\5\277\42\0\1\u0148\13\0\1\u0148"+
    "\34\0\1\u0149\67\0\1\u014a\72\0\1\222\67\0\1\u014b"+
    "\75\0\1\u012f\65\0\1\u014c\31\0\1\u014c\31\0\1\u010d"+
    "\20\0\1\u0132\56\0\1\u014d\67\0\1\u014e\55\0\1\u014f"+
    "\101\0\1\223\63\0\1\125\4\0\1\u0138\24\0\1\125"+
    "\41\0\1\u0150\70\0\1\u013a\72\0\1\u012f\13\0\1\u012f"+
    "\55\0\1\u012f\50\0\1\u0151\67\0\1\257\106\0\1\u0152"+
    "\50\0\1\364\106\0\1\257\67\0\1\u0153\57\0\1\u0154"+
    "\75\0\1\u0155\12\0\1\u0156\1\u0155\43\0\1\u0157\31\0"+
    "\1\u0157\3\0\12\277\1\374\47\277\1\304\5\277\23\0"+
    "\1\u0158\115\0\1\24\67\0\1\36\43\0\1\324\106\0"+
    "\1\u0159\50\0\1\u0114\106\0\1\324\67\0\1\u015a\57\0"+
    "\1\333\75\0\1\u015b\12\0\1\u015c\1\u015b\42\0\1\u015d"+
    "\70\0\1\u015e\31\0\1\u015e\54\0\1\152\44\0\1\u015f"+
    "\103\0\1\u0155\13\0\1\u0155\46\0\1\u0160\54\0\1\u0161"+
    "\76\0\1\u0162\70\0\1\u0163\31\0\1\u0163\31\0\1\u0164"+
    "\103\0\1\u015b\13\0\1\u015b\43\0\1\u0165\22\0\1\u0166"+
    "\6\0\1\u0165\42\0\1\276\66\0\1\u0167\75\0\1\u0168"+
    "\55\0\1\u0169\22\0\1\u016a\6\0\1\u0169\42\0\1\342"+
    "\66\0\1\u016b\67\0\1\u016c\63\0\1\u0165\31\0\1\u0165"+
    "\30\0\1\u016d\74\0\1\u016e\31\0\1\u016e\41\0\1\u016f"+
    "\63\0\1\u0169\31\0\1\u0169\30\0\1\u0170\67\0\1\u0171"+
    "\70\0\1\u0172\76\0\1\u0173\57\0\1\u0174\70\0\1\u0175"+
    "\67\0\1\u0176\103\0\1\152\13\0\1\152\37\0\1\u0177"+
    "\103\0\1\116\13\0\1\116\61\0\1\252\7\0\1\252"+
    "\57\0\1\321\7\0\1\321\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19264];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\11\1\1\11\1\1\3\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\2\1\1\11\3\1"+
    "\1\11\2\1\4\11\2\1\22\0\1\1\3\0\2\1"+
    "\1\11\3\0\1\11\1\1\1\11\1\0\1\11\1\1"+
    "\32\0\1\1\20\0\1\11\6\0\1\11\47\0\1\1"+
    "\1\0\1\11\24\0\1\1\2\0\1\11\14\0\1\1"+
    "\30\0\1\1\1\0\1\1\7\0\1\1\2\0\1\1"+
    "\22\0\1\1\1\0\1\1\7\0\1\1\12\0\1\1"+
    "\24\0\1\1\53\0\1\11\22\0\1\11\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int parentheses;
    private ArrayDeque<Integer> stateStack = new ArrayDeque<Integer>();
    private ArrayDeque<Character> blockStack = new ArrayDeque<Character>();
    private boolean stringIsInterpolated;
    private String rubyBlockEndDelimiter;
    private String currentStatement = "";
    private Set<String> naryStatements = Set.of("pushif", "prependif", "each", "eachelse", "eachwithindex", "eachwithindexelse", "props");

    private char flipBracket(char bracket){
        switch (bracket) {
            case '{': return '}';
            case '[': return ']';
            case '(': return ')';
            case '<': return '>';
            default: return bracket;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RBladeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 28: break;
          case 2:
            { return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 29: break;
          case 3:
            { stateStack.addFirst(STATE_RUBY_BLOCK);
                                            blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                            stringIsInterpolated = yycharat(0) == '"' || yylength() == 2 || (yylength() == 3 && yytext().toString().substring(0, 2).equals("%Q"));
                                            yybegin(STATE_STRING_LITERAL);
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 30: break;
          case 4:
            { if (!blockStack.isEmpty() && yycharat(0) == '|' && blockStack.peekFirst() == '|') {
                                                blockStack.removeFirst();
                                            } else {
                                                blockStack.addFirst(flipBracket(yycharat(0)));
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 31: break;
          case 5:
            { if (blockStack.isEmpty() && rubyBlockEndDelimiter.equals(yytext().toString().replace("_", "").toLowerCase())) {
                                                yypushback(yylength());
                                                yybegin(stateStack.removeFirst());
                                            } else {
                                                if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
                                                    blockStack.removeFirst();
                                                }

                                                return RBladeTypes.RUBY_EXPRESSION;
                                            }
            }
          // fall through
          case 32: break;
          case 6:
            { if (blockStack.isEmpty() && (naryStatements.contains(currentStatement))) {
                                            return RBladeTypes.RBLADE_STATEMENT_COMMA;
                                          } else {
                                            return RBladeTypes.RUBY_EXPRESSION;
                                          }
            }
          // fall through
          case 33: break;
          case 7:
            { if (blockStack.isEmpty() && currentStatement.equals("props")) {
                                                return RBladeTypes.RBLADE_STATEMENT_PROPS_COLON;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 34: break;
          case 8:
            { if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
                                                blockStack.removeFirst();
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 35: break;
          case 9:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 36: break;
          case 10:
            { yybegin(YYINITIAL);
                                          currentStatement = "";
                                          return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 37: break;
          case 11:
            { if (yycharat(0) == blockStack.getFirst()) {
                                                blockStack.removeFirst();
                                                yybegin(stateStack.removeFirst());
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 38: break;
          case 12:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION);
                                          blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                          yybegin(STATE_STRING_LITERAL);

                                          return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 39: break;
          case 13:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 40: break;
          case 14:
            { yybegin(stateStack.removeFirst()); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 41: break;
          case 15:
            { yybegin(stateStack.removeFirst());

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 42: break;
          case 16:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "%>";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 43: break;
          case 17:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "}}";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 44: break;
          case 18:
            { stateStack.addFirst(STATE_RUBY_BLOCK);
                                            yypushback(1);
                                            yybegin(STATE_REGEX_LITERAL);

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 45: break;
          case 19:
            { if (stringIsInterpolated) {
                                              stateStack.addFirst(STATE_STRING_LITERAL);
                                              yybegin(STATE_STRING_LITERAL_INTERPOLATION);
                                            }
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 46: break;
          case 20:
            { yypushback(1);
                                            stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION);
                                            yybegin(STATE_REGEX_LITERAL);

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 47: break;
          case 21:
            { return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 48: break;
          case 22:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "!!}";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 49: break;
          case 23:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = ")";
                                            yybegin(STATE_RUBY_BLOCK);
                                            currentStatement = yytext().toString().replaceAll("[^a-zA-Z]", "").toLowerCase();

                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 50: break;
          case 24:
            { if (blockStack.isEmpty() && currentStatement.startsWith("each")) {
                                                return RBladeTypes.RBLADE_STATEMENT_EACH_IN;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 51: break;
          case 25:
            { return RBladeTypes.COMMENT;
            }
          // fall through
          case 52: break;
          case 26:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "@endruby";
                                            currentStatement = "ruby";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 53: break;
          case 27:
            { yybegin(STATE_VERBATIM);
                                          return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

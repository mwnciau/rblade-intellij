// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RBlade.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.mwnciau.rblade;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.mwnciau.rblade.psi.RBladeTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayDeque;
import java.util.Set;

public class RBladeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_VERBATIM = 2;
  public static final int STATE_RUBY_BLOCK = 4;
  public static final int STATE_RUBY_BLOCK_END = 6;
  public static final int STATE_STRING_LITERAL = 8;
  public static final int STATE_STRING_LITERAL_INTERPOLATION = 10;
  public static final int STATE_REGEX_LITERAL = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\0\1\4\1\7\1\10\2\0\1\11"+
    "\1\12\1\0\1\13\12\0\1\14\1\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\30\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\30\1\52\1\53\1\54"+
    "\1\0\1\55\1\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\30\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\56\1\57\1\44\1\45"+
    "\1\46\1\47\1\60\1\51\1\30\1\61\1\52\1\62"+
    "\7\0\1\2\32\0\1\63\217\0\2\64\115\0\1\65"+
    "\u0200\0\1\63\177\0\13\63\35\0\2\2\5\0\1\63"+
    "\57\0\1\63\312\0\1\66\325\0\1\63\377\0\u0100\67";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\6\1\3\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\2\1\7\1\2\2\10\3\11\1\12\2\11\3\13"+
    "\1\2\1\14\2\2\1\15\1\16\1\2\1\17\1\2"+
    "\1\20\20\0\1\21\3\0\1\2\1\3\1\22\3\0"+
    "\1\23\1\14\1\24\1\0\1\20\14\0\1\25\20\0"+
    "\1\26\6\0\1\20\14\0\1\25\1\0\1\27\24\0"+
    "\1\30\2\0\1\31\7\0\1\25\1\0\1\25\7\0"+
    "\1\25\2\0\1\32\20\0\1\25\45\0\1\33\12\0"+
    "\1\25\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u0380\0\u0380\0\u0380\0\u03f0\0\u0380\0\u0428"+
    "\0\u0380\0\u0460\0\u0380\0\u0498\0\u04d0\0\u0380\0\u0508\0\u0540"+
    "\0\u0380\0\u0578\0\u05b0\0\u05e8\0\u0380\0\u0620\0\u0658\0\u0380"+
    "\0\u0380\0\u0380\0\u0380\0\u05b0\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8"+
    "\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0310"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\u0380\0\u0b60\0\u0540\0\u0b98\0\u0380"+
    "\0\u0bd0\0\u0380\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260"+
    "\0\u1298\0\u0380\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\u0380\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u0f18\0\u0380"+
    "\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880"+
    "\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1340\0\u1b58\0\u1b90\0\u0380"+
    "\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10"+
    "\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u0f18\0\u2028\0\u2060\0\u2098"+
    "\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258"+
    "\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418"+
    "\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8"+
    "\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798"+
    "\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958"+
    "\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18"+
    "\0\u2b50\0\u2b88\0\u2bc0\0\u0380\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0"+
    "\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u0380\0\u2e28";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\15\10\1\11\3\10\1\12\37\10\1\13\6\10\21\14"+
    "\1\15\46\14\1\16\2\17\1\20\1\21\1\16\1\22"+
    "\1\23\1\24\1\25\1\16\1\26\1\27\4\16\1\30"+
    "\30\16\1\23\1\16\1\31\4\16\1\23\1\32\1\17"+
    "\4\16\3\33\1\34\2\33\1\35\1\33\1\36\10\33"+
    "\1\37\40\33\1\40\5\33\5\41\1\42\45\41\1\43"+
    "\14\41\4\44\1\45\1\44\1\46\4\44\1\47\45\44"+
    "\1\50\1\51\5\44\13\52\1\53\37\52\1\54\14\52"+
    "\15\10\1\0\3\10\1\0\37\10\1\0\6\10\6\0"+
    "\1\55\104\0\1\56\1\57\1\60\1\61\1\62\2\0"+
    "\1\63\2\0\1\64\1\65\1\66\1\67\1\0\1\70"+
    "\1\71\1\0\1\72\1\73\1\74\6\0\1\70\1\71"+
    "\4\0\1\63\1\71\5\0\1\75\55\0\1\76\6\0"+
    "\21\14\1\0\46\14\26\0\1\77\41\0\1\16\2\0"+
    "\1\16\1\0\1\16\4\0\1\16\2\0\4\16\1\0"+
    "\30\16\1\0\1\16\1\0\4\16\3\0\4\16\1\0"+
    "\2\100\27\0\1\101\30\0\1\100\1\101\3\0\1\16"+
    "\2\0\1\102\1\0\1\16\4\0\1\16\2\0\4\16"+
    "\1\0\30\16\1\0\1\16\1\0\4\16\3\0\4\16"+
    "\70\0\2\21\1\0\14\21\1\24\12\21\1\103\6\21"+
    "\1\103\5\21\1\103\6\21\3\103\6\21\1\0\13\104"+
    "\1\0\54\104\26\0\1\105\123\0\1\24\10\0\1\106"+
    "\103\0\1\36\76\0\1\107\123\0\1\36\66\0\1\110"+
    "\6\0\70\52\4\44\1\0\1\44\1\0\4\44\1\0"+
    "\45\44\2\0\5\44\2\45\1\0\27\45\1\111\6\45"+
    "\1\111\5\45\1\111\6\45\3\111\6\45\1\0\13\112"+
    "\1\0\54\112\5\0\1\113\10\0\1\114\105\0\1\115"+
    "\5\0\1\116\13\0\1\116\33\0\1\117\6\0\1\120"+
    "\2\0\1\121\61\0\1\122\3\0\1\123\31\0\1\123"+
    "\25\0\1\124\11\0\1\125\1\126\1\127\70\0\1\130"+
    "\57\0\1\131\66\0\1\132\67\0\1\133\3\0\1\134"+
    "\31\0\1\134\37\0\1\135\1\0\1\136\53\0\1\137"+
    "\17\0\1\140\2\0\1\141\10\0\1\140\37\0\1\142"+
    "\16\0\1\143\50\0\1\144\2\0\1\145\12\0\1\146"+
    "\61\0\1\147\57\0\1\150\72\0\1\151\41\0\1\152"+
    "\76\0\1\153\113\0\1\154\67\0\1\155\31\0\1\16"+
    "\2\0\1\16\1\0\1\16\4\0\1\16\2\0\4\16"+
    "\1\0\30\16\1\0\1\16\1\0\4\16\1\0\1\24"+
    "\1\0\4\16\2\21\1\0\64\21\37\0\1\156\67\0"+
    "\1\157\31\0\2\45\1\0\64\45\1\0\6\113\1\160"+
    "\61\113\16\0\1\161\73\0\1\162\73\0\1\163\104\0"+
    "\1\164\13\0\1\164\5\0\1\164\30\0\1\165\63\0"+
    "\1\166\74\0\1\167\4\0\1\170\76\0\1\171\13\0"+
    "\1\171\5\0\1\171\26\0\1\172\106\0\1\173\13\0"+
    "\1\173\5\0\1\173\42\0\1\174\54\0\1\175\20\0"+
    "\1\131\63\0\1\176\13\0\1\176\12\0\1\177\5\0"+
    "\1\200\124\0\1\201\73\0\1\202\7\0\1\202\43\0"+
    "\1\203\60\0\1\131\66\0\1\164\107\0\1\204\51\0"+
    "\1\205\10\0\1\206\73\0\1\207\1\131\12\0\1\207"+
    "\5\0\1\207\24\0\1\210\16\0\1\211\51\0\1\212"+
    "\100\0\1\213\72\0\1\214\52\0\1\215\26\0\1\216"+
    "\52\0\1\217\7\0\1\220\65\0\1\221\13\0\1\221"+
    "\37\0\1\222\3\0\1\216\31\0\1\216\15\0\1\223"+
    "\102\0\1\224\43\0\2\225\60\0\1\225\31\0\1\226"+
    "\67\0\1\227\42\0\6\113\1\160\10\113\1\230\50\113"+
    "\36\0\1\231\53\0\1\232\73\0\1\131\65\0\1\233"+
    "\106\0\1\234\13\0\1\234\5\0\1\234\34\0\1\235"+
    "\31\0\1\235\31\0\1\236\63\0\1\237\76\0\1\240"+
    "\64\0\1\131\3\0\1\63\31\0\1\63\47\0\1\241"+
    "\43\0\1\242\1\0\30\242\3\0\4\242\10\0\1\177"+
    "\5\0\1\200\16\0\1\243\26\0\1\244\43\0\1\245"+
    "\102\0\1\131\43\0\1\131\73\0\1\246\103\0\1\247"+
    "\2\0\1\250\13\0\1\250\5\0\1\250\27\0\1\251"+
    "\12\0\1\234\60\0\1\252\63\0\1\253\107\0\1\254"+
    "\73\0\1\255\44\0\1\256\106\0\1\257\46\0\1\232"+
    "\77\0\1\164\61\0\1\166\73\0\1\260\31\0\1\260"+
    "\26\0\1\261\102\0\1\131\31\0\12\223\1\262\55\223"+
    "\46\0\1\263\6\0\1\264\54\0\1\265\12\0\1\266"+
    "\1\265\53\0\1\267\12\0\1\270\1\267\44\0\1\203"+
    "\32\0\1\203\34\0\1\131\32\0\1\131\34\0\1\271"+
    "\32\0\1\271\44\0\1\131\13\0\1\131\5\0\1\131"+
    "\40\0\1\272\75\0\1\164\46\0\1\273\45\0\1\177"+
    "\5\0\1\200\16\0\1\243\20\0\1\274\5\0\1\275"+
    "\63\0\1\276\17\0\1\177\5\0\1\200\10\0\1\242"+
    "\1\0\30\242\3\0\4\242\43\0\1\117\61\0\1\243"+
    "\100\0\1\135\61\0\1\131\64\0\1\277\67\0\1\300"+
    "\106\0\1\301\23\0\1\177\5\0\1\200\22\0\1\63"+
    "\4\0\1\302\15\0\1\303\6\0\1\63\42\0\1\304"+
    "\15\0\1\305\44\0\1\306\31\0\1\306\27\0\1\307"+
    "\77\0\1\310\67\0\1\131\55\0\1\311\45\0\12\223"+
    "\1\312\55\223\26\0\1\313\107\0\1\263\66\0\1\314"+
    "\64\0\1\265\13\0\1\265\56\0\1\315\64\0\1\267"+
    "\13\0\1\267\37\0\1\135\67\0\1\316\75\0\1\271"+
    "\65\0\1\317\31\0\1\317\31\0\1\243\20\0\1\274"+
    "\21\0\1\177\5\0\1\200\10\0\1\131\105\0\1\320"+
    "\67\0\1\321\55\0\1\322\101\0\1\136\63\0\1\63"+
    "\4\0\1\302\24\0\1\63\41\0\1\323\70\0\1\304"+
    "\72\0\1\271\13\0\1\271\55\0\1\271\50\0\1\324"+
    "\106\0\1\325\23\0\12\223\1\312\47\223\1\326\5\223"+
    "\42\0\1\327\13\0\1\327\34\0\1\330\67\0\1\331"+
    "\71\0\1\203\106\0\1\332\50\0\1\252\106\0\1\203"+
    "\67\0\1\333\57\0\1\334\75\0\1\335\12\0\1\336"+
    "\1\335\43\0\1\337\31\0\1\337\3\0\12\223\1\262"+
    "\47\223\1\230\5\223\23\0\1\340\115\0\1\24\67\0"+
    "\1\36\47\0\1\341\70\0\1\342\31\0\1\342\54\0"+
    "\1\131\44\0\1\343\103\0\1\335\13\0\1\335\46\0"+
    "\1\344\54\0\1\345\77\0\1\346\22\0\1\347\6\0"+
    "\1\346\42\0\1\222\66\0\1\350\75\0\1\351\61\0"+
    "\1\352\63\0\1\346\31\0\1\346\30\0\1\353\74\0"+
    "\1\354\31\0\1\354\30\0\1\355\70\0\1\356\76\0"+
    "\1\357\60\0\1\360\103\0\1\131\13\0\1\131\61\0"+
    "\1\176\7\0\1\176\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11872];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\11\1\1\11\1\1\3\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\2\1\1\11\3\1"+
    "\1\11\2\1\4\11\2\1\20\0\1\1\3\0\2\1"+
    "\1\11\3\0\1\11\1\1\1\11\1\0\1\1\14\0"+
    "\1\1\20\0\1\11\6\0\1\11\14\0\1\1\1\0"+
    "\1\11\24\0\1\1\2\0\1\11\7\0\1\1\1\0"+
    "\1\1\7\0\1\1\2\0\1\1\20\0\1\1\45\0"+
    "\1\11\12\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int parentheses;
    private ArrayDeque<Integer> stateStack = new ArrayDeque<Integer>();
    private ArrayDeque<Character> blockStack = new ArrayDeque<Character>();
    private boolean stringIsInterpolated;
    private String rubyBlockEndDelimiter;
    private String currentStatement = "";
    private Set<String> naryStatements = Set.of("pushif", "prependif", "each", "eachelse", "eachwithindex", "eachwithindexelse", "props");

    private char flipBracket(char bracket){
        switch (bracket) {
            case '{': return '}';
            case '[': return ']';
            case '(': return ')';
            case '<': return '>';
            default: return bracket;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RBladeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 28: break;
          case 2:
            { return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 29: break;
          case 3:
            { stateStack.addFirst(STATE_RUBY_BLOCK);
                                            blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                            stringIsInterpolated = yycharat(0) == '"' || yylength() == 2 || (yylength() == 3 && yytext().toString().substring(0, 2).equals("%Q"));
                                            yybegin(STATE_STRING_LITERAL);
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 30: break;
          case 4:
            { if (!blockStack.isEmpty() && yycharat(0) == '|' && blockStack.peekFirst() == '|') {
                                                blockStack.removeFirst();
                                            } else {
                                                blockStack.addFirst(flipBracket(yycharat(0)));
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 31: break;
          case 5:
            { if (blockStack.isEmpty() && rubyBlockEndDelimiter.equals(yytext().toString().replace("_", "").toLowerCase())) {
                                                yypushback(yylength());
                                                yybegin(stateStack.removeFirst());
                                            } else {
                                                if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
                                                    blockStack.removeFirst();
                                                }

                                                return RBladeTypes.RUBY_EXPRESSION;
                                            }
            }
          // fall through
          case 32: break;
          case 6:
            { if (blockStack.isEmpty() && (naryStatements.contains(currentStatement))) {
                                            return RBladeTypes.RBLADE_STATEMENT_COMMA;
                                          } else {
                                            return RBladeTypes.RUBY_EXPRESSION;
                                          }
            }
          // fall through
          case 33: break;
          case 7:
            { if (blockStack.isEmpty() && currentStatement.equals("props")) {
                                                return RBladeTypes.RBLADE_STATEMENT_PROPS_COLON;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 34: break;
          case 8:
            { if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
                                                blockStack.removeFirst();
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 35: break;
          case 9:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 36: break;
          case 10:
            { yybegin(YYINITIAL);
                                          currentStatement = "";
                                          return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 37: break;
          case 11:
            { if (yycharat(0) == blockStack.getFirst()) {
                                                blockStack.removeFirst();
                                                yybegin(stateStack.removeFirst());
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 38: break;
          case 12:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION);
                                          blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                          yybegin(STATE_STRING_LITERAL);

                                          return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 39: break;
          case 13:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 40: break;
          case 14:
            { yybegin(stateStack.removeFirst()); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 41: break;
          case 15:
            { yybegin(stateStack.removeFirst());

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 42: break;
          case 16:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "%>";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 43: break;
          case 17:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "}}";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 44: break;
          case 18:
            { stateStack.addFirst(STATE_RUBY_BLOCK);
                                            yypushback(1);
                                            yybegin(STATE_REGEX_LITERAL);

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 45: break;
          case 19:
            { if (stringIsInterpolated) {
                                              stateStack.addFirst(STATE_STRING_LITERAL);
                                              yybegin(STATE_STRING_LITERAL_INTERPOLATION);
                                            }
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 46: break;
          case 20:
            { yypushback(1);
                                            stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION);
                                            yybegin(STATE_REGEX_LITERAL);

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 47: break;
          case 21:
            { return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 48: break;
          case 22:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "!!}";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 49: break;
          case 23:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = ")";
                                            yybegin(STATE_RUBY_BLOCK);
                                            currentStatement = yytext().toString().replaceAll("[^a-zA-Z]", "").toLowerCase();

                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 50: break;
          case 24:
            { if (blockStack.isEmpty() && currentStatement.startsWith("each")) {
                                                return RBladeTypes.RBLADE_STATEMENT_EACH_IN;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 51: break;
          case 25:
            { return RBladeTypes.COMMENT;
            }
          // fall through
          case 52: break;
          case 26:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "@endruby";
                                            currentStatement = "ruby";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 53: break;
          case 27:
            { yybegin(STATE_VERBATIM);
                                          return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

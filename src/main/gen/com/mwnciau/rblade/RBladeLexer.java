// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RBlade.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.mwnciau.rblade;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.mwnciau.rblade.psi.RBladeTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayDeque;
import java.util.Set;

public class RBladeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_VERBATIM = 2;
  public static final int RBLADE_RUBY = 4;
  public static final int RBLADE_PRINT = 6;
  public static final int RBLADE_UNSAFE_PRINT = 8;
  public static final int ERB_STATEMENT = 10;
  public static final int STATE_RUBY_BLOCK = 12;
  public static final int STATE_RUBY_BLOCK_END = 14;
  public static final int STATE_STRING_LITERAL = 16;
  public static final int STATE_STRING_LITERAL_INTERPOLATION = 18;
  public static final int STATE_REGEX_LITERAL = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\0\1\4\1\7\1\10\2\0\1\11"+
    "\1\12\1\0\1\13\12\0\1\14\1\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\30\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\30\1\52\1\53\1\54"+
    "\1\0\1\55\1\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\30\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\56\1\57\1\44\1\45"+
    "\1\46\1\47\1\60\1\51\1\30\1\61\1\52\1\62"+
    "\7\0\1\2\32\0\1\63\217\0\2\64\115\0\1\65"+
    "\u0200\0\1\63\177\0\13\63\35\0\2\2\5\0\1\63"+
    "\57\0\1\63\312\0\1\66\325\0\1\63\377\0\u0100\67";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\6\1\13\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\2\1\7\2\2\1\10\1\4\1\10\3\11\1\12"+
    "\4\11\6\13\1\2\1\14\4\2\1\15\1\16\1\17"+
    "\1\2\36\0\1\20\3\0\1\2\1\3\1\21\3\0"+
    "\1\22\1\14\1\23\1\2\11\0\1\24\32\0\1\25"+
    "\33\0\1\2\74\0\2\25\1\0\1\26\24\0\1\27"+
    "\3\0\1\30\2\0\1\2\35\0\1\31\1\32\41\0"+
    "\1\25\10\0\1\25\2\0\1\25\7\0\1\27\11\0"+
    "\1\2\64\0\1\25\12\0\1\26\4\0\1\33\1\0"+
    "\1\27\5\0\1\2\54\0\1\27\5\0\1\2\36\0"+
    "\1\2\20\0\1\2\15\0\1\2\11\0\1\2\10\0"+
    "\1\34\1\2\3\0\1\35\1\0\1\2\4\0\2\2"+
    "\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u04d0\0\u0738\0\u04d0\0\u04d0\0\u04d0\0\u0770\0\u04d0"+
    "\0\u07a8\0\u07e0\0\u04d0\0\u0578\0\u0818\0\u04d0\0\u0850\0\u0888"+
    "\0\u04d0\0\u0508\0\u08c0\0\u0578\0\u08f8\0\u04d0\0\u0930\0\u0508"+
    "\0\u05b0\0\u0968\0\u0578\0\u09a0\0\u04d0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0578\0\u04d0\0\u04d0\0\u0968\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u04d0\0\u05e8\0\u06c8\0\u1148\0\u1180"+
    "\0\u11b8\0\u04d0\0\u11f0\0\u08f8\0\u1228\0\u04d0\0\u1260\0\u04d0"+
    "\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0"+
    "\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0"+
    "\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960"+
    "\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0"+
    "\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u04d0\0\u2178\0\u21b0\0\u21e8"+
    "\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8"+
    "\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568"+
    "\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728"+
    "\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8"+
    "\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8"+
    "\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68"+
    "\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28"+
    "\0\u1ab0\0\u04d0\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138"+
    "\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8"+
    "\0\u3330\0\u3368\0\u2028\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480"+
    "\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640"+
    "\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800"+
    "\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0"+
    "\0\u39f8\0\u3a30\0\u3a68\0\u04d0\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48"+
    "\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08"+
    "\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58\0\u3e90\0\u3ec8"+
    "\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088"+
    "\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248"+
    "\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398\0\u43d0\0\u4408"+
    "\0\u4440\0\u4478\0\u44b0\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8"+
    "\0\u4600\0\u4638\0\u04d0\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750"+
    "\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0\0\u48d8\0\u4910"+
    "\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28\0\u4a60\0\u4a98\0\u4ad0"+
    "\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u4c90"+
    "\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u4da8\0\u4de0\0\u4e18\0\u4e50"+
    "\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68\0\u4fa0\0\u4fd8\0\u5010"+
    "\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u5160\0\u5198\0\u51d0"+
    "\0\u5208\0\u5240\0\u5278\0\u52b0\0\u52e8\0\u5320\0\u5358\0\u5390"+
    "\0\u53c8\0\u5400\0\u5438\0\u5470\0\u54a8\0\u54e0\0\u5518\0\u5550"+
    "\0\u5588\0\u55c0\0\u55f8\0\u44b0\0\u55f8\0\u5630\0\u5668\0\u56a0"+
    "\0\u56d8\0\u04d0\0\u5710\0\u5748\0\u5780\0\u57b8\0\u57f0\0\u5828"+
    "\0\u5860\0\u5898\0\u58d0\0\u5908\0\u5940\0\u5978\0\u59b0\0\u59e8"+
    "\0\u5a20\0\u5a58\0\u5a90\0\u5ac8\0\u5b00\0\u5b38\0\u5b70\0\u5ba8"+
    "\0\u5be0\0\u5c18\0\u5c50\0\u5c88\0\u5cc0\0\u5cf8\0\u5d30\0\u5d68"+
    "\0\u5da0\0\u5dd8\0\u5e10\0\u5e48\0\u5e80\0\u5eb8\0\u5ef0\0\u5f28"+
    "\0\u5f60\0\u5f98\0\u5fd0\0\u6008\0\u6040\0\u6078\0\u60b0\0\u60e8"+
    "\0\u6120\0\u6158\0\u6190\0\u61c8\0\u6200\0\u6238\0\u3368\0\u6270"+
    "\0\u62a8\0\u62e0\0\u6318\0\u6350\0\u6388\0\u63c0\0\u63f8\0\u6430"+
    "\0\u6468\0\u64a0\0\u64d8\0\u4c20\0\u6510\0\u6548\0\u6580\0\u65b8"+
    "\0\u65f0\0\u6628\0\u6660\0\u6698\0\u66d0\0\u6708\0\u6740\0\u6778"+
    "\0\u67b0\0\u67e8\0\u6820\0\u6858\0\u6890\0\u68c8\0\u6900\0\u6938"+
    "\0\u6970\0\u69a8\0\u69e0\0\u6a18\0\u6a50\0\u6a88\0\u6ac0\0\u6af8"+
    "\0\u6b30\0\u6b68\0\u6ba0\0\u6bd8\0\u6c10\0\u6c48\0\u6c80\0\u6cb8"+
    "\0\u6cf0\0\u6d28\0\u6d60\0\u6d98\0\u6dd0\0\u6e08\0\u6e40\0\u6e78"+
    "\0\u6eb0\0\u6ee8\0\u6f20\0\u6f58\0\u6f90\0\u6fc8\0\u7000\0\u7038"+
    "\0\u7070\0\u70a8\0\u70e0\0\u7118\0\u7150\0\u7188\0\u71c0\0\u71f8"+
    "\0\u7230\0\u7268\0\u72a0\0\u72d8\0\u7310\0\u7348\0\u7380\0\u73b8"+
    "\0\u73f0\0\u7428\0\u7460\0\u7498\0\u74d0\0\u04d0\0\u7508\0\u7540"+
    "\0\u7578\0\u75b0\0\u55f8\0\u75e8\0\u7620\0\u7658\0\u7690\0\u76c8"+
    "\0\u7700\0\u7738\0\u7770\0\u77a8\0\u77e0\0\u7818\0\u7850\0\u7888"+
    "\0\u78c0\0\u78f8\0\u7930\0\u7968\0\u79a0\0\u79d8\0\u7a10\0\u7a48"+
    "\0\u7a80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\15\21\1\22\3\21\1\23\37\21\1\24\6\21\21\25"+
    "\1\26\46\25\15\27\1\30\3\27\1\31\37\27\1\32"+
    "\23\27\1\30\3\27\1\33\37\27\1\32\1\34\10\27"+
    "\1\35\11\27\1\30\3\27\1\33\37\27\1\32\14\27"+
    "\1\36\6\27\1\30\3\27\1\33\37\27\1\32\6\27"+
    "\1\37\2\40\1\41\1\42\1\37\1\43\1\44\1\45"+
    "\1\46\1\37\1\47\1\50\1\51\3\37\1\52\30\37"+
    "\1\44\1\37\1\53\4\37\1\54\1\55\1\40\4\37"+
    "\3\56\1\57\2\56\1\60\1\56\1\61\4\56\1\62"+
    "\3\56\1\63\37\56\1\64\1\65\5\56\5\66\1\67"+
    "\7\66\1\70\3\66\1\71\31\66\1\72\5\66\1\73"+
    "\6\66\4\74\1\75\1\74\1\76\4\74\1\77\1\74"+
    "\1\100\3\74\1\101\37\74\1\102\1\103\5\74\13\27"+
    "\1\104\1\27\1\30\3\27\1\33\31\27\1\105\5\27"+
    "\1\32\6\27\15\0\1\106\43\0\1\107\6\0\70\15"+
    "\15\0\1\110\3\0\1\111\63\0\1\112\71\0\1\113"+
    "\50\0\15\21\1\0\3\21\1\0\37\21\1\0\6\21"+
    "\6\0\1\114\102\0\1\115\1\0\1\116\1\117\1\120"+
    "\1\121\1\122\2\0\1\123\2\0\1\124\1\125\1\126"+
    "\1\127\1\0\1\130\1\131\1\0\1\132\1\133\1\134"+
    "\6\0\1\130\1\131\1\0\1\135\2\0\1\123\1\131"+
    "\5\0\1\136\55\0\1\137\6\0\21\25\1\0\46\25"+
    "\26\0\1\140\137\0\1\141\107\0\1\142\17\0\1\133"+
    "\102\0\1\143\54\0\1\133\103\0\1\144\10\0\1\145"+
    "\103\0\1\144\50\0\1\37\2\0\1\37\1\0\1\37"+
    "\4\0\1\37\2\0\4\37\1\0\30\37\1\0\1\37"+
    "\1\0\4\37\3\0\4\37\1\0\2\146\27\0\1\147"+
    "\30\0\1\146\1\147\3\0\1\37\2\0\1\150\1\0"+
    "\1\37\4\0\1\37\2\0\4\37\1\0\30\37\1\0"+
    "\1\37\1\0\4\37\3\0\4\37\2\42\1\0\14\42"+
    "\1\45\12\42\1\151\6\42\1\151\5\42\1\151\6\42"+
    "\3\151\6\42\1\0\13\152\1\0\54\152\1\37\2\0"+
    "\1\37\1\0\1\37\1\141\3\0\1\37\2\0\4\37"+
    "\1\0\30\37\1\0\1\37\1\0\4\37\3\0\4\37"+
    "\26\0\1\153\17\0\1\133\103\0\1\45\10\0\1\154"+
    "\103\0\1\61\76\0\1\155\17\0\1\133\103\0\1\61"+
    "\66\0\1\156\6\0\70\27\4\74\1\0\1\74\1\0"+
    "\4\74\1\0\45\74\2\0\5\74\2\75\1\0\27\75"+
    "\1\157\6\75\1\157\5\75\1\157\6\75\3\157\6\75"+
    "\1\0\13\160\1\0\54\160\4\74\1\0\1\74\1\141"+
    "\4\74\1\0\45\74\2\0\11\74\1\0\1\74\1\0"+
    "\4\74\1\0\32\74\1\161\12\74\2\0\5\74\6\0"+
    "\1\162\142\0\1\163\14\0\1\164\102\0\1\165\37\0"+
    "\1\166\14\0\1\167\67\0\1\170\61\0\5\171\1\172"+
    "\1\173\61\171\23\0\1\174\1\175\1\176\1\177\1\200"+
    "\2\0\1\201\2\0\1\202\1\203\1\204\1\205\1\0"+
    "\1\206\1\207\1\0\1\210\1\0\1\211\6\0\1\206"+
    "\1\207\4\0\1\201\1\207\36\0\1\212\5\0\1\213"+
    "\13\0\1\213\33\0\1\214\6\0\1\215\2\0\1\216"+
    "\61\0\1\217\3\0\1\220\31\0\1\220\25\0\1\221"+
    "\11\0\1\222\1\223\1\224\70\0\1\225\57\0\1\226"+
    "\66\0\1\227\67\0\1\230\3\0\1\231\31\0\1\231"+
    "\37\0\1\232\1\0\1\233\53\0\1\234\17\0\1\235"+
    "\2\0\1\236\10\0\1\235\37\0\1\237\16\0\1\240"+
    "\50\0\1\241\2\0\1\242\12\0\1\243\61\0\1\244"+
    "\57\0\1\245\72\0\1\246\41\0\1\247\55\0\1\173"+
    "\11\0\1\250\64\0\12\251\1\252\47\251\1\253\5\251"+
    "\36\0\1\254\36\0\1\172\120\0\1\255\43\0\1\256"+
    "\113\0\1\257\31\0\1\37\2\0\1\37\1\0\1\37"+
    "\4\0\1\37\2\0\4\37\1\0\30\37\1\0\1\37"+
    "\1\0\4\37\1\0\1\45\1\0\4\37\2\42\1\0"+
    "\64\42\37\0\1\260\67\0\1\261\31\0\2\75\1\0"+
    "\64\75\1\0\4\74\1\0\1\74\1\0\4\74\1\0"+
    "\12\74\1\262\32\74\2\0\5\74\5\0\1\263\74\0"+
    "\1\264\63\0\1\265\104\0\1\266\1\267\1\270\1\271"+
    "\1\272\2\0\1\273\2\0\1\274\1\275\1\276\1\277"+
    "\1\0\1\300\1\301\1\0\1\302\1\0\1\303\6\0"+
    "\1\300\1\301\4\0\1\273\1\301\5\0\1\304\55\0"+
    "\1\265\24\0\1\305\51\0\17\170\1\306\50\170\6\171"+
    "\1\307\61\171\6\172\1\310\61\172\70\173\34\0\1\311"+
    "\5\0\1\312\13\0\1\312\33\0\1\313\6\0\1\314"+
    "\2\0\1\315\61\0\1\316\3\0\1\317\31\0\1\317"+
    "\25\0\1\320\11\0\1\321\1\322\1\323\70\0\1\324"+
    "\57\0\1\173\66\0\1\325\67\0\1\326\3\0\1\327"+
    "\31\0\1\327\37\0\1\330\1\0\1\331\53\0\1\332"+
    "\17\0\1\333\2\0\1\334\10\0\1\333\37\0\1\335"+
    "\16\0\1\336\50\0\1\337\2\0\1\340\12\0\1\341"+
    "\61\0\1\342\62\0\1\343\60\0\1\344\73\0\1\345"+
    "\104\0\1\346\13\0\1\346\5\0\1\346\30\0\1\347"+
    "\63\0\1\350\74\0\1\351\4\0\1\352\76\0\1\353"+
    "\13\0\1\353\5\0\1\353\26\0\1\354\106\0\1\355"+
    "\13\0\1\355\5\0\1\355\42\0\1\356\54\0\1\357"+
    "\20\0\1\226\63\0\1\360\13\0\1\360\12\0\1\361"+
    "\5\0\1\362\124\0\1\363\73\0\1\364\7\0\1\364"+
    "\43\0\1\365\60\0\1\226\66\0\1\346\107\0\1\366"+
    "\51\0\1\367\10\0\1\370\73\0\1\371\1\226\12\0"+
    "\1\371\5\0\1\371\24\0\1\372\16\0\1\373\51\0"+
    "\1\374\100\0\1\375\72\0\1\376\52\0\1\377\26\0"+
    "\1\u0100\52\0\1\u0101\7\0\1\u0102\65\0\1\u0103\13\0"+
    "\1\u0103\37\0\1\u0104\3\0\1\u0100\31\0\1\u0100\6\0"+
    "\1\173\64\0\3\250\1\u0105\64\250\62\251\1\253\17\251"+
    "\1\u0106\47\251\1\253\67\251\1\u0107\5\251\25\0\1\u0108"+
    "\67\0\1\u0109\54\0\1\u010a\56\0\2\u010b\60\0\1\u010b"+
    "\31\0\1\u010c\67\0\1\u010d\42\0\4\74\1\0\1\74"+
    "\1\0\4\74\1\0\26\74\1\u010e\13\74\1\u010e\2\74"+
    "\2\0\5\74\6\263\1\u010f\61\263\12\0\1\u0110\111\0"+
    "\1\u0111\5\0\1\u0112\13\0\1\u0112\33\0\1\u0113\6\0"+
    "\1\u0114\2\0\1\u0115\61\0\1\u0116\3\0\1\u0117\31\0"+
    "\1\u0117\25\0\1\u0118\11\0\1\u0119\1\u011a\1\u011b\70\0"+
    "\1\u011c\57\0\1\265\66\0\1\u011d\67\0\1\u011e\3\0"+
    "\1\u011f\31\0\1\u011f\37\0\1\u0120\1\0\1\u0121\53\0"+
    "\1\u0122\17\0\1\u0123\2\0\1\u0124\10\0\1\u0123\37\0"+
    "\1\u0125\16\0\1\u0126\50\0\1\u0127\2\0\1\u0128\12\0"+
    "\1\u0129\61\0\1\u012a\62\0\1\u012b\41\0\1\265\102\0"+
    "\1\265\51\0\6\170\1\0\10\170\1\306\50\170\6\171"+
    "\1\307\10\171\1\u012c\50\171\6\172\1\310\10\172\1\u012d"+
    "\50\172\22\0\1\u012e\73\0\1\u012f\104\0\1\u0130\13\0"+
    "\1\u0130\5\0\1\u0130\30\0\1\u0131\63\0\1\u0132\74\0"+
    "\1\u0133\4\0\1\u0134\76\0\1\u0135\13\0\1\u0135\5\0"+
    "\1\u0135\26\0\1\u0136\106\0\1\u0137\13\0\1\u0137\5\0"+
    "\1\u0137\42\0\1\u0138\54\0\1\173\20\0\1\173\63\0"+
    "\1\173\13\0\1\173\55\0\1\u0139\73\0\1\u013a\7\0"+
    "\1\u013a\43\0\1\u013b\60\0\1\173\66\0\1\u0130\107\0"+
    "\1\320\51\0\1\u013c\10\0\1\u013d\73\0\1\u0136\1\173"+
    "\12\0\1\u0136\5\0\1\u0136\24\0\1\u013e\16\0\1\u013f"+
    "\51\0\1\u0140\100\0\1\u0141\72\0\1\u0142\52\0\1\u0143"+
    "\26\0\1\u0144\52\0\1\u0145\7\0\1\u0146\51\0\1\u0147"+
    "\3\0\1\u0144\31\0\1\u0144\41\0\1\u0148\53\0\1\u0149"+
    "\73\0\1\226\65\0\1\u014a\106\0\1\u014b\13\0\1\u014b"+
    "\5\0\1\u014b\34\0\1\u014c\31\0\1\u014c\31\0\1\u014d"+
    "\63\0\1\u014e\76\0\1\u014f\64\0\1\226\3\0\1\123"+
    "\31\0\1\123\47\0\1\u0150\24\0\1\361\1\0\1\226"+
    "\3\0\1\362\10\0\1\226\1\0\30\357\3\0\4\357"+
    "\10\0\1\361\5\0\1\362\16\0\1\u0151\26\0\1\u0152"+
    "\43\0\1\u0153\102\0\1\226\43\0\1\226\73\0\1\u0154"+
    "\103\0\1\u0155\2\0\1\u0156\13\0\1\u0156\5\0\1\u0156"+
    "\27\0\1\u0157\12\0\1\u014b\60\0\1\u0158\63\0\1\u0159"+
    "\107\0\1\u015a\73\0\1\u015b\44\0\1\u015c\106\0\1\u015d"+
    "\46\0\1\u0149\77\0\1\346\61\0\1\350\73\0\1\u015e"+
    "\31\0\1\u015e\26\0\1\u015f\102\0\1\226\31\0\3\250"+
    "\1\u0160\64\250\12\u0106\1\u0161\47\u0106\1\u0162\5\u0106\62\0"+
    "\1\u0163\53\0\1\u0164\6\0\1\u0165\54\0\1\u0166\12\0"+
    "\1\u0167\1\u0166\11\0\12\u010a\1\u0168\55\u010a\42\0\1\u0169"+
    "\12\0\1\u016a\1\u0169\53\0\1\u016b\12\0\1\u016c\1\u016b"+
    "\11\0\4\74\1\0\1\74\1\0\4\74\1\0\7\74"+
    "\1\u016d\35\74\2\0\5\74\6\263\1\u010f\10\263\1\265"+
    "\50\263\12\u0110\1\u016e\55\u0110\22\0\1\u016f\73\0\1\u0170"+
    "\104\0\1\u0171\13\0\1\u0171\5\0\1\u0171\30\0\1\u0172"+
    "\63\0\1\u0173\74\0\1\u0174\4\0\1\u0175\76\0\1\u0176"+
    "\13\0\1\u0176\5\0\1\u0176\26\0\1\u0177\106\0\1\u0178"+
    "\13\0\1\u0178\5\0\1\u0178\42\0\1\u0179\54\0\1\u017a"+
    "\20\0\1\265\63\0\1\u017b\13\0\1\u017b\55\0\1\u017c"+
    "\73\0\1\u017d\7\0\1\u017d\43\0\1\u017e\60\0\1\265"+
    "\66\0\1\u0171\107\0\1\u017f\51\0\1\u0180\10\0\1\u0181"+
    "\73\0\1\u0182\1\265\12\0\1\u0182\5\0\1\u0182\24\0"+
    "\1\u0183\16\0\1\u0184\51\0\1\u0185\100\0\1\u0186\72\0"+
    "\1\u0187\52\0\1\u0188\26\0\1\u0189\52\0\1\u018a\7\0"+
    "\1\u018b\51\0\1\u018c\3\0\1\u0189\31\0\1\u0189\3\0"+
    "\70\u012d\36\0\1\u018d\53\0\1\u018e\73\0\1\173\65\0"+
    "\1\u018f\106\0\1\u0190\13\0\1\u0190\5\0\1\u0190\34\0"+
    "\1\u0191\31\0\1\u0191\31\0\1\u0192\63\0\1\u0193\76\0"+
    "\1\173\64\0\1\173\3\0\1\201\31\0\1\201\47\0"+
    "\1\u0140\54\0\1\u0194\102\0\1\173\43\0\1\173\107\0"+
    "\1\u0195\2\0\1\u0196\13\0\1\u0196\5\0\1\u0196\27\0"+
    "\1\u0197\12\0\1\u0190\54\0\1\u0198\107\0\1\u0199\73\0"+
    "\1\173\44\0\1\u019a\106\0\1\u019b\46\0\1\u018e\77\0"+
    "\1\u0130\61\0\1\u0132\73\0\1\u019c\31\0\1\u019c\41\0"+
    "\1\173\64\0\1\365\32\0\1\365\34\0\1\226\32\0"+
    "\1\226\34\0\1\u019d\32\0\1\u019d\44\0\1\226\13\0"+
    "\1\226\5\0\1\226\40\0\1\u019e\75\0\1\346\46\0"+
    "\1\u019f\45\0\1\361\5\0\1\362\16\0\1\u0151\20\0"+
    "\1\u01a0\5\0\1\u01a1\63\0\1\u01a2\52\0\1\214\61\0"+
    "\1\u0151\100\0\1\232\61\0\1\226\64\0\1\u01a3\67\0"+
    "\1\u01a4\106\0\1\u01a5\23\0\1\361\5\0\1\362\22\0"+
    "\1\123\4\0\1\u01a6\15\0\1\u01a7\6\0\1\123\42\0"+
    "\1\u01a8\15\0\1\u01a9\44\0\1\u01aa\31\0\1\u01aa\3\0"+
    "\1\u01ab\1\u01ac\5\u01ab\1\u01ad\11\u01ab\1\u01ae\46\u01ab\24\0"+
    "\1\u01af\77\0\1\u01b0\67\0\1\226\55\0\1\u01b1\45\0"+
    "\3\250\1\u0160\56\250\1\u01b2\5\250\12\u0106\1\u01b3\47\u0106"+
    "\1\u0162\17\u0106\1\u0161\47\u0106\1\u01b4\5\u0106\26\0\1\u01b5"+
    "\107\0\1\u0164\66\0\1\u01b6\64\0\1\u0166\13\0\1\u0166"+
    "\11\0\12\u010a\1\u01b7\55\u010a\45\0\1\u01b8\64\0\1\u0169"+
    "\13\0\1\u0169\56\0\1\u01b9\64\0\1\u016b\13\0\1\u016b"+
    "\11\0\4\74\1\0\1\74\1\0\4\74\1\0\6\74"+
    "\1\u01ba\36\74\2\0\5\74\12\u0110\1\u01bb\55\u0110\36\0"+
    "\1\u01bc\53\0\1\u01bd\73\0\1\265\65\0\1\u01be\106\0"+
    "\1\u01bf\13\0\1\u01bf\5\0\1\u01bf\34\0\1\u01c0\31\0"+
    "\1\u01c0\31\0\1\u01c1\63\0\1\u01c2\76\0\1\u01c3\64\0"+
    "\1\265\3\0\1\273\31\0\1\273\47\0\1\u01c4\26\0"+
    "\1\265\14\0\1\265\1\0\30\u017a\3\0\4\u017a\35\0"+
    "\1\u01c5\26\0\1\u01c6\43\0\1\u01c7\102\0\1\265\43\0"+
    "\1\265\73\0\1\u01c8\103\0\1\u01c9\2\0\1\u01ca\13\0"+
    "\1\u01ca\5\0\1\u01ca\27\0\1\u01cb\12\0\1\u01bf\60\0"+
    "\1\u01cc\63\0\1\u01cd\107\0\1\u01ce\73\0\1\265\44\0"+
    "\1\u01cf\106\0\1\u01d0\46\0\1\u01bd\77\0\1\u0171\61\0"+
    "\1\u0173\73\0\1\u01d1\31\0\1\u01d1\41\0\1\265\64\0"+
    "\1\u013b\32\0\1\u013b\34\0\1\173\32\0\1\173\34\0"+
    "\1\u01d2\32\0\1\u01d2\44\0\1\173\13\0\1\173\5\0"+
    "\1\173\40\0\1\u01d3\75\0\1\u0130\46\0\1\u01d4\103\0"+
    "\1\330\56\0\1\u01d5\67\0\1\u01d6\106\0\1\u01d7\61\0"+
    "\1\u01d8\15\0\1\u01d9\44\0\1\u01da\31\0\1\u01da\27\0"+
    "\1\u01db\77\0\1\u01dc\67\0\1\173\61\0\1\232\67\0"+
    "\1\u01dd\75\0\1\u019d\65\0\1\u01de\31\0\1\u01de\31\0"+
    "\1\u0151\20\0\1\u01a0\21\0\1\361\5\0\1\362\10\0"+
    "\1\226\105\0\1\u01df\67\0\1\u01e0\55\0\1\u01e1\101\0"+
    "\1\233\63\0\1\123\4\0\1\u01a6\24\0\1\123\41\0"+
    "\1\u01e2\70\0\1\u01a8\72\0\1\u019d\13\0\1\u019d\11\0"+
    "\21\u01ab\1\u01ae\67\u01ab\1\u01ae\4\u01ab\1\u01e3\41\u01ab\44\0"+
    "\1\u019d\50\0\1\u01e4\106\0\1\u01e5\23\0\12\u0106\1\u01b3"+
    "\47\u0106\1\u01e6\5\u0106\12\u010a\1\u0168\47\u010a\1\u01e7\5\u010a"+
    "\42\0\1\u01e8\13\0\1\u01e8\34\0\1\u01e9\44\0\12\u010a"+
    "\1\u01b7\47\u010a\1\u01ea\5\u010a\23\0\1\u01eb\67\0\1\u01ec"+
    "\44\0\4\74\1\0\1\74\1\0\4\74\1\0\30\74"+
    "\1\u01ed\14\74\2\0\5\74\12\u0110\1\u01bb\47\u0110\1\u01ee"+
    "\5\u0110\33\0\1\u017e\32\0\1\u017e\34\0\1\265\32\0"+
    "\1\265\34\0\1\u01ef\32\0\1\u01ef\44\0\1\265\13\0"+
    "\1\265\5\0\1\265\40\0\1\u01f0\75\0\1\u0171\46\0"+
    "\1\u01f1\72\0\1\u01c5\20\0\1\u01f2\5\0\1\u01f3\63\0"+
    "\1\u01f4\52\0\1\u0113\61\0\1\u01c5\100\0\1\u0120\61\0"+
    "\1\265\64\0\1\u01f5\67\0\1\u01f6\106\0\1\u01f7\54\0"+
    "\1\273\4\0\1\u01f8\15\0\1\u01f9\6\0\1\273\42\0"+
    "\1\u01fa\15\0\1\u01fb\44\0\1\u01fc\31\0\1\u01fc\27\0"+
    "\1\u01fd\77\0\1\u01fe\67\0\1\265\61\0\1\330\67\0"+
    "\1\u01ff\75\0\1\u01d2\71\0\1\330\67\0\1\u0200\55\0"+
    "\1\u0201\101\0\1\u0202\70\0\1\u01d8\72\0\1\u01d2\13\0"+
    "\1\u01d2\55\0\1\u01d2\50\0\1\u0203\67\0\1\365\106\0"+
    "\1\u0204\50\0\1\u0158\106\0\1\365\67\0\1\u0205\57\0"+
    "\1\u0206\33\0\21\u01ab\1\u01ae\14\u01ab\1\u0207\31\u01ab\42\0"+
    "\1\u0208\12\0\1\u0209\1\u0208\43\0\1\u020a\31\0\1\u020a"+
    "\3\0\12\u0106\1\u0161\47\u0106\1\u012d\5\u0106\23\0\1\u020b"+
    "\115\0\1\144\16\0\12\u010a\1\u0168\47\u010a\1\u012d\5\u010a"+
    "\51\0\1\45\67\0\1\61\16\0\4\74\1\0\1\74"+
    "\1\0\4\74\1\0\16\74\1\u020c\26\74\2\0\1\74"+
    "\1\u020c\3\74\12\u0110\1\u016e\47\u0110\1\265\5\u0110\26\0"+
    "\1\u0120\67\0\1\u020d\75\0\1\u01ef\65\0\1\u020e\31\0"+
    "\1\u020e\31\0\1\u01c5\20\0\1\u01f2\56\0\1\u020f\67\0"+
    "\1\u0210\55\0\1\u0211\101\0\1\u0121\63\0\1\273\4\0"+
    "\1\u01f8\24\0\1\273\41\0\1\u0212\70\0\1\u01fa\72\0"+
    "\1\u01ef\13\0\1\u01ef\55\0\1\u01ef\50\0\1\u0213\67\0"+
    "\1\u013b\106\0\1\u013b\67\0\1\u0214\57\0\1\u0140\75\0"+
    "\1\u0215\12\0\1\u0216\1\u0215\42\0\1\u0217\70\0\1\u0218"+
    "\31\0\1\u0218\54\0\1\226\16\0\21\u01ab\1\u01ae\3\u01ab"+
    "\1\u0219\42\u01ab\26\0\1\u021a\103\0\1\u0208\13\0\1\u0208"+
    "\46\0\1\u021b\54\0\1\u021c\45\0\4\74\1\0\1\74"+
    "\1\0\4\74\1\0\21\74\1\u021d\23\74\2\0\5\74"+
    "\25\0\1\u017e\106\0\1\u021e\50\0\1\u01cc\106\0\1\u017e"+
    "\67\0\1\u021f\57\0\1\u0185\75\0\1\u0220\12\0\1\u0221"+
    "\1\u0220\43\0\1\u0222\31\0\1\u0222\31\0\1\u0223\103\0"+
    "\1\u0215\13\0\1\u0215\43\0\1\u0224\22\0\1\u0225\6\0"+
    "\1\u0224\42\0\1\u0104\30\0\21\u01ab\1\u01ae\20\u01ab\1\u0226"+
    "\12\u01ab\1\u0227\1\u0226\11\u01ab\36\0\1\u0228\31\0\21\u021b"+
    "\1\u0229\46\u021b\44\0\1\u022a\23\0\4\u021d\1\u021b\1\u021d"+
    "\1\u021b\4\u021d\1\u021b\5\u021d\1\u022b\37\u021d\2\u021b\5\u021d"+
    "\31\0\1\u022c\70\0\1\u022d\31\0\1\u022d\31\0\1\u022e"+
    "\103\0\1\u0220\13\0\1\u0220\50\0\1\u0147\66\0\1\u022f"+
    "\67\0\1\u0230\63\0\1\u0224\31\0\1\u0224\3\0\21\u01ab"+
    "\1\u01ae\23\u01ab\1\u0231\43\u01ab\1\u01ae\20\u01ab\1\u0226\13\u01ab"+
    "\1\u0226\11\u01ab\25\0\1\u0232\42\0\21\u021b\1\u0229\4\u021b"+
    "\1\u0233\41\u021b\32\0\1\u0234\31\0\1\u0234\3\0\4\u021d"+
    "\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b\5\u021d\1\u022b\4\u021d"+
    "\1\u0235\32\u021d\2\u021b\5\u021d\32\0\1\u0236\22\0\1\u0237"+
    "\6\0\1\u0236\42\0\1\u018c\66\0\1\u0238\56\0\1\u0239"+
    "\67\0\1\u023a\42\0\21\u01ab\1\u01ae\1\u01ab\1\u023b\44\u01ab"+
    "\26\0\1\u023c\41\0\21\u021b\1\u0229\14\u021b\1\u023d\31\u021b"+
    "\35\0\1\u023e\32\0\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d"+
    "\1\u021b\5\u021d\1\u022b\14\u021d\1\u023f\22\u021d\2\u021b\5\u021d"+
    "\36\0\1\u0240\63\0\1\u0236\31\0\1\u0236\30\0\1\u0241"+
    "\70\0\1\324\67\0\1\u0242\41\0\21\u01ab\1\u01ae\27\u01ab"+
    "\1\u0243\16\u01ab\42\0\1\226\13\0\1\226\11\0\21\u021b"+
    "\1\u0229\3\u021b\1\u0244\42\u021b\4\u021d\1\u021b\1\u021d\1\u021b"+
    "\4\u021d\1\u021b\5\u021d\1\u022b\3\u021d\1\u0245\33\u021d\2\u021b"+
    "\5\u021d\25\0\1\u0246\70\0\1\u0247\111\0\1\360\7\0"+
    "\1\360\7\0\21\u021b\1\u0229\24\u021b\1\u0248\6\u021b\1\u0249"+
    "\12\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b\5\u021d"+
    "\1\u022b\24\u021d\1\u024a\6\u021d\1\u024b\3\u021d\2\u021b\5\u021d"+
    "\26\0\1\u024c\103\0\1\265\13\0\1\265\11\0\21\u021b"+
    "\1\u0229\4\u021b\1\u024d\62\u021b\1\u0229\24\u021b\1\u0248\21\u021b"+
    "\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b\5\u021d\1\u022b"+
    "\4\u021d\1\u024e\32\u021d\2\u021b\11\u021d\1\u021b\1\u021d\1\u021b"+
    "\4\u021d\1\u021b\5\u021d\1\u022b\24\u021d\1\u024a\12\u021d\2\u021b"+
    "\5\u021d\50\0\1\u017b\7\0\1\u017b\7\0\21\u021b\1\u0229"+
    "\20\u021b\1\u024f\13\u021b\1\u024f\11\u021b\4\u021d\1\u021b\1\u021d"+
    "\1\u021b\4\u021d\1\u021b\5\u021d\1\u022b\20\u021d\1\u0250\13\u021d"+
    "\1\u0250\2\u021d\2\u021b\5\u021d\21\u021b\1\u0229\1\u021b\1\u0251"+
    "\44\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b\5\u021d"+
    "\1\u022b\1\u021d\1\u0252\35\u021d\2\u021b\5\u021d\21\u021b\1\u0229"+
    "\1\u0253\45\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b"+
    "\5\u021d\1\u022b\1\u0254\36\u021d\2\u021b\5\u021d\21\u021b\1\u0229"+
    "\22\u021b\1\u0255\23\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d"+
    "\1\u021b\5\u021d\1\u022b\22\u021d\1\u0256\14\u021d\2\u021b\5\u021d"+
    "\21\u021b\1\u0229\10\u021b\1\u0257\31\u021b\1\u0257\3\u021b\4\u021d"+
    "\1\u021b\1\u021d\1\u021b\4\u021d\1\u021b\5\u021d\1\u022b\10\u021d"+
    "\1\u0258\26\u021d\2\u021b\1\u021d\1\u0258\3\u021d\21\u021b\1\u0229"+
    "\13\u021b\1\u0259\32\u021b\4\u021d\1\u021b\1\u021d\1\u021b\4\u021d"+
    "\1\u021b\5\u021d\1\u022b\13\u021d\1\u0259\23\u021d\2\u021b\5\u021d"+
    "\70\u0259";

  private static int [] zzUnpacktrans() {
    int [] result = new int[31416];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\1\3\0\6\1\1\11\12\1\1\11\1\1"+
    "\3\11\1\1\1\11\2\1\1\11\2\1\1\11\2\1"+
    "\1\11\4\1\1\11\6\1\1\11\5\1\2\11\1\1"+
    "\36\0\1\11\3\0\2\1\1\11\3\0\1\11\1\1"+
    "\1\11\1\1\5\0\2\1\2\0\1\1\32\0\1\1"+
    "\33\0\1\1\2\0\1\11\17\0\2\1\50\0\2\1"+
    "\1\0\1\11\24\0\1\1\3\0\1\1\2\0\1\1"+
    "\35\0\1\11\1\1\41\0\1\1\10\0\1\1\2\0"+
    "\1\1\7\0\1\11\11\0\1\1\14\0\2\1\46\0"+
    "\1\1\12\0\1\1\4\0\1\11\1\0\1\1\5\0"+
    "\1\1\10\0\1\1\10\0\1\1\32\0\1\1\5\0"+
    "\1\1\6\0\1\1\27\0\1\1\20\0\1\1\15\0"+
    "\1\1\11\0\1\1\10\0\1\11\1\1\3\0\1\1"+
    "\1\0\1\1\4\0\2\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int parentheses;
    private ArrayDeque<Integer> stateStack = new ArrayDeque<Integer>();
    private ArrayDeque<Character> blockStack = new ArrayDeque<Character>();
    private boolean stringIsInterpolated;
    private String rubyBlockEndDelimiter;
    private String currentStatement = "";
    private Set<String> naryStatements = Set.of("pushif", "prependif", "each", "eachelse", "eachwithindex", "eachwithindexelse", "props");

    private char flipBracket(char bracket){
        switch (bracket) {
            case '{': return '}';
            case '[': return ']';
            case '(': return ')';
            case '<': return '>';
            default: return bracket;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RBladeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 31: break;
          case 2:
            { return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 32: break;
          case 3:
            { stateStack.addFirst(STATE_RUBY_BLOCK);
                                            blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                            stringIsInterpolated = yycharat(0) == '"' || yylength() == 2 || (yylength() == 3 && yytext().toString().substring(0, 2).equals("%Q"));
                                            yybegin(STATE_STRING_LITERAL);
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 33: break;
          case 4:
            { if (!blockStack.isEmpty() && yycharat(0) == '|' && blockStack.peekFirst() == '|') {
                                                blockStack.removeFirst();
                                            } else {
                                                blockStack.addFirst(flipBracket(yycharat(0)));
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 34: break;
          case 5:
            { if (blockStack.isEmpty() && rubyBlockEndDelimiter.equals(yytext().toString().replace("_", "").toLowerCase())) {
                                                yypushback(yylength());
                                                yybegin(stateStack.removeFirst());
                                            } else {
                                                if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
                                                    blockStack.removeFirst();
                                                }

                                                return RBladeTypes.RUBY_EXPRESSION;
                                            }
            }
          // fall through
          case 35: break;
          case 6:
            { if (blockStack.isEmpty() && (naryStatements.contains(currentStatement))) {
                                            return RBladeTypes.RBLADE_STATEMENT_COMMA;
                                          } else {
                                            return RBladeTypes.RUBY_EXPRESSION;
                                          }
            }
          // fall through
          case 36: break;
          case 7:
            { if (blockStack.isEmpty() && currentStatement.equals("props")) {
                                                return RBladeTypes.RBLADE_STATEMENT_PROPS_COLON;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 37: break;
          case 8:
            { if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
                                                blockStack.removeFirst();
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 38: break;
          case 9:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 39: break;
          case 10:
            { yybegin(YYINITIAL);
                                          currentStatement = "";
                                          return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 40: break;
          case 11:
            { if (yycharat(0) == blockStack.getFirst()) {
                                                blockStack.removeFirst();
                                                yybegin(stateStack.removeFirst());
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 41: break;
          case 12:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION);
                                          blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                          yybegin(STATE_STRING_LITERAL);

                                          return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 42: break;
          case 13:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 43: break;
          case 14:
            { yybegin(stateStack.removeFirst()); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 44: break;
          case 15:
            { yybegin(stateStack.removeFirst());

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 45: break;
          case 16:
            { yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 46: break;
          case 17:
            { stateStack.addFirst(STATE_RUBY_BLOCK);
                                            yypushback(1);
                                            yybegin(STATE_REGEX_LITERAL);

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 47: break;
          case 18:
            { if (stringIsInterpolated) {
                                              stateStack.addFirst(STATE_STRING_LITERAL);
                                              yybegin(STATE_STRING_LITERAL_INTERPOLATION);
                                            }
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 48: break;
          case 19:
            { yypushback(1);
                                            stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION);
                                            yybegin(STATE_REGEX_LITERAL);

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 49: break;
          case 20:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 13;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 12;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 50: break;
          case 21:
            { return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 51: break;
          case 22:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = ")";
                                            yybegin(STATE_RUBY_BLOCK);
                                            currentStatement = yytext().toString().replaceAll("[^a-zA-Z]", "").toLowerCase();

                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 52: break;
          case 23:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(RBLADE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 53: break;
          case 24:
            { if (blockStack.isEmpty() && currentStatement.startsWith("each")) {
                                                return RBladeTypes.RBLADE_STATEMENT_EACH_IN;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 54: break;
          case 25:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 14;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 15;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(ERB_STATEMENT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 55: break;
          case 26:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 11;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 12;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return RBladeTypes.COMMENT;
            }
          // fall through
          case 56: break;
          case 27:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(RBLADE_UNSAFE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 57: break;
          case 28:
            { yybegin(YYINITIAL); return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 58: break;
          case 29:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { yybegin(RBLADE_RUBY);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 59: break;
          case 30:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 9);
            { yybegin(STATE_VERBATIM);
  return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

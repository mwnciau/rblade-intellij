// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RBlade.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.mwnciau.rblade;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.mwnciau.rblade.psi.RBladeTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayDeque;

class RBladeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_RUBY_BLOCK = 2;
  public static final int STATE_RUBY_BLOCK_END = 4;
  public static final int STATE_STRING_LITERAL = 6;
  public static final int STATE_STRING_LITERAL_INTERPOLATION = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\247\u0200\10\u0600\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\0\1\4\1\7\1\10\2\0\1\11"+
    "\1\12\14\0\1\13\1\0\1\14\1\15\1\16\1\0"+
    "\1\17\1\20\1\21\1\20\1\22\1\23\3\20\1\24"+
    "\4\20\1\25\2\20\1\26\1\27\2\20\1\30\1\20"+
    "\1\26\1\20\1\31\1\20\1\0\1\32\2\0\1\33"+
    "\1\0\1\20\1\21\1\20\1\22\1\23\3\20\1\24"+
    "\4\20\1\25\2\20\1\26\1\34\1\26\1\20\1\30"+
    "\1\20\2\26\1\31\1\20\1\35\1\0\1\36\7\0"+
    "\1\2\32\0\1\37\217\0\2\40\u024e\0\1\37\177\0"+
    "\13\37\35\0\2\2\5\0\1\37\57\0\1\37\240\0"+
    "\1\37\377\0\u0100\41";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\4\1\3\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\2\2\3\10\1\11\2\10\3\12\1\2\1\13"+
    "\1\2\1\14\1\15\1\16\2\17\1\0\1\20\2\0"+
    "\1\2\1\3\3\0\1\21\1\2\1\13\1\0\1\16"+
    "\1\0\1\22\1\17\1\23\5\0\1\16\1\17\1\0"+
    "\1\24\2\0\1\25\1\26\13\0\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u0198\0\u0198"+
    "\0\u0198\0\u0198\0\u01dc\0\u01fe\0\u0198\0\u0220\0\u0242\0\u0198"+
    "\0\u0264\0\u0286\0\u0198\0\u02a8\0\u02ca\0\u02ec\0\u0198\0\u030e"+
    "\0\u0198\0\u0198\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u0154"+
    "\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0286\0\u0462\0\u0198\0\u0198"+
    "\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u0198\0\u050c\0\u0198\0\u052e"+
    "\0\u0550\0\u0572\0\u0594\0\u05b6\0\u0198\0\u05d8\0\u05fa\0\u0550"+
    "\0\u061c\0\u063e\0\u04a6\0\u0352\0\u0660\0\u0682\0\u06a4\0\u06c6"+
    "\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u05fa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\14\6\1\7\2\6\1\10\15\6\1\11\4\6\1\12"+
    "\2\13\1\14\1\15\1\12\1\16\1\17\1\20\1\21"+
    "\1\12\1\22\3\12\1\23\16\12\1\24\1\13\2\12"+
    "\3\25\1\26\2\25\1\27\1\25\1\30\6\25\1\31"+
    "\16\25\1\32\3\25\5\33\1\34\24\33\1\35\7\33"+
    "\4\36\1\37\1\36\1\40\26\36\1\41\1\42\3\36"+
    "\14\6\1\0\2\6\1\0\15\6\1\0\4\6\6\0"+
    "\1\43\53\0\7\44\1\45\2\44\1\0\1\44\1\45"+
    "\10\0\1\46\31\0\1\47\4\0\1\12\2\0\1\12"+
    "\1\0\1\12\4\0\1\12\1\0\3\12\1\0\16\12"+
    "\2\0\2\12\1\0\2\50\21\0\1\51\12\0\1\50"+
    "\1\51\1\0\1\12\2\0\1\52\1\0\1\12\4\0"+
    "\1\12\1\0\3\12\1\0\16\12\2\0\2\12\42\0"+
    "\2\15\1\0\13\15\1\20\5\15\1\53\1\15\1\53"+
    "\5\15\1\53\4\15\24\0\1\54\54\0\1\20\6\0"+
    "\1\55\54\0\1\30\46\0\1\56\54\0\1\30\40\0"+
    "\1\57\4\0\42\60\4\36\1\0\1\36\1\0\26\36"+
    "\2\0\3\36\2\37\1\0\21\37\1\61\1\37\1\61"+
    "\5\37\1\61\4\37\6\0\1\62\7\0\1\63\25\0"+
    "\1\64\5\0\1\65\10\0\12\44\1\0\2\44\6\0"+
    "\1\64\5\0\1\65\10\0\10\44\1\66\1\44\1\0"+
    "\2\44\10\0\1\67\50\0\1\70\54\0\1\71\14\0"+
    "\1\12\2\0\1\12\1\0\1\12\4\0\1\12\1\0"+
    "\3\12\1\0\16\12\1\20\1\0\2\12\2\15\1\0"+
    "\36\15\26\0\1\72\41\0\1\73\14\0\2\37\1\0"+
    "\36\37\1\0\6\62\1\74\33\62\15\0\1\75\25\0"+
    "\1\64\5\0\1\65\33\0\1\64\5\0\1\65\10\0"+
    "\1\44\1\76\10\44\1\0\2\44\17\0\1\77\30\0"+
    "\2\100\34\0\1\100\24\0\1\101\41\0\1\102\17\0"+
    "\6\62\1\74\7\62\1\103\23\62\1\0\1\64\5\0"+
    "\1\65\10\0\11\44\1\104\1\0\2\44\5\0\12\77"+
    "\1\105\27\77\27\0\1\106\3\0\1\107\1\106\34\0"+
    "\1\110\3\0\1\111\1\110\5\0\12\77\1\112\27\77"+
    "\30\0\1\113\40\0\1\106\4\0\1\106\35\0\1\114"+
    "\40\0\1\110\4\0\1\110\5\0\12\77\1\112\23\77"+
    "\1\115\3\77\21\0\1\116\41\0\1\117\20\0\12\77"+
    "\1\105\23\77\1\120\3\77\31\0\1\20\41\0\1\30"+
    "\10\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2006];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\7\1\1\11\1\1\4\11\2\1\1\11\2\1"+
    "\1\11\2\1\1\11\3\1\1\11\1\1\2\11\3\1"+
    "\1\0\1\1\2\0\2\1\3\0\2\11\1\1\1\0"+
    "\1\1\1\0\1\11\1\1\1\11\5\0\1\11\1\1"+
    "\1\0\1\1\2\0\2\1\13\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int parentheses;
    private ArrayDeque<Integer> stateStack = new ArrayDeque<Integer>();
    private ArrayDeque<Character> stringDelimiterStack = new ArrayDeque<Character>();
    private boolean stringIsInterpolated;
    private String rubyBlockEndDelimiter;
    private String currentStatement = "";

    private char flipBracket(char bracket){
        switch (bracket) {
            case '{': return '}';
            case '[': return ']';
            case '(': return ')';
            case '<': return '>';
            default: return bracket;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RBladeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 23: break;
          case 2:
            { return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 24: break;
          case 3:
            { stateStack.addFirst(STATE_RUBY_BLOCK);
                                            stringDelimiterStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                            stringIsInterpolated = yycharat(0) == '"' || (yylength() == 3 && yytext().toString().substring(0, 2).equals("%Q"));
                                            yybegin(STATE_STRING_LITERAL);
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 25: break;
          case 4:
            { stateStack.addFirst(STATE_RUBY_BLOCK); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 26: break;
          case 5:
            { if (
                                              stateStack.getFirst() == STATE_RUBY_BLOCK_END
                                              && rubyBlockEndDelimiter.equals(yytext().toString().replace("_", "").toLowerCase())
                                            ) {
                                                yypushback(yylength());
                                                yybegin(stateStack.removeFirst());
                                            } else {
                                              if (yycharat(0) == ')') {
                                                  yybegin(stateStack.removeFirst());
                                              }

                                              return RBladeTypes.RUBY_EXPRESSION;
                                            }
            }
          // fall through
          case 27: break;
          case 6:
            { return stateStack.getFirst() == STATE_RUBY_BLOCK_END ? RBladeTypes.RBLADE_STATEMENT_COMMA : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 28: break;
          case 7:
            { if (currentStatement.equals("props") && stateStack.getFirst() == STATE_RUBY_BLOCK_END) {
                                                return RBladeTypes.RBLADE_STATEMENT_PROPS_COLON;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 29: break;
          case 8:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 30: break;
          case 9:
            { yybegin(YYINITIAL);
                                          currentStatement = "";
                                          return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 31: break;
          case 10:
            { if (yycharat(0) == stringDelimiterStack.getFirst()) {
                                                stringDelimiterStack.removeFirst();
                                                yybegin(stateStack.removeFirst());
                                            }
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 32: break;
          case 11:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION);
                                          stringDelimiterStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                          yybegin(STATE_STRING_LITERAL);
                                          return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 33: break;
          case 12:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 34: break;
          case 13:
            { yybegin(stateStack.removeFirst()); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 35: break;
          case 14:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "%>";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 36: break;
          case 15:
            { return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 37: break;
          case 16:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "}}";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 38: break;
          case 17:
            { if (stringIsInterpolated) {
                                              stateStack.addFirst(STATE_STRING_LITERAL);
                                              yybegin(STATE_STRING_LITERAL_INTERPOLATION);
                                            }
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 39: break;
          case 18:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = ")";
                                            yybegin(STATE_RUBY_BLOCK);
                                            currentStatement = yytext().toString().substring(1, yylength()-1).replace("_", "").toLowerCase();

                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 40: break;
          case 19:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "!!}";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 41: break;
          case 20:
            { if (currentStatement.startsWith("each") && stateStack.getFirst() == STATE_RUBY_BLOCK_END) {
                                                return RBladeTypes.RBLADE_STATEMENT_EACH_IN;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 42: break;
          case 21:
            { return RBladeTypes.COMMENT;
            }
          // fall through
          case 43: break;
          case 22:
            { stateStack.addFirst(STATE_RUBY_BLOCK_END);
                                            rubyBlockEndDelimiter = "@endruby";
                                            yybegin(STATE_RUBY_BLOCK);
                                            return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

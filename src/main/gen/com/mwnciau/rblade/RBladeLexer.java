// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RBlade.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.mwnciau.rblade;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.mwnciau.rblade.psi.RBladeTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayDeque;
import java.util.Set;

public class RBladeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_VERBATIM = 2;
  public static final int RBLADE_RUBY = 4;
  public static final int RBLADE_PRINT = 6;
  public static final int RBLADE_UNSAFE_PRINT = 8;
  public static final int ERB_STATEMENT = 10;
  public static final int STATE_RUBY_BLOCK = 12;
  public static final int STATE_STRING_LITERAL = 14;
  public static final int STATE_STRING_INTERPOLATED_LITERAL = 16;
  public static final int STATE_STRING_INTERPOLATION = 18;
  public static final int MATCHED_PARENTHESES = 20;
  public static final int MATCHED_BRACKETS = 22;
  public static final int MATCHED_BRACES = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\0\1\7\1\10\1\11\2\0\1\12"+
    "\1\13\2\0\12\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\31\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\31\1\53\1\54\1\55\1\0"+
    "\1\56\1\0\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\57\1\31\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\60\1\61\1\62\1\45\1\46\1\47"+
    "\1\63\1\64\1\52\1\31\1\65\1\0\1\66\2\0"+
    "\5\67\1\70\32\67\1\70\217\67\2\71\115\67\1\72"+
    "\u0200\67\1\70\177\67\13\70\35\67\2\70\5\67\1\70"+
    "\57\67\1\70\312\67\1\73\325\67\1\70\377\67";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\1\1\3\2\1\3\1\4\12\5\1\6\1\5"+
    "\1\7\1\10\1\11\1\12\1\13\2\5\1\14\1\15"+
    "\1\16\1\5\5\16\2\5\1\17\1\20\1\5\1\21"+
    "\4\5\1\22\1\5\1\23\34\0\1\24\5\0\1\25"+
    "\2\5\7\0\1\26\32\0\1\27\31\0\2\5\72\0"+
    "\2\27\1\0\1\1\1\30\24\0\1\31\3\0\1\32"+
    "\2\5\33\0\1\33\1\34\41\0\1\27\1\0\2\1"+
    "\5\0\1\27\12\0\1\31\5\0\2\5\61\0\2\1"+
    "\1\27\4\0\3\1\10\0\1\35\1\0\1\31\3\0"+
    "\2\5\53\0\1\30\3\0\1\31\3\0\2\5\34\0"+
    "\1\34\1\0\1\36\2\34\56\0\1\37\5\0\1\40"+
    "\5\0\1\41\12\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"+
    "\0\u0780\0\u0564\0\u07bc\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564"+
    "\0\u07f8\0\u0834\0\u0564\0\u0618\0\u0564\0\u0870\0\u05a0\0\u0654"+
    "\0\u0834\0\u0618\0\u08ac\0\u08e8\0\u0924\0\u0618\0\u0564\0\u0960"+
    "\0\u0564\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0564\0\u0a8c\0\u0618"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u0564\0\u0690\0\u0780\0\u1158"+
    "\0\u1194\0\u11d0\0\u0564\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc"+
    "\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c"+
    "\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c"+
    "\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\u0564\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760"+
    "\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940"+
    "\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20"+
    "\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00"+
    "\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0"+
    "\0\u0564\0\u0564\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228"+
    "\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408"+
    "\0\u3444\0\u3480\0\u2058\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac"+
    "\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c"+
    "\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c"+
    "\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c"+
    "\0\u0564\0\u0564\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4"+
    "\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94"+
    "\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074"+
    "\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254"+
    "\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434"+
    "\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614"+
    "\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u0564"+
    "\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998"+
    "\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78"+
    "\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58"+
    "\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38"+
    "\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118"+
    "\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc\0\u52f8"+
    "\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c\0\u54d8"+
    "\0\u5514\0\u5550\0\u558c\0\u43bc\0\u55c8\0\u5604\0\u5640\0\u0d5c"+
    "\0\u567c\0\u56b8\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820"+
    "\0\u585c\0\u5898\0\u0564\0\u58d4\0\u5910\0\u594c\0\u5988\0\u59c4"+
    "\0\u5a00\0\u5a3c\0\u5a78\0\u5ab4\0\u5af0\0\u5b2c\0\u5b68\0\u5ba4"+
    "\0\u5be0\0\u5c1c\0\u5c58\0\u5c94\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84"+
    "\0\u5dc0\0\u5dfc\0\u5e38\0\u5e74\0\u5eb0\0\u5eec\0\u5f28\0\u5f64"+
    "\0\u5fa0\0\u5fdc\0\u6018\0\u6054\0\u6090\0\u60cc\0\u6108\0\u6144"+
    "\0\u6180\0\u61bc\0\u61f8\0\u6234\0\u6270\0\u5514\0\u62ac\0\u62e8"+
    "\0\u6324\0\u567c\0\u6360\0\u639c\0\u63d8\0\u639c\0\u6414\0\u6450"+
    "\0\u648c\0\u3480\0\u64c8\0\u6504\0\u6540\0\u657c\0\u65b8\0\u65f4"+
    "\0\u6630\0\u666c\0\u66a8\0\u66e4\0\u4d1c\0\u6720\0\u675c\0\u6798"+
    "\0\u67d4\0\u6810\0\u684c\0\u6888\0\u68c4\0\u6900\0\u693c\0\u6978"+
    "\0\u69b4\0\u69f0\0\u6a2c\0\u6a68\0\u6aa4\0\u6ae0\0\u6b1c\0\u6b58"+
    "\0\u6b94\0\u6bd0\0\u6c0c\0\u33cc\0\u6c48\0\u0564\0\u0960\0\u0a14"+
    "\0\u6c84\0\u6cc0\0\u6cfc\0\u6d38\0\u6d74\0\u6db0\0\u6dec\0\u6e28"+
    "\0\u6e64\0\u6ea0\0\u6edc\0\u6f18\0\u6f54\0\u6f90\0\u6fcc\0\u7008"+
    "\0\u7044\0\u7080\0\u70bc\0\u70f8\0\u7134\0\u7170\0\u71ac\0\u71e8"+
    "\0\u7224\0\u7260\0\u729c\0\u72d8\0\u7314\0\u7350\0\u738c\0\u73c8"+
    "\0\u7404\0\u7440\0\u747c\0\u74b8\0\u74f4\0\u7530\0\u756c\0\u75a8"+
    "\0\u75e4\0\u7620\0\u765c\0\u7698\0\u76d4\0\u7710\0\u774c\0\u7788"+
    "\0\u77c4\0\u7800\0\u783c\0\u7878\0\u0564\0\u78b4\0\u78f0\0\u792c"+
    "\0\u7968\0\u79a4\0\u0564\0\u79e0\0\u7a1c\0\u7a58\0\u7a94\0\u7ad0"+
    "\0\u7b0c\0\u7b48\0\u7b84\0\u7bc0\0\u7bfc\0\u0564";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\16\22\1\23\3\22\1\24\42\22\1\25\6\22\22\26"+
    "\1\27\51\26\16\30\1\31\3\30\1\32\42\30\1\33"+
    "\24\30\1\31\3\30\1\34\42\30\1\33\1\35\10\30"+
    "\1\36\12\30\1\31\3\30\1\34\42\30\1\33\14\30"+
    "\1\37\7\30\1\31\3\30\1\34\42\30\1\33\6\30"+
    "\1\40\2\41\1\40\1\42\1\40\1\43\1\44\1\45"+
    "\1\46\1\47\2\40\1\50\1\51\2\40\1\52\1\34"+
    "\30\40\1\53\11\40\1\54\2\40\1\41\3\40\14\55"+
    "\1\56\1\55\1\57\3\55\1\60\30\56\1\55\1\61"+
    "\2\55\6\56\1\62\1\55\5\56\5\55\1\63\6\55"+
    "\1\56\1\55\1\57\3\55\1\60\30\56\1\55\1\61"+
    "\2\55\6\56\1\62\1\55\5\56\4\64\1\42\1\64"+
    "\1\43\1\44\6\64\1\65\2\64\1\52\1\34\42\64"+
    "\1\66\1\67\5\64\4\70\1\42\1\70\1\43\1\44"+
    "\1\71\1\67\4\70\1\72\2\70\1\52\1\34\42\70"+
    "\1\73\6\70\4\74\1\42\1\74\1\43\1\44\6\74"+
    "\1\75\2\74\1\52\1\34\30\74\1\76\1\74\1\67"+
    "\7\74\1\77\6\74\4\64\1\42\1\64\1\43\1\44"+
    "\6\64\1\65\2\64\1\52\1\34\42\64\1\100\1\67"+
    "\5\64\16\0\1\101\3\0\1\102\51\0\74\17\16\0"+
    "\1\103\75\0\1\104\53\0\16\22\1\0\3\22\1\0"+
    "\42\22\1\0\6\22\6\0\1\105\107\0\1\106\1\0"+
    "\1\107\1\110\1\111\1\112\1\113\2\0\1\114\2\0"+
    "\1\115\1\116\1\117\1\120\1\0\1\121\1\122\1\0"+
    "\1\123\1\124\1\125\6\0\1\114\1\0\1\121\1\122"+
    "\1\125\1\0\1\126\3\0\1\114\1\122\4\0\1\127"+
    "\61\0\1\130\6\0\22\26\1\0\51\26\27\0\1\131"+
    "\146\0\1\132\114\0\1\133\17\0\1\124\111\0\1\134"+
    "\55\0\1\124\112\0\1\135\10\0\1\136\110\0\1\135"+
    "\53\0\1\40\2\0\1\40\1\0\1\40\5\0\2\40"+
    "\1\0\3\40\2\0\30\40\1\0\11\40\1\0\2\40"+
    "\1\0\3\40\1\0\2\137\30\0\1\140\23\0\1\140"+
    "\10\0\1\137\1\140\2\0\14\42\1\0\6\42\10\0"+
    "\1\141\6\0\1\141\5\0\1\141\2\0\4\42\2\142"+
    "\1\141\2\142\1\141\2\42\5\0\1\40\2\0\1\40"+
    "\1\0\1\40\1\132\4\0\2\40\1\0\3\40\2\0"+
    "\30\40\1\0\11\40\1\0\2\40\1\0\3\40\74\30"+
    "\14\0\1\56\6\0\30\56\4\0\6\56\2\0\5\56"+
    "\65\0\1\143\6\0\4\64\1\0\1\64\2\0\11\64"+
    "\2\0\42\64\2\0\11\64\1\0\1\64\1\132\1\0"+
    "\11\64\2\0\42\64\2\0\5\64\4\70\1\0\1\70"+
    "\4\0\7\70\2\0\55\70\1\0\1\70\1\132\3\0"+
    "\7\70\2\0\55\70\1\0\1\70\4\0\7\70\2\0"+
    "\42\70\1\144\6\70\4\74\1\0\1\74\2\0\11\74"+
    "\2\0\30\74\1\0\1\74\1\0\22\74\1\0\1\74"+
    "\1\132\1\0\11\74\2\0\30\74\1\0\1\74\1\0"+
    "\22\74\1\0\1\74\2\0\11\74\2\0\30\74\1\0"+
    "\1\74\1\0\7\74\1\145\6\74\6\0\1\146\107\0"+
    "\1\147\42\0\1\150\14\0\1\151\73\0\1\152\65\0"+
    "\5\153\1\154\1\155\65\153\24\0\1\156\1\157\1\160"+
    "\1\161\1\162\2\0\1\163\2\0\1\164\1\165\1\166"+
    "\1\167\1\0\1\170\1\171\1\0\1\172\1\0\1\173"+
    "\6\0\1\163\1\0\1\170\1\171\1\173\5\0\1\163"+
    "\1\171\36\0\1\174\5\0\1\175\15\0\1\175\35\0"+
    "\1\176\6\0\1\177\2\0\1\200\65\0\1\201\3\0"+
    "\1\202\23\0\1\202\11\0\1\202\25\0\1\203\11\0"+
    "\1\204\1\205\1\206\74\0\1\207\63\0\1\210\72\0"+
    "\1\211\73\0\1\212\3\0\1\213\23\0\1\213\11\0"+
    "\1\213\37\0\1\214\1\0\1\215\57\0\1\216\17\0"+
    "\1\217\2\0\1\220\12\0\1\217\41\0\1\221\16\0"+
    "\1\222\54\0\1\223\2\0\1\224\12\0\1\225\65\0"+
    "\1\226\63\0\1\227\76\0\1\230\44\0\1\231\61\0"+
    "\1\155\11\0\1\232\70\0\13\233\1\234\52\233\1\235"+
    "\5\233\37\0\1\236\41\0\1\154\125\0\1\237\47\0"+
    "\1\240\117\0\1\241\34\0\14\42\1\0\6\42\30\0"+
    "\4\42\6\0\2\42\5\0\14\44\1\0\6\44\30\0"+
    "\4\44\6\0\2\44\5\0\4\70\1\0\1\70\4\0"+
    "\1\70\1\242\5\70\2\0\51\70\4\74\1\0\1\74"+
    "\2\0\3\74\1\243\5\74\2\0\30\74\1\0\1\74"+
    "\1\0\16\74\6\0\1\244\111\0\1\245\1\246\1\247"+
    "\1\250\1\251\2\0\1\252\2\0\1\253\1\254\1\255"+
    "\1\256\1\0\1\257\1\260\1\0\1\261\1\0\1\262"+
    "\6\0\1\252\1\0\1\257\1\260\1\262\5\0\1\252"+
    "\1\260\4\0\1\263\61\0\1\244\25\0\1\264\54\0"+
    "\20\152\1\265\53\152\6\153\1\266\65\153\6\154\1\267"+
    "\65\154\74\155\35\0\1\270\5\0\1\271\15\0\1\271"+
    "\35\0\1\272\6\0\1\273\2\0\1\274\65\0\1\275"+
    "\3\0\1\276\23\0\1\276\11\0\1\276\25\0\1\277"+
    "\11\0\1\300\1\301\1\302\74\0\1\303\63\0\1\155"+
    "\72\0\1\304\73\0\1\305\3\0\1\306\23\0\1\306"+
    "\11\0\1\306\37\0\1\307\1\0\1\310\57\0\1\311"+
    "\17\0\1\312\2\0\1\313\12\0\1\312\41\0\1\314"+
    "\16\0\1\315\54\0\1\316\2\0\1\317\12\0\1\320"+
    "\65\0\1\321\66\0\1\322\64\0\1\323\77\0\1\324"+
    "\110\0\1\325\15\0\1\325\7\0\1\325\30\0\1\326"+
    "\67\0\1\327\100\0\1\330\4\0\1\331\102\0\1\332"+
    "\15\0\1\332\7\0\1\332\26\0\1\333\112\0\1\334"+
    "\15\0\1\334\7\0\1\334\42\0\1\335\60\0\1\336"+
    "\20\0\1\210\67\0\1\337\15\0\1\337\13\0\1\340"+
    "\1\0\1\341\4\0\1\342\3\0\1\341\4\0\1\341"+
    "\1\0\30\341\3\0\7\341\54\0\1\343\77\0\1\344"+
    "\12\0\1\344\44\0\1\345\64\0\1\210\72\0\1\325"+
    "\113\0\1\346\55\0\1\347\10\0\1\350\77\0\1\351"+
    "\1\210\14\0\1\351\7\0\1\351\24\0\1\352\16\0"+
    "\1\353\15\0\1\353\37\0\1\354\104\0\1\355\76\0"+
    "\1\356\56\0\1\357\26\0\1\360\56\0\1\361\7\0"+
    "\1\362\71\0\1\363\15\0\1\363\41\0\1\364\3\0"+
    "\1\360\23\0\1\360\11\0\1\360\5\0\1\155\70\0"+
    "\3\232\1\365\70\232\66\233\1\235\20\233\1\366\52\233"+
    "\1\235\73\233\1\367\5\233\26\0\1\370\73\0\1\371"+
    "\60\0\1\372\61\0\2\373\65\0\1\373\3\0\4\70"+
    "\1\0\1\70\4\0\1\70\1\374\5\70\2\0\51\70"+
    "\4\74\1\0\1\74\2\0\3\74\1\375\5\74\2\0"+
    "\30\74\1\0\1\74\1\0\16\74\35\0\1\376\5\0"+
    "\1\377\15\0\1\377\35\0\1\u0100\6\0\1\u0101\2\0"+
    "\1\u0102\65\0\1\u0103\3\0\1\u0104\23\0\1\u0104\11\0"+
    "\1\u0104\25\0\1\u0105\11\0\1\u0106\1\u0107\1\u0108\74\0"+
    "\1\u0109\63\0\1\244\72\0\1\u010a\73\0\1\u010b\3\0"+
    "\1\u010c\23\0\1\u010c\11\0\1\u010c\37\0\1\u010d\1\0"+
    "\1\u010e\57\0\1\u010f\17\0\1\u0110\2\0\1\u0111\12\0"+
    "\1\u0110\41\0\1\u0112\16\0\1\u0113\54\0\1\u0114\2\0"+
    "\1\u0115\12\0\1\u0116\65\0\1\u0117\66\0\1\u0118\44\0"+
    "\1\244\107\0\1\244\54\0\6\152\1\0\11\152\1\265"+
    "\53\152\6\153\1\266\11\153\1\u0119\53\153\6\154\1\267"+
    "\11\154\1\u011a\53\154\23\0\1\u011b\77\0\1\u011c\110\0"+
    "\1\u011d\15\0\1\u011d\7\0\1\u011d\30\0\1\u011e\67\0"+
    "\1\u011f\100\0\1\u0120\4\0\1\u0121\102\0\1\u0122\15\0"+
    "\1\u0122\7\0\1\u0122\26\0\1\u0123\112\0\1\u0124\15\0"+
    "\1\u0124\7\0\1\u0124\42\0\1\u0125\60\0\1\155\20\0"+
    "\1\155\67\0\1\155\15\0\1\155\57\0\1\u0126\77\0"+
    "\1\u0127\12\0\1\u0127\44\0\1\u0128\64\0\1\155\72\0"+
    "\1\u011d\113\0\1\277\55\0\1\u0129\10\0\1\u012a\77\0"+
    "\1\u0123\1\155\14\0\1\u0123\7\0\1\u0123\24\0\1\u012b"+
    "\16\0\1\u012c\15\0\1\u012c\37\0\1\u012d\104\0\1\u012e"+
    "\76\0\1\u012f\56\0\1\u0130\26\0\1\u0131\56\0\1\u0132"+
    "\7\0\1\u0133\55\0\1\u0134\3\0\1\u0131\23\0\1\u0131"+
    "\11\0\1\u0131\41\0\1\u0135\57\0\1\u0136\77\0\1\210"+
    "\71\0\1\u0137\112\0\1\u0138\15\0\1\u0138\7\0\1\u0138"+
    "\34\0\1\u0139\23\0\1\u0139\11\0\1\u0139\31\0\1\u013a"+
    "\67\0\1\u013b\102\0\1\u013c\70\0\1\210\3\0\1\114"+
    "\23\0\1\114\11\0\1\114\47\0\1\u013d\27\0\1\340"+
    "\1\0\1\210\4\0\1\342\3\0\1\341\4\0\1\210"+
    "\1\0\30\336\3\0\7\336\10\0\1\340\1\0\1\341"+
    "\4\0\1\342\3\0\1\341\4\0\1\341\1\0\4\341"+
    "\1\u013e\23\341\3\0\1\u013f\6\341\10\0\1\340\6\0"+
    "\1\342\115\0\1\u0140\106\0\1\210\47\0\1\210\77\0"+
    "\1\u0141\107\0\1\u0142\2\0\1\u0143\15\0\1\u0143\7\0"+
    "\1\u0143\27\0\1\u0144\12\0\1\u0138\64\0\1\u0145\67\0"+
    "\1\u0146\113\0\1\u0147\77\0\1\u0148\50\0\1\u0149\112\0"+
    "\1\u014a\52\0\1\u0136\103\0\1\325\65\0\1\327\77\0"+
    "\1\u014b\23\0\1\u014b\11\0\1\u014b\26\0\1\u014c\106\0"+
    "\1\210\34\0\3\232\1\u014d\70\232\13\366\1\u014e\52\366"+
    "\1\u014f\5\366\66\0\1\u0150\54\0\1\u0151\6\0\1\u0152"+
    "\60\0\1\u0153\12\0\1\u0154\2\0\1\u0153\12\0\13\372"+
    "\1\u0155\60\372\4\374\1\372\1\374\4\372\1\374\1\u0156"+
    "\5\374\2\372\51\374\4\375\1\372\1\375\2\372\3\375"+
    "\1\u0157\5\375\2\372\30\375\1\372\1\375\1\372\16\375"+
    "\23\0\1\u0158\77\0\1\u0159\110\0\1\u015a\15\0\1\u015a"+
    "\7\0\1\u015a\30\0\1\u015b\67\0\1\u015c\100\0\1\u015d"+
    "\4\0\1\u015e\102\0\1\u015f\15\0\1\u015f\7\0\1\u015f"+
    "\26\0\1\u0160\112\0\1\u0161\15\0\1\u0161\7\0\1\u0161"+
    "\42\0\1\u0162\60\0\1\u0163\20\0\1\244\67\0\1\u0164"+
    "\15\0\1\u0164\57\0\1\u0165\77\0\1\u0166\12\0\1\u0166"+
    "\44\0\1\u0167\64\0\1\244\72\0\1\u015a\113\0\1\u0168"+
    "\55\0\1\u0169\10\0\1\u016a\77\0\1\u016b\1\244\14\0"+
    "\1\u016b\7\0\1\u016b\24\0\1\u016c\16\0\1\u016d\15\0"+
    "\1\u016d\37\0\1\u016e\104\0\1\u016f\76\0\1\u0170\56\0"+
    "\1\u0171\26\0\1\u0172\56\0\1\u0173\7\0\1\u0174\55\0"+
    "\1\u0175\3\0\1\u0172\23\0\1\u0172\11\0\1\u0172\41\0"+
    "\1\u0176\57\0\1\u0177\77\0\1\155\71\0\1\u0178\112\0"+
    "\1\u0179\15\0\1\u0179\7\0\1\u0179\34\0\1\u017a\23\0"+
    "\1\u017a\11\0\1\u017a\31\0\1\u017b\67\0\1\u017c\102\0"+
    "\1\155\70\0\1\155\3\0\1\163\23\0\1\163\11\0"+
    "\1\163\47\0\1\u012d\60\0\1\u017d\106\0\1\155\47\0"+
    "\1\155\113\0\1\u017e\2\0\1\u017f\15\0\1\u017f\7\0"+
    "\1\u017f\27\0\1\u0180\12\0\1\u0179\60\0\1\u0181\113\0"+
    "\1\u0182\77\0\1\155\50\0\1\u0183\112\0\1\u0184\52\0"+
    "\1\u0177\103\0\1\u011d\65\0\1\u011f\77\0\1\u0185\23\0"+
    "\1\u0185\11\0\1\u0185\41\0\1\155\70\0\1\345\36\0"+
    "\1\345\34\0\1\210\36\0\1\210\34\0\1\u0186\36\0"+
    "\1\u0186\44\0\1\210\15\0\1\210\7\0\1\210\40\0"+
    "\1\u0187\101\0\1\325\52\0\1\u0188\50\0\1\340\1\0"+
    "\1\341\4\0\1\342\3\0\1\341\4\0\1\341\1\0"+
    "\4\341\1\u013e\20\341\1\u0189\2\341\3\0\1\u018a\4\341"+
    "\1\u0189\1\341\61\0\1\u018b\56\0\1\176\65\0\1\u018c"+
    "\104\0\1\214\65\0\1\210\70\0\1\u018d\73\0\1\u018e"+
    "\112\0\1\u018f\26\0\1\340\1\0\1\341\4\0\1\342"+
    "\3\0\1\341\4\0\1\341\1\0\10\341\1\u0190\4\341"+
    "\1\u0191\12\341\3\0\1\u0192\1\u0190\5\341\4\0\1\114"+
    "\42\0\1\u0193\15\0\1\u0194\50\0\1\u0195\23\0\1\u0195"+
    "\11\0\1\u0195\3\0\1\u0196\1\u0197\5\0\1\342\57\0"+
    "\1\u0197\30\0\1\u0198\103\0\1\u0199\73\0\1\210\61\0"+
    "\1\u019a\50\0\3\232\1\u014d\62\232\1\u019b\5\232\13\366"+
    "\1\u019c\52\366\1\u014f\20\366\1\u014e\52\366\1\u019d\5\366"+
    "\27\0\1\u019e\113\0\1\u0151\72\0\1\u019f\70\0\1\u0153"+
    "\15\0\1\u0153\12\0\13\372\1\u01a0\60\372\4\374\1\372"+
    "\1\374\4\372\1\374\1\u01a1\5\374\2\372\51\374\4\375"+
    "\1\372\1\375\2\372\3\375\1\u01a2\5\375\2\372\30\375"+
    "\1\372\1\375\1\372\16\375\37\0\1\u01a3\57\0\1\u01a4"+
    "\77\0\1\244\71\0\1\u01a5\112\0\1\u01a6\15\0\1\u01a6"+
    "\7\0\1\u01a6\34\0\1\u01a7\23\0\1\u01a7\11\0\1\u01a7"+
    "\31\0\1\u01a8\67\0\1\u01a9\102\0\1\u01aa\70\0\1\244"+
    "\3\0\1\252\23\0\1\252\11\0\1\252\47\0\1\u01ab"+
    "\31\0\1\244\15\0\1\244\1\0\30\u0163\3\0\7\u0163"+
    "\36\0\1\u01ac\26\0\1\u01ad\47\0\1\u01ae\106\0\1\244"+
    "\47\0\1\244\77\0\1\u01af\107\0\1\u01b0\2\0\1\u01b1"+
    "\15\0\1\u01b1\7\0\1\u01b1\27\0\1\u01b2\12\0\1\u01a6"+
    "\64\0\1\u01b3\67\0\1\u01b4\113\0\1\u01b5\77\0\1\244"+
    "\50\0\1\u01b6\112\0\1\u01b7\52\0\1\u01a4\103\0\1\u015a"+
    "\65\0\1\u015c\77\0\1\u01b8\23\0\1\u01b8\11\0\1\u01b8"+
    "\41\0\1\244\70\0\1\u0128\36\0\1\u0128\34\0\1\155"+
    "\36\0\1\155\34\0\1\u01b9\36\0\1\u01b9\44\0\1\155"+
    "\15\0\1\155\7\0\1\155\40\0\1\u01ba\101\0\1\u011d"+
    "\52\0\1\u01bb\107\0\1\307\62\0\1\u01bc\73\0\1\u01bd"+
    "\112\0\1\u01be\65\0\1\u01bf\15\0\1\u01c0\50\0\1\u01c1"+
    "\23\0\1\u01c1\11\0\1\u01c1\27\0\1\u01c2\103\0\1\u01c3"+
    "\73\0\1\155\65\0\1\214\73\0\1\u01c4\101\0\1\u0186"+
    "\71\0\1\u01c5\23\0\1\u01c5\11\0\1\u01c5\31\0\1\u018c"+
    "\20\0\1\u01c6\12\0\1\u01c6\11\0\1\340\1\0\1\341"+
    "\4\0\1\342\3\0\1\341\4\0\1\210\1\0\30\341"+
    "\3\0\7\341\46\0\1\u01c7\73\0\1\u01c8\61\0\1\u01c9"+
    "\105\0\1\215\67\0\1\114\4\0\1\u01ca\16\0\1\114"+
    "\11\0\1\114\41\0\1\u01cb\74\0\1\u0193\76\0\1\u0186"+
    "\15\0\1\u0186\12\0\1\u01cc\1\u01cd\6\u01cc\1\u01ce\3\u01cc"+
    "\1\u0197\6\u01cc\30\u0197\3\u01cc\7\u0197\23\u01cc\1\u0197\6\u01cc"+
    "\30\u0197\3\u01cc\7\u0197\7\u01cc\45\0\1\u0186\54\0\1\u01cf"+
    "\112\0\1\u01d0\26\0\13\366\1\u019c\52\366\1\u01d1\5\366"+
    "\13\372\1\u0155\52\372\1\u01d2\5\372\43\0\1\u01d3\15\0"+
    "\1\u01d3\36\0\1\u01d4\47\0\13\372\1\u01a0\52\372\1\u01d5"+
    "\5\372\4\374\1\372\1\374\4\372\1\374\1\u01a1\5\374"+
    "\2\372\43\374\1\u01d6\5\374\4\375\1\372\1\375\2\372"+
    "\3\375\1\u01a2\5\375\2\372\30\375\1\372\1\375\1\372"+
    "\10\375\1\u01d7\5\375\34\0\1\u0167\36\0\1\u0167\34\0"+
    "\1\244\36\0\1\244\34\0\1\u01d8\36\0\1\u01d8\44\0"+
    "\1\244\15\0\1\244\7\0\1\244\40\0\1\u01d9\101\0"+
    "\1\u015a\52\0\1\u01da\76\0\1\u01ac\20\0\1\u01db\5\0"+
    "\1\u01dc\4\0\1\u01db\62\0\1\u01dd\56\0\1\u0100\65\0"+
    "\1\u01ac\104\0\1\u010d\65\0\1\244\70\0\1\u01de\73\0"+
    "\1\u01df\112\0\1\u01e0\60\0\1\252\4\0\1\u01e1\15\0"+
    "\1\u01e2\1\252\11\0\1\252\42\0\1\u01e3\15\0\1\u01e4"+
    "\50\0\1\u01e5\23\0\1\u01e5\11\0\1\u01e5\27\0\1\u01e6"+
    "\103\0\1\u01e7\73\0\1\244\65\0\1\307\73\0\1\u01e8"+
    "\101\0\1\u01b9\75\0\1\307\73\0\1\u01e9\61\0\1\u01ea"+
    "\105\0\1\u01eb\74\0\1\u01bf\76\0\1\u01b9\15\0\1\u01b9"+
    "\57\0\1\u01b9\54\0\1\u01ec\73\0\1\345\112\0\1\u01ed"+
    "\54\0\1\u0145\112\0\1\345\73\0\1\u01ee\63\0\1\u01ef"+
    "\36\0\14\u01cc\1\u0197\5\u01cc\1\u01f0\30\u0197\3\u01cc\7\u0197"+
    "\10\u01cc\1\u01cd\6\u01cc\1\u01ce\3\u01cc\1\u0197\5\u01cc\1\u01f0"+
    "\30\u0197\3\u01cc\7\u0197\7\u01cc\43\0\1\u01f1\12\0\1\u01f2"+
    "\2\0\1\u01f1\45\0\1\u01f3\23\0\1\u01f3\11\0\1\u01f3"+
    "\2\0\13\366\1\u014e\52\366\1\u01f4\5\366\24\0\1\u01f5"+
    "\121\0\1\u01f6\21\0\13\372\1\u0155\52\372\1\u011a\5\372"+
    "\4\374\1\372\1\374\4\372\1\374\1\u0156\5\374\2\372"+
    "\43\374\1\u01f7\5\374\4\375\1\372\1\375\2\372\3\375"+
    "\1\u0157\5\375\2\372\30\375\1\372\1\375\1\372\10\375"+
    "\1\u01f8\5\375\27\0\1\u010d\73\0\1\u01f9\101\0\1\u01d8"+
    "\71\0\1\u01fa\23\0\1\u01fa\11\0\1\u01fa\31\0\1\u01ac"+
    "\20\0\1\u01db\12\0\1\u01db\47\0\1\u01fb\73\0\1\u01fc"+
    "\61\0\1\u01fd\105\0\1\u010e\67\0\1\252\4\0\1\u01e1"+
    "\16\0\1\252\11\0\1\252\41\0\1\u01fe\74\0\1\u01e3"+
    "\76\0\1\u01d8\15\0\1\u01d8\57\0\1\u01d8\54\0\1\u01ff"+
    "\73\0\1\u0128\112\0\1\u0128\73\0\1\u0200\63\0\1\u012d"+
    "\101\0\1\u0201\12\0\1\u0202\2\0\1\u0201\44\0\1\u0203"+
    "\74\0\1\u0204\23\0\1\u0204\11\0\1\u0204\54\0\1\210"+
    "\21\0\14\u01cc\1\u0197\5\u01cc\1\u01f0\4\u0197\1\u0205\23\u0197"+
    "\3\u01cc\7\u0197\7\u01cc\27\0\1\u0206\107\0\1\u01f1\15\0"+
    "\1\u01f1\50\0\1\u0207\60\0\1\u0208\76\0\1\u0167\112\0"+
    "\1\u0209\54\0\1\u01b3\112\0\1\u0167\73\0\1\u020a\63\0"+
    "\1\u016e\101\0\1\u020b\12\0\1\u020c\2\0\1\u020b\45\0"+
    "\1\u020d\23\0\1\u020d\11\0\1\u020d\31\0\1\u020e\107\0"+
    "\1\u0201\15\0\1\u0201\45\0\1\u020f\22\0\1\u0210\1\u020f"+
    "\11\0\1\u020f\42\0\1\364\33\0\14\u01cc\1\u0197\6\u01cc"+
    "\14\u0197\1\u0211\13\u0197\3\u01cc\7\u0197\7\u01cc\37\0\1\u0212"+
    "\34\0\14\u0213\1\0\6\u0213\30\0\3\u0213\7\0\7\u0213"+
    "\45\0\1\u0214\60\0\1\u0215\74\0\1\u0216\23\0\1\u0216"+
    "\11\0\1\u0216\31\0\1\u0217\107\0\1\u020b\15\0\1\u020b"+
    "\52\0\1\u0134\72\0\1\u0218\73\0\1\u0219\67\0\1\u020f"+
    "\23\0\1\u020f\11\0\1\u020f\2\0\14\u01cc\1\u0197\6\u01cc"+
    "\3\u0197\1\u021a\24\u0197\3\u01cc\7\u0197\7\u01cc\26\0\1\u021b"+
    "\45\0\14\u021c\1\u0213\6\u021c\30\u0213\3\u021c\7\u0213\7\u021c"+
    "\33\0\1\u021d\23\0\1\u021d\11\0\1\u021d\35\0\1\u021e"+
    "\22\0\1\u021f\1\u021e\11\0\1\u021e\42\0\1\u0175\72\0"+
    "\1\u0220\62\0\1\u0221\73\0\1\u0222\45\0\14\u01cc\1\u0197"+
    "\6\u01cc\20\u0197\1\u0223\7\u0197\3\u01cc\1\u0224\2\u0197\1\u0223"+
    "\3\u0197\7\u01cc\27\0\1\u0225\44\0\14\u021c\1\u0213\5\u021c"+
    "\1\u0226\30\u0213\3\u021c\7\u0213\7\u021c\36\0\1\u0227\74\0"+
    "\1\u0228\67\0\1\u021e\23\0\1\u021e\11\0\1\u021e\30\0"+
    "\1\u0229\74\0\1\303\73\0\1\u022a\44\0\14\u01cc\1\u0197"+
    "\6\u01cc\23\u0197\1\u022b\4\u0197\3\u01cc\7\u0197\23\u01cc\1\u0197"+
    "\6\u01cc\20\u0197\1\u0223\7\u0197\3\u01cc\3\u0197\1\u0223\3\u0197"+
    "\7\u01cc\43\0\1\210\15\0\1\210\12\0\14\u021c\1\u0213"+
    "\5\u021c\1\u0226\4\u0213\1\u022c\23\u0213\3\u021c\7\u0213\7\u021c"+
    "\14\0\1\u022d\6\0\30\u022d\3\0\7\u022d\35\0\1\u022e"+
    "\74\0\1\u022f\115\0\1\337\12\0\1\337\7\0\14\u01cc"+
    "\1\u0197\6\u01cc\1\u0197\1\u0230\26\u0197\3\u01cc\7\u0197\7\u01cc"+
    "\14\u021c\1\u0213\6\u021c\14\u0213\1\u0231\13\u0213\3\u021c\7\u0213"+
    "\7\u021c\27\0\1\u0232\107\0\1\244\15\0\1\244\12\0"+
    "\14\u01cc\1\u0197\6\u01cc\27\u0197\1\u0233\3\u01cc\7\u0197\7\u01cc"+
    "\14\u021c\1\u0213\6\u021c\3\u0213\1\u0234\24\u0213\3\u021c\7\u0213"+
    "\7\u021c\51\0\1\u0164\12\0\1\u0164\7\0\14\u021c\1\u0213"+
    "\6\u021c\24\u0213\1\u0235\3\u0213\3\u021c\1\u0236\6\u0213\23\u021c"+
    "\1\u0213\6\u021c\4\u0213\1\u0237\23\u0213\3\u021c\7\u0213\23\u021c"+
    "\1\u0213\6\u021c\24\u0213\1\u0235\3\u0213\3\u021c\7\u0213\23\u021c"+
    "\1\u0213\6\u021c\20\u0213\1\u0238\7\u0213\3\u021c\3\u0213\1\u0238"+
    "\3\u0213\23\u021c\1\u0213\6\u021c\1\u0213\1\u0239\26\u0213\3\u021c"+
    "\7\u0213\23\u021c\1\u0213\6\u021c\1\u023a\27\u0213\3\u021c\7\u0213"+
    "\23\u021c\1\u0213\6\u021c\22\u0213\1\u023b\5\u0213\3\u021c\7\u0213"+
    "\23\u021c\1\u0213\6\u021c\10\u0213\1\u023c\17\u0213\3\u021c\1\u0213"+
    "\1\u023c\5\u0213\4\u021c\1\u023d\16\u021c\1\u0213\6\u021c\13\u0213"+
    "\1\u023e\14\u0213\3\u021c\7\u0213\23\u021c\1\u0213\5\u021c\1\u0226"+
    "\13\u0213\1\u023e\14\u0213\3\u021c\7\u0213\7\u021c";

  private static int [] zzUnpacktrans() {
    int [] result = new int[31800];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\1\1\2\0\6\1\1\11\11\1\1\11\1\1"+
    "\5\11\2\1\1\11\1\1\1\11\11\1\1\11\1\1"+
    "\1\11\4\1\1\11\2\1\34\0\1\11\5\0\1\11"+
    "\2\1\3\0\2\1\2\0\1\1\32\0\1\1\31\0"+
    "\2\1\1\11\17\0\2\1\50\0\2\1\1\0\2\11"+
    "\24\0\1\1\3\0\3\1\33\0\2\11\41\0\1\1"+
    "\1\0\2\1\5\0\1\1\12\0\1\11\5\0\2\1"+
    "\13\0\2\1\44\0\3\1\4\0\3\1\10\0\1\11"+
    "\1\0\1\1\3\0\2\1\7\0\1\1\10\0\1\1"+
    "\32\0\1\1\3\0\1\1\3\0\2\1\5\0\1\1"+
    "\26\0\1\1\1\0\1\11\2\1\56\0\1\1\5\0"+
    "\1\11\5\0\1\11\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int parentheses;
    private ArrayDeque<Integer> stateStack = new ArrayDeque<Integer>();
    private ArrayDeque<Character> blockStack = new ArrayDeque<Character>();
    private boolean stringIsInterpolated;
    private String currentStatement = "";
    private boolean lastCharacterWasWord = false;
    private Set<String> naryStatements = Set.of("pushif", "prependif", "each", "eachelse", "eachwithindex", "eachwithindexelse", "props");

    private char flipBracket(char bracket){
        switch (bracket) {
            case '{': return '}';
            case '[': return ']';
            case '(': return ')';
            case '<': return '>';
            default: return bracket;
        }
    }

    private void checkLastChar(){
      char chr = yycharat(yylength() - 1);

      lastCharacterWasWord = (chr >= 'a' && chr <= 'z') || (chr >= 'A' && chr <= 'Z') || (chr >= '0' && chr <= '9') || chr == '_';
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RBladeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 35: break;
          case 2:
            { lastCharacterWasWord = false;
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 36: break;
          case 3:
            { checkLastChar();
    return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 37: break;
          case 4:
            { lastCharacterWasWord = false;
    return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 38: break;
          case 5:
            { return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 39: break;
          case 6:
            { stateStack.addFirst(yystate());
    blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
    yybegin(STATE_STRING_INTERPOLATED_LITERAL);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 40: break;
          case 7:
            { stateStack.addFirst(yystate());
    blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
    yybegin(STATE_STRING_LITERAL);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 41: break;
          case 8:
            { yybegin(MATCHED_PARENTHESES);
    stateStack.addFirst(STATE_RUBY_BLOCK);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 42: break;
          case 9:
            { yybegin(YYINITIAL);
    currentStatement = "";
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 43: break;
          case 10:
            { if (naryStatements.contains(currentStatement)) {
      return RBladeTypes.RBLADE_STATEMENT_COMMA;
    } else {
      return RBladeTypes.RUBY_EXPRESSION;
    }
            }
          // fall through
          case 44: break;
          case 11:
            { if (blockStack.isEmpty() && currentStatement.equals("props")) {
      return RBladeTypes.RBLADE_STATEMENT_PROPS_COLON;
    }

    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 45: break;
          case 12:
            { yybegin(MATCHED_BRACKETS);
    stateStack.addFirst(STATE_RUBY_BLOCK);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 46: break;
          case 13:
            { yybegin(MATCHED_BRACES);
    stateStack.addFirst(STATE_RUBY_BLOCK);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 47: break;
          case 14:
            { if (yycharat(0) == blockStack.getFirst()) {
      blockStack.removeFirst();
      yybegin(stateStack.removeFirst());
    }

    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 48: break;
          case 15:
            { stateStack.addFirst(STATE_STRING_INTERPOLATION);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 49: break;
          case 16:
            { yybegin(stateStack.removeFirst());
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 50: break;
          case 17:
            { stateStack.addFirst(MATCHED_PARENTHESES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 51: break;
          case 18:
            { stateStack.addFirst(MATCHED_BRACKETS);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 52: break;
          case 19:
            { stateStack.addFirst(MATCHED_BRACES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 53: break;
          case 20:
            { lastCharacterWasWord = false;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 54: break;
          case 21:
            { stateStack.addFirst(STATE_STRING_INTERPOLATED_LITERAL);
    yybegin(STATE_STRING_INTERPOLATION);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 55: break;
          case 22:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 13;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 14;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 56: break;
          case 23:
            { if (lastCharacterWasWord) {
          return RBladeTypes.HTML_TEMPLATE;
      }
      checkLastChar();

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 57: break;
          case 24:
            { if (lastCharacterWasWord) {
        lastCharacterWasWord = false;
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = false;

      yybegin(STATE_RUBY_BLOCK);
      currentStatement = yytext().toString().replaceAll("[^a-zA-Z]", "").toLowerCase();

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 58: break;
          case 25:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { lastCharacterWasWord = false;
      yybegin(RBLADE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 59: break;
          case 26:
            { if (currentStatement.startsWith("each")) {
      return RBladeTypes.RBLADE_STATEMENT_EACH_IN;
    }

    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 60: break;
          case 27:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 15;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 16;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { lastCharacterWasWord = false;
      yybegin(ERB_STATEMENT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 61: break;
          case 28:
            { return RBladeTypes.COMMENT;
            }
          // fall through
          case 62: break;
          case 29:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { lastCharacterWasWord = false;
      yybegin(RBLADE_UNSAFE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 63: break;
          case 30:
            { lastCharacterWasWord = true;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 64: break;
          case 31:
            { if (lastCharacterWasWord) {
      return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
    }
    lastCharacterWasWord = true;
    yybegin(stateStack.removeFirst());
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 65: break;
          case 32:
            { lastCharacterWasWord = true;
    return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 66: break;
          case 33:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { if (lastCharacterWasWord) {
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = true;
      yybegin(RBLADE_RUBY);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 67: break;
          case 34:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 9);
            { if (lastCharacterWasWord) {
      return RBladeTypes.HTML_TEMPLATE;
  }
  lastCharacterWasWord = true;
  stateStack.addFirst(yystate());
  yybegin(STATE_VERBATIM);
  return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

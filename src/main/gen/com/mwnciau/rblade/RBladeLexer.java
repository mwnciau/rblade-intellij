// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RBlade.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.mwnciau.rblade;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.mwnciau.rblade.psi.RBladeTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayDeque;
import java.util.Set;

public class RBladeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_VERBATIM = 2;
  public static final int RBLADE_RUBY = 4;
  public static final int RBLADE_PRINT = 6;
  public static final int RBLADE_UNSAFE_PRINT = 8;
  public static final int ERB_STATEMENT = 10;
  public static final int STATE_RUBY_BLOCK = 12;
  public static final int STATE_PROPS_STATEMENT_NAME = 14;
  public static final int STATE_PROPS_STATEMENT_COLON = 16;
  public static final int STATE_PROPS_STATEMENT_VALUE = 18;
  public static final int STATE_STRING_LITERAL = 20;
  public static final int STATE_STRING_INTERPOLATED_LITERAL = 22;
  public static final int STATE_STRING_INTERPOLATION = 24;
  public static final int MATCHED_PARENTHESES = 26;
  public static final int MATCHED_BRACKETS = 28;
  public static final int MATCHED_BRACES = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\0\1\7\1\10\1\11\2\0\1\12"+
    "\1\13\2\0\12\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\31\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\31\1\53\1\54\1\55\1\0"+
    "\1\56\1\0\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\57\1\31\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\60\1\61\1\62\1\45\1\46\1\47"+
    "\1\63\1\64\1\52\1\31\1\65\1\0\1\66\2\0"+
    "\5\67\1\70\32\67\1\70\217\67\2\71\115\67\1\72"+
    "\u0200\67\1\70\177\67\13\70\35\67\2\70\5\67\1\70"+
    "\57\67\1\70\312\67\1\73\325\67\1\70\377\67";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\3\2\1\3\1\4\23\5\1\6\1\5"+
    "\1\7\1\10\1\11\1\12\3\5\1\13\1\14\1\15"+
    "\1\16\1\17\5\15\1\20\2\5\1\21\2\5\1\22"+
    "\1\5\5\22\2\5\1\23\1\24\1\5\1\25\4\5"+
    "\1\26\1\5\1\27\4\0\1\30\22\0\1\31\1\0"+
    "\1\5\1\0\3\5\1\32\1\0\2\5\1\0\1\5"+
    "\4\0\2\5\3\0\1\33\1\0\1\5\1\34\2\5"+
    "\4\0\1\35\1\30\32\0\1\36\21\0\1\37\2\0"+
    "\1\5\1\0\6\5\1\0\4\5\21\0\1\30\46\0"+
    "\2\36\1\0\1\1\1\40\24\0\1\5\1\0\6\5"+
    "\1\41\4\5\33\0\1\42\41\0\1\36\1\0\2\1"+
    "\6\0\1\36\12\0\1\42\2\0\1\5\1\42\1\5"+
    "\1\42\6\5\61\0\2\1\1\36\4\0\1\36\3\1"+
    "\13\0\10\5\50\0\1\43\4\0\1\40\5\0\7\5"+
    "\35\0\1\44\1\42\2\5\2\42\16\0\1\45\1\0"+
    "\2\45\12\0\1\46\1\0\2\46\20\0\1\47\4\0"+
    "\1\50\4\0\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[627];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0a8c"+
    "\0\u0a8c\0\u0a8c\0\u0a8c\0\u0b04\0\u0b40\0\u0b7c\0\u0a8c\0\u0bb8"+
    "\0\u0a8c\0\u0bf4\0\u0a8c\0\u0c30\0\u0780\0\u0c6c\0\u0bb8\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0a8c\0\u0e4c"+
    "\0\u0c30\0\u0780\0\u0b40\0\u0bb8\0\u0e88\0\u0ec4\0\u0f00\0\u0bb8"+
    "\0\u0a8c\0\u0f3c\0\u0a8c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u0a8c"+
    "\0\u1068\0\u0bb8\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u0a8c\0\u07f8\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u0a50\0\u189c"+
    "\0\u18d8\0\u1914\0\u0a8c\0\u1950\0\u1608\0\u198c\0\u0c6c\0\u0a8c"+
    "\0\u0ca8\0\u19c8\0\u0a8c\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274"+
    "\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u0a8c"+
    "\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8"+
    "\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u0a8c"+
    "\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c"+
    "\0\u0a8c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0"+
    "\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0"+
    "\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0"+
    "\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480"+
    "\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660"+
    "\0\u369c\0\u36d8\0\u0a8c\0\u0a8c\0\u3714\0\u3750\0\u378c\0\u37c8"+
    "\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8"+
    "\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88"+
    "\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68"+
    "\0\u288c\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c"+
    "\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec"+
    "\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc"+
    "\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470\0\u44ac"+
    "\0\u0a8c\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650"+
    "\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830"+
    "\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10"+
    "\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0"+
    "\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0"+
    "\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74\0\u4fb0"+
    "\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118\0\u5154\0\u0618"+
    "\0\u5190\0\u51cc\0\u5208\0\u0708\0\u5244\0\u0834\0\u5280\0\u52bc"+
    "\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c"+
    "\0\u54d8\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c"+
    "\0\u56b8\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u585c"+
    "\0\u5898\0\u58d4\0\u5910\0\u594c\0\u5988\0\u59c4\0\u5a00\0\u5a3c"+
    "\0\u5a78\0\u5ab4\0\u5af0\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c"+
    "\0\u5c58\0\u5c94\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc"+
    "\0\u5e38\0\u5e74\0\u5eb0\0\u5eec\0\u5f28\0\u5f64\0\u5fa0\0\u5fdc"+
    "\0\u4d1c\0\u6018\0\u6054\0\u6090\0\u60cc\0\u1338\0\u6108\0\u6144"+
    "\0\u6180\0\u61bc\0\u61f8\0\u6234\0\u6270\0\u62ac\0\u62e8\0\u6324"+
    "\0\u6360\0\u639c\0\u63d8\0\u6414\0\u6450\0\u648c\0\u64c8\0\u6504"+
    "\0\u6540\0\u657c\0\u65b8\0\u65f4\0\u6630\0\u666c\0\u66a8\0\u66e4"+
    "\0\u6720\0\u675c\0\u6798\0\u67d4\0\u6810\0\u684c\0\u6888\0\u68c4"+
    "\0\u6900\0\u693c\0\u6978\0\u69b4\0\u69f0\0\u6a2c\0\u6a68\0\u6aa4"+
    "\0\u6ae0\0\u6b1c\0\u6b58\0\u6b94\0\u6bd0\0\u6c0c\0\u6c48\0\u6c84"+
    "\0\u6cc0\0\u6cfc\0\u6d38\0\u6d74\0\u6db0\0\u6dec\0\u5f64\0\u6e28"+
    "\0\u6e64\0\u6ea0\0\u6edc\0\u0a8c\0\u6108\0\u6f18\0\u6f54\0\u6f90"+
    "\0\u6f54\0\u6fcc\0\u7008\0\u7044\0\u7080\0\u70bc\0\u70f8\0\u7134"+
    "\0\u7170\0\u71ac\0\u71e8\0\u7224\0\u7260\0\u729c\0\u72d8\0\u7314"+
    "\0\u7350\0\u738c\0\u576c\0\u73c8\0\u7404\0\u7440\0\u747c\0\u74b8"+
    "\0\u74f4\0\u7530\0\u756c\0\u75a8\0\u75e4\0\u7620\0\u765c\0\u7698"+
    "\0\u76d4\0\u7710\0\u774c\0\u7788\0\u77c4\0\u7800\0\u783c\0\u7878"+
    "\0\u78b4\0\u78f0\0\u0a8c\0\u0924\0\u792c\0\u7968\0\u0f3c\0\u0ff0"+
    "\0\u79a4\0\u79e0\0\u7a1c\0\u7a58\0\u7a94\0\u7ad0\0\u7b0c\0\u7b48"+
    "\0\u7b84\0\u7bc0\0\u7bfc\0\u7c38\0\u7c74\0\u7cb0\0\u7cec\0\u7d28"+
    "\0\u7d64\0\u7da0\0\u7ddc\0\u7e18\0\u7e54\0\u7e90\0\u7ecc\0\u7f08"+
    "\0\u7f44\0\u7f80\0\u7fbc\0\u7ff8\0\u0a8c\0\u8034\0\u0a14\0\u0d20"+
    "\0\u8070\0\u80ac\0\u80e8\0\u8124\0\u8160\0\u819c\0\u81d8\0\u8214"+
    "\0\u8250\0\u828c\0\u82c8\0\u8304\0\u8340\0\u837c\0\u83b8\0\u83f4"+
    "\0\u8430\0\u846c\0\u84a8\0\u84e4\0\u8520\0\u0a8c\0\u855c\0\u8598"+
    "\0\u85d4\0\u8610\0\u0a8c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[627];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\16\25\1\26\3\25\1\27\42\25\1\30\6\25\22\31"+
    "\1\32\51\31\16\33\1\34\3\33\1\35\42\33\1\36"+
    "\6\33\16\37\1\40\3\37\1\41\42\37\1\42\1\43"+
    "\5\37\3\44\1\45\12\44\1\46\3\44\1\41\42\44"+
    "\1\47\6\44\6\50\1\51\7\50\1\52\3\50\1\41"+
    "\42\50\1\53\6\50\1\54\2\55\1\54\1\56\1\54"+
    "\1\57\1\60\1\61\1\62\1\63\3\54\1\64\2\54"+
    "\1\65\1\66\30\54\1\67\11\54\1\70\2\54\1\55"+
    "\3\54\1\71\2\72\6\71\1\73\4\71\1\74\3\71"+
    "\1\75\30\76\3\71\7\76\1\77\2\71\1\72\4\71"+
    "\2\100\12\71\1\101\1\74\3\71\1\75\42\71\1\77"+
    "\2\71\1\100\3\71\1\102\2\103\1\102\1\56\1\102"+
    "\1\57\1\60\1\61\1\62\1\104\3\102\1\105\2\102"+
    "\1\65\1\106\30\102\1\67\11\102\1\70\2\102\1\103"+
    "\3\102\14\107\1\110\1\107\1\111\3\107\1\112\30\110"+
    "\1\107\1\113\2\107\6\110\1\114\1\107\5\110\5\107"+
    "\1\115\6\107\1\110\1\107\1\111\3\107\1\112\30\110"+
    "\1\107\1\113\2\107\6\110\1\114\1\107\5\110\4\116"+
    "\1\56\1\116\1\57\1\60\6\116\1\117\2\116\1\65"+
    "\1\41\42\116\1\120\1\121\5\116\4\122\1\56\1\122"+
    "\1\57\1\60\1\123\1\121\4\122\1\124\2\122\1\65"+
    "\1\41\42\122\1\125\6\122\4\126\1\56\1\126\1\57"+
    "\1\60\6\126\1\127\2\126\1\65\1\41\30\126\1\130"+
    "\1\126\1\121\7\126\1\131\6\126\4\116\1\56\1\116"+
    "\1\57\1\60\6\116\1\117\2\116\1\65\1\41\42\116"+
    "\1\132\1\121\5\116\16\0\1\133\3\0\1\134\51\0"+
    "\74\22\23\0\30\135\3\0\7\135\24\0\1\136\56\0"+
    "\16\25\1\0\3\25\1\0\42\25\1\0\6\25\6\0"+
    "\1\137\107\0\1\140\1\0\1\141\1\142\1\143\1\144"+
    "\1\145\2\0\1\146\2\0\1\147\1\150\1\151\1\152"+
    "\1\0\1\153\1\154\1\0\1\155\1\156\1\157\6\0"+
    "\1\146\1\0\1\153\1\154\1\157\1\0\1\160\3\0"+
    "\1\146\1\154\4\0\1\161\61\0\1\162\6\0\22\31"+
    "\1\0\51\31\27\0\1\163\44\0\22\33\1\0\57\33"+
    "\1\164\13\33\1\0\51\33\27\0\1\165\17\0\1\156"+
    "\24\0\22\33\1\0\42\33\1\166\6\33\22\37\1\0"+
    "\43\37\1\0\13\37\1\167\13\37\1\0\43\37\1\0"+
    "\5\37\47\0\1\156\24\0\22\37\1\0\42\37\1\170"+
    "\1\0\5\37\66\0\1\171\5\0\3\44\1\0\16\44"+
    "\1\0\51\44\3\0\1\172\70\0\3\44\1\0\2\44"+
    "\1\173\13\44\1\0\54\44\1\0\16\44\1\0\42\44"+
    "\1\174\6\44\6\50\1\0\13\50\1\0\51\50\20\0"+
    "\1\171\53\0\6\50\1\175\13\50\1\0\57\50\1\0"+
    "\13\50\1\0\42\50\1\176\6\50\1\54\2\0\1\54"+
    "\1\0\1\54\5\0\6\54\1\0\31\54\1\0\11\54"+
    "\1\0\2\54\1\0\3\54\1\0\2\177\30\0\1\200"+
    "\23\0\1\200\10\0\1\177\1\200\76\0\14\56\1\0"+
    "\6\56\10\0\1\201\6\0\1\201\5\0\1\201\2\0"+
    "\4\56\2\202\1\201\2\202\1\201\2\56\5\0\1\54"+
    "\2\0\1\54\1\0\1\54\1\175\4\0\6\54\1\0"+
    "\31\54\1\0\11\54\1\0\2\54\1\0\3\54\74\203"+
    "\1\54\2\0\1\54\1\0\1\54\5\0\6\54\1\0"+
    "\25\54\1\204\3\54\1\0\11\54\1\0\2\54\1\0"+
    "\3\54\65\0\1\205\7\0\2\72\65\0\1\72\11\0"+
    "\1\175\66\0\2\206\11\0\1\207\1\210\5\0\30\207"+
    "\3\0\7\207\3\0\1\206\4\0\2\211\12\0\1\101"+
    "\52\0\1\211\4\0\2\101\65\0\1\101\3\0\4\102"+
    "\1\0\1\102\5\0\6\102\1\0\31\102\1\0\11\102"+
    "\1\0\7\102\2\103\1\102\1\0\1\102\4\0\1\104"+
    "\6\102\1\0\31\102\1\0\11\102\1\0\2\102\1\103"+
    "\3\102\1\0\2\104\65\0\1\104\3\0\4\102\1\0"+
    "\1\102\1\175\4\0\6\102\1\0\31\102\1\0\11\102"+
    "\1\0\12\102\1\0\1\102\5\0\6\102\1\0\25\102"+
    "\1\212\3\102\1\0\11\102\1\0\6\102\14\0\1\110"+
    "\6\0\30\110\4\0\6\110\2\0\5\110\65\0\1\213"+
    "\6\0\4\116\1\0\1\116\2\0\11\116\2\0\42\116"+
    "\2\0\11\116\1\0\1\116\1\175\1\0\11\116\2\0"+
    "\42\116\2\0\5\116\4\122\1\0\1\122\4\0\7\122"+
    "\2\0\55\122\1\0\1\122\1\175\3\0\7\122\2\0"+
    "\55\122\1\0\1\122\4\0\7\122\2\0\42\122\1\214"+
    "\6\122\4\126\1\0\1\126\2\0\11\126\2\0\30\126"+
    "\1\0\1\126\1\0\22\126\1\0\1\126\1\175\1\0"+
    "\11\126\2\0\30\126\1\0\1\126\1\0\22\126\1\0"+
    "\1\126\2\0\11\126\2\0\30\126\1\0\1\126\1\0"+
    "\7\126\1\215\6\126\6\0\1\216\107\0\1\217\42\0"+
    "\1\220\22\0\1\135\6\0\30\135\3\0\7\135\10\0"+
    "\2\136\65\0\1\136\10\0\1\221\1\222\10\0\1\223"+
    "\100\0\1\224\1\225\1\226\1\227\1\230\2\0\1\231"+
    "\2\0\1\232\1\233\1\234\1\235\1\0\1\236\1\237"+
    "\1\0\1\240\1\0\1\241\6\0\1\231\1\0\1\236"+
    "\1\237\1\241\5\0\1\231\1\237\36\0\1\242\5\0"+
    "\1\243\15\0\1\243\35\0\1\244\6\0\1\245\2\0"+
    "\1\246\65\0\1\247\3\0\1\250\23\0\1\250\11\0"+
    "\1\250\25\0\1\251\11\0\1\252\1\253\1\254\74\0"+
    "\1\255\63\0\1\256\72\0\1\257\73\0\1\260\3\0"+
    "\1\261\23\0\1\261\11\0\1\261\37\0\1\262\1\0"+
    "\1\263\57\0\1\264\17\0\1\265\2\0\1\266\12\0"+
    "\1\265\41\0\1\267\16\0\1\270\54\0\1\271\2\0"+
    "\1\272\12\0\1\273\65\0\1\274\63\0\1\275\76\0"+
    "\1\276\44\0\1\277\61\0\1\222\11\0\1\300\103\0"+
    "\1\301\117\0\1\302\34\0\5\33\1\303\14\33\1\0"+
    "\51\33\37\0\1\304\34\0\13\33\1\305\6\33\1\0"+
    "\51\33\5\37\1\306\14\37\1\0\43\37\1\0\20\37"+
    "\1\307\6\37\1\0\43\37\1\0\5\37\3\44\1\0"+
    "\1\44\1\310\14\44\1\0\54\44\1\0\7\44\1\311"+
    "\6\44\1\0\51\44\5\0\1\221\66\0\6\50\1\0"+
    "\4\50\1\312\6\50\1\0\51\50\37\0\1\313\34\0"+
    "\14\56\1\0\6\56\30\0\4\56\6\0\2\56\5\0"+
    "\14\60\1\0\6\60\30\0\4\60\6\0\2\60\5\0"+
    "\1\54\2\0\1\54\1\0\1\54\5\0\6\54\1\0"+
    "\5\54\1\314\23\54\1\0\11\54\1\0\2\54\1\0"+
    "\3\54\1\0\2\206\12\0\1\210\52\0\1\206\3\0"+
    "\4\102\1\0\1\102\5\0\6\102\1\0\5\102\1\315"+
    "\23\102\1\0\11\102\1\0\6\102\4\122\1\0\1\122"+
    "\4\0\1\122\1\316\5\122\2\0\51\122\4\126\1\0"+
    "\1\126\2\0\3\126\1\317\5\126\2\0\30\126\1\0"+
    "\1\126\1\0\16\126\6\0\1\320\111\0\1\321\1\322"+
    "\1\323\1\324\1\325\2\0\1\326\2\0\1\327\1\330"+
    "\1\331\1\332\1\0\1\333\1\334\1\0\1\335\1\0"+
    "\1\336\6\0\1\326\1\0\1\333\1\334\1\336\5\0"+
    "\1\326\1\334\4\0\1\337\61\0\1\320\6\0\6\221"+
    "\1\340\65\221\74\222\17\0\1\341\111\0\1\342\5\0"+
    "\1\343\15\0\1\343\35\0\1\344\6\0\1\345\2\0"+
    "\1\346\65\0\1\347\3\0\1\350\23\0\1\350\11\0"+
    "\1\350\25\0\1\351\11\0\1\352\1\353\1\354\74\0"+
    "\1\355\63\0\1\222\72\0\1\356\73\0\1\357\3\0"+
    "\1\360\23\0\1\360\11\0\1\360\37\0\1\361\1\0"+
    "\1\362\57\0\1\363\17\0\1\364\2\0\1\365\12\0"+
    "\1\364\41\0\1\366\16\0\1\367\54\0\1\370\2\0"+
    "\1\371\12\0\1\372\65\0\1\373\66\0\1\374\64\0"+
    "\1\375\77\0\1\376\110\0\1\377\15\0\1\377\7\0"+
    "\1\377\30\0\1\u0100\67\0\1\u0101\100\0\1\u0102\4\0"+
    "\1\u0103\102\0\1\u0104\15\0\1\u0104\7\0\1\u0104\26\0"+
    "\1\u0105\112\0\1\u0106\15\0\1\u0106\7\0\1\u0106\42\0"+
    "\1\u0107\60\0\1\u0108\20\0\1\256\67\0\1\u0109\15\0"+
    "\1\u0109\13\0\1\u010a\1\0\1\u010b\4\0\1\u010c\3\0"+
    "\1\u010b\4\0\1\u010b\1\0\30\u010b\3\0\7\u010b\54\0"+
    "\1\u010d\77\0\1\u010e\12\0\1\u010e\44\0\1\u010f\64\0"+
    "\1\256\72\0\1\377\113\0\1\u0110\55\0\1\u0111\10\0"+
    "\1\u0112\77\0\1\u0113\1\256\14\0\1\u0113\7\0\1\u0113"+
    "\24\0\1\u0114\16\0\1\u0115\15\0\1\u0115\37\0\1\u0116"+
    "\104\0\1\u0117\76\0\1\u0118\56\0\1\u0119\26\0\1\u011a"+
    "\56\0\1\u011b\7\0\1\u011c\71\0\1\u011d\15\0\1\u011d"+
    "\41\0\1\u011e\3\0\1\u011a\23\0\1\u011a\11\0\1\u011a"+
    "\5\0\1\222\103\0\1\u011f\106\0\1\u0120\45\0\6\303"+
    "\1\u0121\13\303\1\221\51\303\26\0\1\u0122\45\0\13\33"+
    "\1\u0123\6\33\1\0\51\33\6\306\1\u0124\13\306\1\221"+
    "\43\306\1\221\5\306\13\37\1\u0125\6\37\1\0\43\37"+
    "\1\0\5\37\3\310\1\221\2\310\1\u0126\13\310\1\221"+
    "\51\310\3\44\1\0\7\44\1\u0127\6\44\1\0\51\44"+
    "\6\50\1\0\4\50\1\u0128\6\50\1\0\51\50\1\0"+
    "\2\u0129\65\0\1\u0129\3\0\1\54\2\0\1\54\1\0"+
    "\1\54\5\0\6\54\1\0\21\54\1\u012a\7\54\1\0"+
    "\5\54\1\u012a\3\54\1\0\2\54\1\0\3\54\4\102"+
    "\1\0\1\102\5\0\6\102\1\0\21\102\1\u012b\7\102"+
    "\1\0\5\102\1\u012b\3\102\1\0\6\102\4\122\1\0"+
    "\1\122\4\0\1\122\1\u012c\5\122\2\0\51\122\4\126"+
    "\1\0\1\126\2\0\3\126\1\u012d\5\126\2\0\30\126"+
    "\1\0\1\126\1\0\16\126\35\0\1\u012e\5\0\1\u012f"+
    "\15\0\1\u012f\35\0\1\u0130\6\0\1\u0131\2\0\1\u0132"+
    "\65\0\1\u0133\3\0\1\u0134\23\0\1\u0134\11\0\1\u0134"+
    "\25\0\1\u0135\11\0\1\u0136\1\u0137\1\u0138\74\0\1\u0139"+
    "\63\0\1\320\72\0\1\u013a\73\0\1\u013b\3\0\1\u013c"+
    "\23\0\1\u013c\11\0\1\u013c\37\0\1\u013d\1\0\1\u013e"+
    "\57\0\1\u013f\17\0\1\u0140\2\0\1\u0141\12\0\1\u0140"+
    "\41\0\1\u0142\16\0\1\u0143\54\0\1\u0144\2\0\1\u0145"+
    "\12\0\1\u0146\65\0\1\u0147\66\0\1\u0148\44\0\1\320"+
    "\70\0\6\221\1\340\11\221\1\u0149\53\221\23\0\1\u014a"+
    "\77\0\1\u014b\110\0\1\u014c\15\0\1\u014c\7\0\1\u014c"+
    "\30\0\1\u014d\67\0\1\u014e\100\0\1\u014f\4\0\1\u0150"+
    "\102\0\1\u0151\15\0\1\u0151\7\0\1\u0151\26\0\1\u0152"+
    "\112\0\1\u0153\15\0\1\u0153\7\0\1\u0153\42\0\1\u0154"+
    "\60\0\1\222\20\0\1\222\67\0\1\222\15\0\1\222"+
    "\57\0\1\u0155\77\0\1\u0156\12\0\1\u0156\44\0\1\u0157"+
    "\64\0\1\222\72\0\1\u014c\113\0\1\351\55\0\1\u0158"+
    "\10\0\1\u0159\77\0\1\u0152\1\222\14\0\1\u0152\7\0"+
    "\1\u0152\24\0\1\u015a\16\0\1\u015b\15\0\1\u015b\37\0"+
    "\1\u015c\104\0\1\u015d\76\0\1\u015e\56\0\1\u015f\26\0"+
    "\1\u0160\56\0\1\u0161\7\0\1\u0162\55\0\1\u0163\3\0"+
    "\1\u0160\23\0\1\u0160\11\0\1\u0160\41\0\1\u0164\57\0"+
    "\1\u0165\77\0\1\256\71\0\1\u0166\112\0\1\u0167\15\0"+
    "\1\u0167\7\0\1\u0167\34\0\1\u0168\23\0\1\u0168\11\0"+
    "\1\u0168\31\0\1\u0169\67\0\1\u016a\102\0\1\u016b\70\0"+
    "\1\256\3\0\1\146\23\0\1\146\11\0\1\146\47\0"+
    "\1\u016c\27\0\1\u010a\1\0\1\256\4\0\1\u010c\3\0"+
    "\1\u010b\4\0\1\256\1\0\30\u0108\3\0\7\u0108\10\0"+
    "\1\u010a\1\0\1\u010b\4\0\1\u010c\3\0\1\u010b\4\0"+
    "\1\u010b\1\0\4\u010b\1\u016d\23\u010b\3\0\1\u016e\6\u010b"+
    "\10\0\1\u010a\6\0\1\u010c\115\0\1\u016f\106\0\1\256"+
    "\47\0\1\256\77\0\1\u0170\107\0\1\u0171\2\0\1\u0172"+
    "\15\0\1\u0172\7\0\1\u0172\27\0\1\u0173\12\0\1\u0174"+
    "\64\0\1\u0175\67\0\1\u0176\113\0\1\u0177\77\0\1\u0178"+
    "\50\0\1\u0179\112\0\1\u017a\52\0\1\u0165\103\0\1\377"+
    "\65\0\1\u0101\77\0\1\u017b\23\0\1\u017b\11\0\1\u017b"+
    "\26\0\1\u017c\106\0\1\256\34\0\13\u011f\1\u017d\60\u011f"+
    "\47\0\1\u017e\6\0\1\u017f\15\0\6\303\1\u0121\11\303"+
    "\1\u0180\1\303\1\221\51\303\43\0\1\u0181\12\0\1\u0182"+
    "\2\0\1\u0181\12\0\13\u0123\1\u0183\6\u0123\1\u011f\51\u0123"+
    "\6\306\1\u0124\11\306\1\u0184\1\306\1\221\43\306\1\221"+
    "\5\306\13\u0125\1\u0185\6\u0125\1\u011f\43\u0125\1\u011f\5\u0125"+
    "\3\310\1\221\2\310\1\u0126\11\310\1\u0186\1\310\1\221"+
    "\51\310\3\u0127\1\u011f\7\u0127\1\u0187\6\u0127\1\u011f\51\u0127"+
    "\6\u0128\1\u011f\4\u0128\1\u0188\6\u0128\1\u011f\51\u0128\1\54"+
    "\2\0\1\54\1\0\1\54\5\0\6\54\1\0\2\54"+
    "\1\u0189\26\54\1\0\11\54\1\0\2\54\1\0\3\54"+
    "\4\102\1\0\1\102\5\0\6\102\1\0\2\102\1\u018a"+
    "\26\102\1\0\11\102\1\0\6\102\4\u012c\1\u011f\1\u012c"+
    "\4\u011f\1\u012c\1\u018b\5\u012c\2\u011f\51\u012c\4\u012d\1\u011f"+
    "\1\u012d\2\u011f\3\u012d\1\u018c\5\u012d\2\u011f\30\u012d\1\u011f"+
    "\1\u012d\1\u011f\16\u012d\23\0\1\u018d\77\0\1\u018e\110\0"+
    "\1\u018f\15\0\1\u018f\7\0\1\u018f\30\0\1\u0190\67\0"+
    "\1\u0191\100\0\1\u0192\4\0\1\u0193\102\0\1\u0194\15\0"+
    "\1\u0194\7\0\1\u0194\26\0\1\u0195\112\0\1\u0196\15\0"+
    "\1\u0196\7\0\1\u0196\42\0\1\u0197\60\0\1\u0198\20\0"+
    "\1\320\67\0\1\u0199\15\0\1\u0199\57\0\1\u019a\77\0"+
    "\1\u019b\12\0\1\u019b\44\0\1\u019c\64\0\1\320\72\0"+
    "\1\u018f\113\0\1\u019d\55\0\1\u019e\10\0\1\u019f\77\0"+
    "\1\u01a0\1\320\14\0\1\u01a0\7\0\1\u01a0\24\0\1\u01a1"+
    "\16\0\1\u01a2\15\0\1\u01a2\37\0\1\u01a3\104\0\1\u01a4"+
    "\76\0\1\u01a5\56\0\1\u01a6\26\0\1\u01a7\56\0\1\u01a8"+
    "\7\0\1\u01a9\55\0\1\u01aa\3\0\1\u01a7\23\0\1\u01a7"+
    "\11\0\1\u01a7\41\0\1\u01ab\57\0\1\u01ac\77\0\1\222"+
    "\71\0\1\u01ad\112\0\1\u01ae\15\0\1\u01ae\7\0\1\u01ae"+
    "\34\0\1\u01af\23\0\1\u01af\11\0\1\u01af\31\0\1\u01b0"+
    "\67\0\1\u01b1\102\0\1\222\70\0\1\222\3\0\1\231"+
    "\23\0\1\231\11\0\1\231\47\0\1\u015c\60\0\1\u01b2"+
    "\106\0\1\222\47\0\1\222\113\0\1\u01b3\2\0\1\u01b4"+
    "\15\0\1\u01b4\7\0\1\u01b4\27\0\1\u01b5\12\0\1\u01ae"+
    "\60\0\1\u01b6\113\0\1\u01b7\77\0\1\222\50\0\1\u01b8"+
    "\112\0\1\u01b9\52\0\1\u01ac\103\0\1\u014c\65\0\1\u014e"+
    "\77\0\1\u01ba\23\0\1\u01ba\11\0\1\u01ba\41\0\1\222"+
    "\70\0\1\u010f\36\0\1\u010f\34\0\1\256\36\0\1\256"+
    "\34\0\1\u01bb\36\0\1\u01bb\44\0\1\256\15\0\1\256"+
    "\7\0\1\256\40\0\1\u01bc\101\0\1\377\52\0\1\u01bd"+
    "\50\0\1\u010a\1\0\1\u010b\4\0\1\u010c\3\0\1\u010b"+
    "\4\0\1\u010b\1\0\4\u010b\1\u016d\20\u010b\1\u01be\2\u010b"+
    "\3\0\1\u01bf\4\u010b\1\u01be\1\u010b\61\0\1\u01c0\56\0"+
    "\1\244\65\0\1\u01c1\104\0\1\262\65\0\1\256\70\0"+
    "\1\u01c2\73\0\1\u01c3\112\0\1\u01c4\71\0\1\u01c5\15\0"+
    "\1\u01c5\7\0\1\u01c5\2\0\1\u010a\1\0\1\u010b\4\0"+
    "\1\u010c\3\0\1\u010b\4\0\1\u010b\1\0\10\u010b\1\u01c6"+
    "\4\u010b\1\u01c7\12\u010b\3\0\1\u01c8\1\u01c6\5\u010b\4\0"+
    "\1\146\42\0\1\u01c9\15\0\1\u01ca\50\0\1\u01cb\23\0"+
    "\1\u01cb\11\0\1\u01cb\3\0\1\u01cc\1\u01cd\5\0\1\u010c"+
    "\57\0\1\u01cd\30\0\1\u01ce\103\0\1\u01cf\73\0\1\256"+
    "\61\0\1\u01d0\50\0\13\u011f\1\u01d1\60\u011f\27\0\1\u01d2"+
    "\113\0\1\u017e\72\0\1\u01d3\70\0\1\u0181\15\0\1\u0181"+
    "\12\0\13\u0123\1\u01d4\6\u0123\1\u011f\51\u0123\13\u0125\1\u01d5"+
    "\6\u0125\1\u011f\43\u0125\1\u011f\5\u0125\3\u0127\1\u011f\7\u0127"+
    "\1\u01d6\6\u0127\1\u011f\51\u0127\6\u0128\1\u011f\4\u0128\1\u01d7"+
    "\6\u0128\1\u011f\51\u0128\1\54\2\0\1\54\1\0\1\54"+
    "\5\0\6\54\1\0\1\54\1\u01d8\27\54\1\0\11\54"+
    "\1\0\2\54\1\0\3\54\4\102\1\0\1\102\5\0"+
    "\6\102\1\0\1\102\1\u01d9\27\102\1\0\11\102\1\0"+
    "\6\102\4\u012c\1\u011f\1\u012c\4\u011f\1\u012c\1\u01da\5\u012c"+
    "\2\u011f\51\u012c\4\u012d\1\u011f\1\u012d\2\u011f\3\u012d\1\u01db"+
    "\5\u012d\2\u011f\30\u012d\1\u011f\1\u012d\1\u011f\16\u012d\37\0"+
    "\1\u01dc\57\0\1\u01dd\77\0\1\320\71\0\1\u01de\112\0"+
    "\1\u01df\15\0\1\u01df\7\0\1\u01df\34\0\1\u01e0\23\0"+
    "\1\u01e0\11\0\1\u01e0\31\0\1\u01e1\67\0\1\u01e2\102\0"+
    "\1\u01e3\70\0\1\320\3\0\1\326\23\0\1\326\11\0"+
    "\1\326\47\0\1\u01e4\31\0\1\320\15\0\1\320\1\0"+
    "\30\u0198\3\0\7\u0198\36\0\1\u01e5\26\0\1\u01e6\47\0"+
    "\1\u01e7\106\0\1\320\47\0\1\320\77\0\1\u01e8\107\0"+
    "\1\u01e9\2\0\1\u01ea\15\0\1\u01ea\7\0\1\u01ea\27\0"+
    "\1\u01eb\12\0\1\u01df\64\0\1\u01ec\67\0\1\u01ed\113\0"+
    "\1\u01ee\77\0\1\320\50\0\1\u01ef\112\0\1\u01f0\52\0"+
    "\1\u01dd\103\0\1\u018f\65\0\1\u0191\77\0\1\u01f1\23\0"+
    "\1\u01f1\11\0\1\u01f1\41\0\1\320\70\0\1\u0157\36\0"+
    "\1\u0157\34\0\1\222\36\0\1\222\34\0\1\u01f2\36\0"+
    "\1\u01f2\44\0\1\222\15\0\1\222\7\0\1\222\40\0"+
    "\1\u01f3\101\0\1\u014c\52\0\1\u01f4\107\0\1\361\62\0"+
    "\1\u01f5\73\0\1\u01f6\112\0\1\u01f7\65\0\1\u01f8\15\0"+
    "\1\u01f9\50\0\1\u01fa\23\0\1\u01fa\11\0\1\u01fa\27\0"+
    "\1\u01fb\103\0\1\u01fc\73\0\1\222\65\0\1\262\73\0"+
    "\1\u01fd\101\0\1\u01bb\71\0\1\u01fe\23\0\1\u01fe\11\0"+
    "\1\u01fe\31\0\1\u01c1\20\0\1\u01ff\12\0\1\u01ff\11\0"+
    "\1\u010a\1\0\1\u010b\4\0\1\u010c\3\0\1\u010b\4\0"+
    "\1\256\1\0\30\u010b\3\0\7\u010b\46\0\1\u0200\73\0"+
    "\1\u0201\61\0\1\u0202\47\0\1\u0203\1\0\1\u010b\4\0"+
    "\1\u0204\3\0\1\u010b\4\0\1\u010b\1\0\30\u010b\3\0"+
    "\7\u010b\46\0\1\263\67\0\1\146\4\0\1\u0205\16\0"+
    "\1\146\11\0\1\146\41\0\1\u0206\74\0\1\u01c9\76\0"+
    "\1\u01bb\15\0\1\u01bb\12\0\1\u0207\1\u0208\6\u0207\1\u0209"+
    "\3\u0207\1\u01cd\6\u0207\30\u01cd\3\u0207\7\u01cd\23\u0207\1\u01cd"+
    "\6\u0207\30\u01cd\3\u0207\7\u01cd\7\u0207\45\0\1\u01bb\54\0"+
    "\1\u020a\112\0\1\u020b\26\0\13\u011f\1\u01d1\52\u011f\1\u020c"+
    "\5\u011f\43\0\1\u020d\15\0\1\u020d\36\0\1\u020e\47\0"+
    "\13\u0123\1\u01d4\6\u0123\1\u011f\43\u0123\1\u020f\5\u0123\13\u0125"+
    "\1\u01d5\6\u0125\1\u011f\43\u0125\1\u020c\5\u0125\3\u0127\1\u011f"+
    "\7\u0127\1\u01d6\6\u0127\1\u011f\43\u0127\1\u0210\5\u0127\6\u0128"+
    "\1\u011f\4\u0128\1\u01d7\6\u0128\1\u011f\43\u0128\1\u0211\5\u0128"+
    "\1\54\2\0\1\54\1\0\1\54\5\0\6\54\1\0"+
    "\23\54\1\u0212\5\54\1\0\11\54\1\0\2\54\1\0"+
    "\3\54\4\102\1\0\1\102\5\0\6\102\1\0\23\102"+
    "\1\u0213\5\102\1\0\11\102\1\0\6\102\4\u012c\1\u011f"+
    "\1\u012c\4\u011f\1\u012c\1\u01da\5\u012c\2\u011f\43\u012c\1\u0214"+
    "\5\u012c\4\u012d\1\u011f\1\u012d\2\u011f\3\u012d\1\u01db\5\u012d"+
    "\2\u011f\30\u012d\1\u011f\1\u012d\1\u011f\10\u012d\1\u0215\5\u012d"+
    "\34\0\1\u019c\36\0\1\u019c\34\0\1\320\36\0\1\320"+
    "\34\0\1\u0216\36\0\1\u0216\44\0\1\320\15\0\1\320"+
    "\7\0\1\320\40\0\1\u0217\101\0\1\u018f\52\0\1\u0218"+
    "\76\0\1\u01e5\20\0\1\u0219\5\0\1\u021a\4\0\1\u0219"+
    "\62\0\1\u021b\56\0\1\u0130\65\0\1\u01e5\104\0\1\u013d"+
    "\65\0\1\320\70\0\1\u021c\73\0\1\u021d\112\0\1\u021e"+
    "\60\0\1\326\4\0\1\u021f\15\0\1\u0220\1\326\11\0"+
    "\1\326\42\0\1\u0221\15\0\1\u0222\50\0\1\u0223\23\0"+
    "\1\u0223\11\0\1\u0223\27\0\1\u0224\103\0\1\u0225\73\0"+
    "\1\320\65\0\1\361\73\0\1\u0226\101\0\1\u01f2\75\0"+
    "\1\361\73\0\1\u0227\61\0\1\u0228\105\0\1\u0229\74\0"+
    "\1\u01f8\76\0\1\u01f2\15\0\1\u01f2\57\0\1\u01f2\54\0"+
    "\1\u022a\73\0\1\u010f\112\0\1\u022b\54\0\1\u0175\112\0"+
    "\1\u010f\73\0\1\u022c\27\0\1\u0203\6\0\1\u0204\120\0"+
    "\1\u022d\36\0\14\u0207\1\u01cd\5\u0207\1\u022e\30\u01cd\3\u0207"+
    "\7\u01cd\10\u0207\1\u0208\6\u0207\1\u0209\3\u0207\1\u01cd\5\u0207"+
    "\1\u022e\30\u01cd\3\u0207\7\u01cd\7\u0207\43\0\1\u022f\12\0"+
    "\1\u0230\2\0\1\u022f\45\0\1\u0231\23\0\1\u0231\11\0"+
    "\1\u0231\2\0\13\u011f\1\u017d\52\u011f\1\u0149\5\u011f\24\0"+
    "\1\u0232\121\0\1\u0233\21\0\13\u0123\1\u0183\6\u0123\1\u011f"+
    "\43\u0123\1\u0180\5\u0123\3\u0127\1\u011f\7\u0127\1\u0187\6\u0127"+
    "\1\u011f\43\u0127\1\u0186\5\u0127\6\u0128\1\u011f\4\u0128\1\u0188"+
    "\6\u0128\1\u011f\43\u0128\1\u0234\5\u0128\1\54\2\0\1\54"+
    "\1\0\1\54\5\0\6\54\1\0\11\54\1\u0235\17\54"+
    "\1\0\3\54\1\u0235\5\54\1\0\2\54\1\0\1\u0235"+
    "\2\54\4\102\1\0\1\102\5\0\6\102\1\0\11\102"+
    "\1\u0236\17\102\1\0\3\102\1\u0236\5\102\1\0\3\102"+
    "\1\u0236\2\102\4\u012c\1\u011f\1\u012c\4\u011f\1\u012c\1\u018b"+
    "\5\u012c\2\u011f\43\u012c\1\u0237\5\u012c\4\u012d\1\u011f\1\u012d"+
    "\2\u011f\3\u012d\1\u018c\5\u012d\2\u011f\30\u012d\1\u011f\1\u012d"+
    "\1\u011f\10\u012d\1\u0238\5\u012d\27\0\1\u013d\73\0\1\u0239"+
    "\101\0\1\u0216\71\0\1\u023a\23\0\1\u023a\11\0\1\u023a"+
    "\31\0\1\u01e5\20\0\1\u0219\12\0\1\u0219\47\0\1\u023b"+
    "\73\0\1\u023c\61\0\1\u023d\105\0\1\u013e\67\0\1\326"+
    "\4\0\1\u021f\16\0\1\326\11\0\1\326\41\0\1\u023e"+
    "\74\0\1\u0221\76\0\1\u0216\15\0\1\u0216\57\0\1\u0216"+
    "\54\0\1\u023f\73\0\1\u0157\112\0\1\u0157\73\0\1\u0240"+
    "\63\0\1\u015c\101\0\1\u0241\12\0\1\u0242\2\0\1\u0241"+
    "\44\0\1\u0243\74\0\1\u0244\23\0\1\u0244\11\0\1\u0244"+
    "\54\0\1\256\21\0\14\u0207\1\u01cd\5\u0207\1\u022e\4\u01cd"+
    "\1\u0245\23\u01cd\3\u0207\7\u01cd\7\u0207\27\0\1\u0246\107\0"+
    "\1\u022f\15\0\1\u022f\50\0\1\u0247\60\0\1\u0248\50\0"+
    "\1\54\2\0\1\54\1\0\1\54\5\0\6\54\1\0"+
    "\14\54\1\u0249\14\54\1\0\11\54\1\0\2\54\1\0"+
    "\3\54\4\102\1\0\1\102\5\0\6\102\1\0\14\102"+
    "\1\u024a\14\102\1\0\11\102\1\0\6\102\26\0\1\u019c"+
    "\112\0\1\u024b\54\0\1\u01ec\112\0\1\u019c\73\0\1\u024c"+
    "\63\0\1\u01a3\101\0\1\u024d\12\0\1\u024e\2\0\1\u024d"+
    "\45\0\1\u024f\23\0\1\u024f\11\0\1\u024f\31\0\1\u0250"+
    "\107\0\1\u0241\15\0\1\u0241\45\0\1\u0251\22\0\1\u0252"+
    "\1\u0251\11\0\1\u0251\42\0\1\u011e\33\0\14\u0207\1\u01cd"+
    "\6\u0207\14\u01cd\1\u0253\13\u01cd\3\u0207\7\u01cd\7\u0207\37\0"+
    "\1\u0254\50\0\1\u0255\6\0\30\u0255\3\0\7\u0255\54\0"+
    "\1\u0256\26\0\1\54\2\0\1\54\1\0\1\54\5\0"+
    "\1\54\1\u0257\4\54\1\0\1\54\30\u0257\1\0\2\54"+
    "\7\u0257\1\0\2\54\1\0\3\54\4\102\1\0\1\102"+
    "\5\0\1\102\1\u0258\4\102\1\0\1\102\30\u0258\1\0"+
    "\2\102\7\u0258\1\0\6\102\32\0\1\u0259\74\0\1\u025a"+
    "\23\0\1\u025a\11\0\1\u025a\31\0\1\u025b\107\0\1\u024d"+
    "\15\0\1\u024d\52\0\1\u0163\72\0\1\u025c\73\0\1\u025d"+
    "\67\0\1\u0251\23\0\1\u0251\11\0\1\u0251\2\0\14\u0207"+
    "\1\u01cd\6\u0207\3\u01cd\1\u025e\24\u01cd\3\u0207\7\u01cd\7\u0207"+
    "\26\0\1\u025f\100\0\1\u0260\23\0\1\u0260\11\0\1\u0260"+
    "\35\0\1\u0261\22\0\1\u0262\1\u0261\11\0\1\u0261\42\0"+
    "\1\u01aa\72\0\1\u0263\62\0\1\u0264\73\0\1\u0265\45\0"+
    "\14\u0207\1\u01cd\6\u0207\20\u01cd\1\u0266\7\u01cd\3\u0207\1\u0267"+
    "\2\u01cd\1\u0266\3\u01cd\7\u0207\27\0\1\u0268\102\0\1\u0269"+
    "\74\0\1\u026a\67\0\1\u0261\23\0\1\u0261\11\0\1\u0261"+
    "\30\0\1\u026b\74\0\1\355\73\0\1\u026c\44\0\14\u0207"+
    "\1\u01cd\6\u0207\23\u01cd\1\u026d\4\u01cd\3\u0207\7\u01cd\23\u0207"+
    "\1\u01cd\6\u0207\20\u01cd\1\u0266\7\u01cd\3\u0207\3\u01cd\1\u0266"+
    "\3\u01cd\7\u0207\43\0\1\256\15\0\1\256\26\0\1\u026e"+
    "\6\0\30\u026e\3\0\7\u026e\35\0\1\u026f\74\0\1\u0270"+
    "\115\0\1\u0109\12\0\1\u0109\7\0\14\u0207\1\u01cd\6\u0207"+
    "\1\u01cd\1\u0271\26\u01cd\3\u0207\7\u01cd\7\u0207\27\0\1\u0272"+
    "\107\0\1\320\15\0\1\320\12\0\14\u0207\1\u01cd\6\u0207"+
    "\27\u01cd\1\u0273\3\u0207\7\u01cd\7\u0207\51\0\1\u0199\12\0"+
    "\1\u0199\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[34380];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\1\2\0\31\1\1\11\1\1\4\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\11\13\1\1\11\11\1"+
    "\1\11\1\1\1\11\4\1\1\11\2\1\2\0\3\1"+
    "\22\0\1\1\1\0\1\1\1\0\3\1\1\11\1\0"+
    "\2\1\1\0\1\1\4\0\1\11\1\1\3\0\1\11"+
    "\1\0\1\1\1\11\2\1\4\0\2\1\32\0\1\1"+
    "\21\0\1\11\2\0\1\1\1\0\6\1\1\0\4\1"+
    "\1\11\20\0\1\11\46\0\2\1\1\0\2\11\24\0"+
    "\1\1\1\0\13\1\33\0\1\11\41\0\1\1\1\0"+
    "\2\1\6\0\1\1\12\0\1\1\2\0\12\1\13\0"+
    "\2\1\44\0\3\1\4\0\4\1\13\0\10\1\7\0"+
    "\1\1\10\0\1\1\27\0\1\11\4\0\1\1\5\0"+
    "\7\1\5\0\1\1\27\0\1\11\5\1\16\0\1\1"+
    "\1\0\2\1\12\0\1\11\1\0\2\1\20\0\1\1"+
    "\4\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[627];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private ArrayDeque<Integer> stateStack;
    private ArrayDeque<Character> blockStack;
    private String currentStatement;
    private boolean lastCharacterWasWord;
    private Set<String> naryStatements = Set.of("pushif", "prependif", "each", "eachelse", "eachwithindex", "eachwithindexelse", "props");

    private char flipBracket(char bracket){
        switch (bracket) {
            case '{': return '}';
            case '[': return ']';
            case '(': return ')';
            case '<': return '>';
            default: return bracket;
        }
    }

    private void checkLastChar(){
      char chr = yycharat(yylength() - 1);

      lastCharacterWasWord = (chr >= 'a' && chr <= 'z') || (chr >= 'A' && chr <= 'Z') || (chr >= '0' && chr <= '9') || chr == '_';
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RBladeLexer(java.io.Reader in) {
    stateStack = new ArrayDeque<Integer>();
  blockStack = new ArrayDeque<Character>();
  currentStatement = "";
  lastCharacterWasWord = false;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 42: break;
          case 2:
            { lastCharacterWasWord = false;
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 43: break;
          case 3:
            { checkLastChar();
    return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 44: break;
          case 4:
            { lastCharacterWasWord = false;
    return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 45: break;
          case 5:
            { return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 46: break;
          case 6:
            { stateStack.addFirst(yystate());
    blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
    yybegin(STATE_STRING_INTERPOLATED_LITERAL);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 47: break;
          case 7:
            { stateStack.addFirst(yystate());
    blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
    yybegin(STATE_STRING_LITERAL);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 48: break;
          case 8:
            { stateStack.addFirst(yystate());
    yybegin(MATCHED_PARENTHESES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 49: break;
          case 9:
            { currentStatement = "";
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 50: break;
          case 10:
            { if (naryStatements.contains(currentStatement)) {
      return RBladeTypes.RBLADE_STATEMENT_COMMA;
    } else {
      return RBladeTypes.RUBY_EXPRESSION;
    }
            }
          // fall through
          case 51: break;
          case 11:
            { stateStack.addFirst(yystate());
    yybegin(MATCHED_BRACKETS);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 52: break;
          case 12:
            { stateStack.addFirst(yystate());
    yybegin(MATCHED_BRACES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 53: break;
          case 13:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 54: break;
          case 14:
            { return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 55: break;
          case 15:
            { yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 56: break;
          case 16:
            { yybegin(STATE_PROPS_STATEMENT_VALUE);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 57: break;
          case 17:
            { yybegin(STATE_PROPS_STATEMENT_NAME);
    return RBladeTypes.RBLADE_STATEMENT_COMMA;
            }
          // fall through
          case 58: break;
          case 18:
            { if (yycharat(0) == blockStack.getFirst()) {
      blockStack.removeFirst();
      yybegin(stateStack.removeFirst());
    }

    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 59: break;
          case 19:
            { stateStack.addFirst(STATE_STRING_INTERPOLATION);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 60: break;
          case 20:
            { yybegin(stateStack.removeFirst());
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 61: break;
          case 21:
            { stateStack.addFirst(MATCHED_PARENTHESES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 62: break;
          case 22:
            { stateStack.addFirst(MATCHED_BRACKETS);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 63: break;
          case 23:
            { stateStack.addFirst(MATCHED_BRACES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 64: break;
          case 24:
            { lastCharacterWasWord = false;
      yybegin(ERB_STATEMENT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 65: break;
          case 25:
            { lastCharacterWasWord = false;
      yybegin(RBLADE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 66: break;
          case 26:
            { lastCharacterWasWord = false;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 67: break;
          case 27:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 18;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 19;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(STATE_PROPS_STATEMENT_COLON);
    return RBladeTypes.RBLADE_STATEMENT_PROPS_NAME;
            }
          // fall through
          case 68: break;
          case 28:
            { stateStack.addFirst(STATE_STRING_INTERPOLATED_LITERAL);
    yybegin(STATE_STRING_INTERPOLATION);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 69: break;
          case 29:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 16;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 17;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 70: break;
          case 30:
            { if (lastCharacterWasWord) {
          return RBladeTypes.HTML_TEMPLATE;
      }
      checkLastChar();

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 71: break;
          case 31:
            { lastCharacterWasWord = false;
      yybegin(RBLADE_UNSAFE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 72: break;
          case 32:
            { if (lastCharacterWasWord) {
        lastCharacterWasWord = false;
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = false;

      currentStatement = yytext().toString().replaceAll("[^a-zA-Z]", "").toLowerCase();
      yybegin(STATE_RUBY_BLOCK);

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 73: break;
          case 33:
            { if (currentStatement.startsWith("each")) {
      return RBladeTypes.RBLADE_STATEMENT_EACH_IN;
    }

    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 74: break;
          case 34:
            { return RBladeTypes.COMMENT;
            }
          // fall through
          case 75: break;
          case 35:
            { if (lastCharacterWasWord) {
        lastCharacterWasWord = false;
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = false;

      yybegin(STATE_PROPS_STATEMENT_NAME);

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 76: break;
          case 36:
            { lastCharacterWasWord = true;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 77: break;
          case 37:
            { if (lastCharacterWasWord) {
      return RBladeTypes.HTML_TEMPLATE;
  }
  lastCharacterWasWord = true;
  stateStack.addFirst(yystate());
  yybegin(STATE_VERBATIM);
  return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 78: break;
          case 38:
            { lastCharacterWasWord = true;

  return stateStack.isEmpty() ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 79: break;
          case 39:
            { if (lastCharacterWasWord) {
      return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
    }
    lastCharacterWasWord = true;
    yybegin(stateStack.removeFirst());
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 80: break;
          case 40:
            { lastCharacterWasWord = true;
    return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 81: break;
          case 41:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { if (lastCharacterWasWord) {
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = true;
      yybegin(RBLADE_RUBY);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RBlade.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.mwnciau.rblade;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.mwnciau.rblade.psi.RBladeTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayDeque;
import java.util.Set;

public class RBladeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_VERBATIM = 2;
  public static final int RBLADE_RUBY = 4;
  public static final int RBLADE_PRINT = 6;
  public static final int RBLADE_UNSAFE_PRINT = 8;
  public static final int ERB_STATEMENT = 10;
  public static final int STATE_RUBY_BLOCK = 12;
  public static final int STATE_PROPS_STATEMENT_NAME = 14;
  public static final int STATE_PROPS_STATEMENT_COLON = 16;
  public static final int STATE_PROPS_STATEMENT_VALUE = 18;
  public static final int STATE_STRING_LITERAL = 20;
  public static final int STATE_STRING_INTERPOLATED_LITERAL = 22;
  public static final int STATE_STRING_INTERPOLATION = 24;
  public static final int MATCHED_PARENTHESES = 26;
  public static final int MATCHED_BRACKETS = 28;
  public static final int MATCHED_BRACES = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\0\1\7\1\10\1\11\2\0\1\12"+
    "\1\13\2\0\12\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\31\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\31\1\53\1\54\1\55\1\0"+
    "\1\56\1\0\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\57\1\31\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\60\1\61\1\62\1\45\1\46\1\47"+
    "\1\63\1\64\1\52\1\31\1\65\1\0\1\66\2\0"+
    "\5\67\1\70\32\67\1\70\217\67\2\71\115\67\1\72"+
    "\u0200\67\1\70\177\67\13\70\35\67\2\70\5\67\1\70"+
    "\57\67\1\70\312\67\1\73\325\67\1\70\377\67";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\3\2\1\3\1\4\2\5\1\6\1\5"+
    "\15\7\1\5\1\6\1\10\1\6\1\11\1\12\1\13"+
    "\1\14\1\5\1\6\1\5\1\15\1\16\1\17\1\20"+
    "\1\21\5\17\1\22\2\5\1\23\2\5\1\24\1\7"+
    "\5\24\2\5\1\6\1\25\1\26\1\5\1\27\1\30"+
    "\4\5\1\31\1\5\1\32\4\0\1\33\22\0\1\34"+
    "\1\0\1\5\1\0\1\5\2\7\1\0\2\7\1\0"+
    "\1\7\4\0\1\35\1\5\3\0\1\36\1\0\1\5"+
    "\1\7\1\37\2\5\4\0\1\40\1\33\32\0\1\41"+
    "\21\0\1\42\2\0\1\5\1\0\1\5\5\7\1\0"+
    "\4\5\21\0\1\33\46\0\2\41\1\0\1\1\1\43"+
    "\24\0\1\5\1\0\1\5\5\7\1\44\4\5\33\0"+
    "\1\45\41\0\1\41\1\0\2\1\6\0\1\41\12\0"+
    "\1\45\2\0\1\5\1\45\1\7\1\45\2\7\4\5"+
    "\61\0\2\1\1\41\4\0\1\41\3\1\13\0\1\5"+
    "\3\7\4\5\50\0\1\46\4\0\1\43\5\0\1\5"+
    "\2\7\4\5\35\0\1\47\1\45\2\5\2\45\16\0"+
    "\1\50\1\0\2\50\12\0\1\51\1\0\2\51\20\0"+
    "\1\52\4\0\1\53\4\0\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[629];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0a8c"+
    "\0\u0a8c\0\u0a8c\0\u0a8c\0\u0b04\0\u0b40\0\u0b7c\0\u0a8c\0\u0bb8"+
    "\0\u0a8c\0\u0bf4\0\u0a8c\0\u0c30\0\u0780\0\u0c6c\0\u0bb8\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0a8c\0\u0e4c"+
    "\0\u0c30\0\u0780\0\u0e88\0\u0bb8\0\u0ec4\0\u0f00\0\u0f3c\0\u0780"+
    "\0\u0bb8\0\u0a8c\0\u0f78\0\u0a8c\0\u0a8c\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u0a8c\0\u10a4\0\u0bb8\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\u1770\0\u17ac\0\u07f8\0\u17e8\0\u1824\0\u1860\0\u189c\0\u0a50"+
    "\0\u18d8\0\u1914\0\u1950\0\u0a8c\0\u198c\0\u1644\0\u19c8\0\u0c6c"+
    "\0\u0a8c\0\u0ca8\0\u1a04\0\u0a8c\0\u0a8c\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238"+
    "\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418"+
    "\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8"+
    "\0\u2634\0\u0a8c\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\u0a8c\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20"+
    "\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00"+
    "\0\u2d3c\0\u2d78\0\u0a8c\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4"+
    "\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264"+
    "\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444"+
    "\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624"+
    "\0\u3660\0\u369c\0\u36d8\0\u3714\0\u0a8c\0\u0a8c\0\u3750\0\u378c"+
    "\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c"+
    "\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c"+
    "\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c"+
    "\0\u3d68\0\u3da4\0\u28c8\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0"+
    "\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0"+
    "\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290"+
    "\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470"+
    "\0\u44ac\0\u44e8\0\u0a8c\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614"+
    "\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4"+
    "\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4"+
    "\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4"+
    "\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94"+
    "\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74"+
    "\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118\0\u5154"+
    "\0\u5190\0\u0618\0\u51cc\0\u5208\0\u5244\0\u0708\0\u5280\0\u0834"+
    "\0\u52bc\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460"+
    "\0\u549c\0\u54d8\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640"+
    "\0\u567c\0\u56b8\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820"+
    "\0\u585c\0\u5898\0\u58d4\0\u5910\0\u594c\0\u5988\0\u59c4\0\u5a00"+
    "\0\u5a3c\0\u5a78\0\u5ab4\0\u5af0\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0"+
    "\0\u5c1c\0\u5c58\0\u5c94\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0"+
    "\0\u5dfc\0\u5e38\0\u5e74\0\u5eb0\0\u5eec\0\u5f28\0\u5f64\0\u5fa0"+
    "\0\u5fdc\0\u6018\0\u4d58\0\u6054\0\u6090\0\u60cc\0\u6108\0\u1374"+
    "\0\u6144\0\u6180\0\u61bc\0\u61f8\0\u6234\0\u6270\0\u62ac\0\u62e8"+
    "\0\u6324\0\u6360\0\u639c\0\u63d8\0\u6414\0\u6450\0\u648c\0\u64c8"+
    "\0\u6504\0\u6540\0\u657c\0\u65b8\0\u65f4\0\u6630\0\u666c\0\u66a8"+
    "\0\u66e4\0\u6720\0\u675c\0\u6798\0\u67d4\0\u6810\0\u684c\0\u6888"+
    "\0\u68c4\0\u6900\0\u693c\0\u6978\0\u69b4\0\u69f0\0\u6a2c\0\u6a68"+
    "\0\u6aa4\0\u6ae0\0\u6b1c\0\u6b58\0\u6b94\0\u6bd0\0\u6c0c\0\u6c48"+
    "\0\u6c84\0\u6cc0\0\u6cfc\0\u6d38\0\u6d74\0\u6db0\0\u6dec\0\u6e28"+
    "\0\u5fa0\0\u6e64\0\u6ea0\0\u6edc\0\u6f18\0\u0a8c\0\u6144\0\u6f54"+
    "\0\u6f90\0\u6fcc\0\u6f90\0\u7008\0\u7044\0\u7080\0\u70bc\0\u70f8"+
    "\0\u7134\0\u7170\0\u71ac\0\u71e8\0\u7224\0\u7260\0\u729c\0\u72d8"+
    "\0\u7314\0\u7350\0\u738c\0\u73c8\0\u57a8\0\u7404\0\u7440\0\u747c"+
    "\0\u74b8\0\u74f4\0\u7530\0\u756c\0\u75a8\0\u75e4\0\u7620\0\u765c"+
    "\0\u7698\0\u76d4\0\u7710\0\u774c\0\u7788\0\u77c4\0\u7800\0\u783c"+
    "\0\u7878\0\u78b4\0\u78f0\0\u792c\0\u0a8c\0\u0924\0\u7968\0\u79a4"+
    "\0\u0f78\0\u102c\0\u79e0\0\u7a1c\0\u7a58\0\u7a94\0\u7ad0\0\u7b0c"+
    "\0\u7b48\0\u7b84\0\u7bc0\0\u7bfc\0\u7c38\0\u7c74\0\u7cb0\0\u7cec"+
    "\0\u7d28\0\u7d64\0\u7da0\0\u7ddc\0\u7e18\0\u7e54\0\u7e90\0\u7ecc"+
    "\0\u7f08\0\u7f44\0\u7f80\0\u7fbc\0\u7ff8\0\u8034\0\u0a8c\0\u8070"+
    "\0\u0a14\0\u0d20\0\u80ac\0\u80e8\0\u8124\0\u8160\0\u819c\0\u81d8"+
    "\0\u8214\0\u8250\0\u828c\0\u82c8\0\u8304\0\u8340\0\u837c\0\u83b8"+
    "\0\u83f4\0\u8430\0\u846c\0\u84a8\0\u84e4\0\u8520\0\u855c\0\u0a8c"+
    "\0\u8598\0\u85d4\0\u8610\0\u864c\0\u0a8c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[629];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\16\25\1\26\3\25\1\27\42\25\1\30\6\25\22\31"+
    "\1\32\51\31\16\33\1\34\3\33\1\35\42\33\1\36"+
    "\6\33\16\37\1\40\3\37\1\41\42\37\1\42\1\43"+
    "\5\37\3\44\1\45\12\44\1\46\3\44\1\41\42\44"+
    "\1\47\6\44\6\50\1\51\7\50\1\52\3\50\1\41"+
    "\42\50\1\53\6\50\1\54\2\55\1\54\1\56\1\54"+
    "\1\57\1\60\1\61\1\62\1\63\3\54\1\64\2\54"+
    "\1\65\1\66\30\54\1\67\11\54\1\70\2\54\1\55"+
    "\3\54\1\71\2\72\6\71\1\73\4\71\1\74\3\71"+
    "\1\75\30\76\3\71\7\76\1\77\2\71\1\72\4\71"+
    "\2\100\12\71\1\101\1\74\3\71\1\75\42\71\1\77"+
    "\2\71\1\100\3\71\1\102\2\103\1\102\1\56\1\102"+
    "\1\57\1\60\1\61\1\62\1\104\3\102\1\105\2\102"+
    "\1\65\1\106\30\102\1\67\11\102\1\70\2\102\1\103"+
    "\3\102\14\107\1\110\1\107\1\111\3\107\1\112\30\110"+
    "\1\107\1\113\2\107\6\110\1\114\1\107\5\110\5\107"+
    "\1\115\6\107\1\110\1\107\1\111\3\107\1\112\30\110"+
    "\1\107\1\113\2\107\6\110\1\114\1\107\5\110\4\116"+
    "\1\56\1\116\1\57\1\60\6\116\1\117\2\116\1\65"+
    "\1\120\42\116\1\121\1\122\5\116\4\123\1\56\1\123"+
    "\1\57\1\60\1\124\1\125\4\123\1\126\2\123\1\65"+
    "\1\120\42\123\1\127\6\123\4\130\1\56\1\130\1\57"+
    "\1\60\6\130\1\131\2\130\1\65\1\120\30\130\1\132"+
    "\1\130\1\125\7\130\1\133\6\130\4\116\1\56\1\116"+
    "\1\57\1\60\6\116\1\117\2\116\1\65\1\120\42\116"+
    "\1\134\1\125\5\116\16\0\1\135\3\0\1\136\51\0"+
    "\74\22\23\0\30\137\3\0\7\137\24\0\1\140\56\0"+
    "\16\25\1\0\3\25\1\0\42\25\1\0\6\25\6\0"+
    "\1\141\107\0\1\142\1\0\1\143\1\144\1\145\1\146"+
    "\1\147\2\0\1\150\2\0\1\151\1\152\1\153\1\154"+
    "\1\0\1\155\1\156\1\0\1\157\1\160\1\161\6\0"+
    "\1\150\1\0\1\155\1\156\1\161\1\0\1\162\3\0"+
    "\1\150\1\156\4\0\1\163\61\0\1\164\6\0\22\31"+
    "\1\0\51\31\27\0\1\165\44\0\22\33\1\0\57\33"+
    "\1\166\13\33\1\0\51\33\27\0\1\167\17\0\1\160"+
    "\24\0\22\33\1\0\42\33\1\170\6\33\22\37\1\0"+
    "\43\37\1\0\13\37\1\171\13\37\1\0\43\37\1\0"+
    "\5\37\47\0\1\160\24\0\22\37\1\0\42\37\1\172"+
    "\1\0\5\37\66\0\1\73\5\0\3\44\1\0\16\44"+
    "\1\0\51\44\3\0\1\173\70\0\3\44\1\0\2\44"+
    "\1\174\13\44\1\0\54\44\1\0\16\44\1\0\42\44"+
    "\1\175\6\44\6\50\1\0\13\50\1\0\51\50\20\0"+
    "\1\73\53\0\6\50\1\176\13\50\1\0\57\50\1\0"+
    "\13\50\1\0\42\50\1\177\6\50\1\54\2\0\1\54"+
    "\1\0\1\54\5\0\6\54\1\0\31\54\1\0\11\54"+
    "\1\0\2\54\1\0\3\54\1\0\2\200\30\0\1\201"+
    "\23\0\1\201\10\0\1\200\1\201\76\0\14\56\1\0"+
    "\6\56\10\0\1\202\6\0\1\202\5\0\1\202\2\0"+
    "\4\56\2\203\1\202\2\203\1\202\2\56\5\0\1\54"+
    "\2\0\1\54\1\0\1\54\1\176\4\0\6\54\1\0"+
    "\31\54\1\0\11\54\1\0\2\54\1\0\3\54\74\204"+
    "\1\54\2\0\1\54\1\0\1\54\5\0\6\54\1\0"+
    "\25\54\1\205\3\54\1\0\11\54\1\0\2\54\1\0"+
    "\3\54\65\0\1\206\7\0\2\72\65\0\1\72\11\0"+
    "\1\176\66\0\2\207\11\0\1\210\1\211\5\0\30\210"+
    "\3\0\7\210\3\0\1\207\4\0\2\212\12\0\1\101"+
    "\52\0\1\212\4\0\2\101\65\0\1\101\3\0\4\102"+
    "\1\0\1\102\5\0\6\102\1\0\31\102\1\0\11\102"+
    "\1\0\7\102\2\103\1\102\1\0\1\102\4\0\1\104"+
    "\6\102\1\0\31\102\1\0\11\102\1\0\2\102\1\103"+
    "\3\102\1\0\2\104\65\0\1\104\3\0\4\102\1\0"+
    "\1\102\1\176\4\0\6\102\1\0\31\102\1\0\11\102"+
    "\1\0\12\102\1\0\1\102\5\0\6\102\1\0\25\102"+
    "\1\213\3\102\1\0\11\102\1\0\6\102\14\0\1\110"+
    "\6\0\30\110\4\0\6\110\2\0\5\110\74\214\65\0"+
    "\1\215\6\0\4\116\1\0\1\116\2\0\11\116\2\0"+
    "\42\116\2\0\11\116\1\0\1\116\1\176\1\0\11\116"+
    "\2\0\42\116\2\0\5\116\4\123\1\0\1\123\4\0"+
    "\7\123\2\0\55\123\1\0\1\123\1\176\3\0\7\123"+
    "\2\0\55\123\1\0\1\123\4\0\7\123\2\0\42\123"+
    "\1\216\6\123\4\130\1\0\1\130\2\0\11\130\2\0"+
    "\30\130\1\0\1\130\1\0\22\130\1\0\1\130\1\176"+
    "\1\0\11\130\2\0\30\130\1\0\1\130\1\0\22\130"+
    "\1\0\1\130\2\0\11\130\2\0\30\130\1\0\1\130"+
    "\1\0\7\130\1\217\6\130\6\0\1\220\107\0\1\221"+
    "\42\0\1\222\22\0\1\137\6\0\30\137\3\0\7\137"+
    "\10\0\2\140\65\0\1\140\10\0\1\223\1\224\10\0"+
    "\1\225\100\0\1\226\1\227\1\230\1\231\1\232\2\0"+
    "\1\233\2\0\1\234\1\235\1\236\1\237\1\0\1\240"+
    "\1\241\1\0\1\242\1\0\1\243\6\0\1\233\1\0"+
    "\1\240\1\241\1\243\5\0\1\233\1\241\36\0\1\244"+
    "\5\0\1\245\15\0\1\245\35\0\1\246\6\0\1\247"+
    "\2\0\1\250\65\0\1\251\3\0\1\252\23\0\1\252"+
    "\11\0\1\252\25\0\1\253\11\0\1\254\1\255\1\256"+
    "\74\0\1\257\63\0\1\260\72\0\1\261\73\0\1\262"+
    "\3\0\1\263\23\0\1\263\11\0\1\263\37\0\1\264"+
    "\1\0\1\265\57\0\1\266\17\0\1\267\2\0\1\270"+
    "\12\0\1\267\41\0\1\271\16\0\1\272\54\0\1\273"+
    "\2\0\1\274\12\0\1\275\65\0\1\276\63\0\1\277"+
    "\76\0\1\300\44\0\1\301\61\0\1\224\11\0\1\302"+
    "\103\0\1\303\117\0\1\304\34\0\5\33\1\305\14\33"+
    "\1\0\51\33\37\0\1\306\34\0\13\33\1\307\6\33"+
    "\1\0\51\33\5\37\1\310\14\37\1\0\43\37\1\0"+
    "\20\37\1\311\6\37\1\0\43\37\1\0\5\37\3\44"+
    "\1\0\1\44\1\312\14\44\1\0\54\44\1\0\7\44"+
    "\1\313\6\44\1\0\51\44\5\0\1\223\66\0\6\50"+
    "\1\0\4\50\1\314\6\50\1\0\51\50\37\0\1\315"+
    "\34\0\14\56\1\0\6\56\30\0\4\56\6\0\2\56"+
    "\5\0\14\60\1\0\6\60\30\0\4\60\6\0\2\60"+
    "\5\0\1\54\2\0\1\54\1\0\1\54\5\0\6\54"+
    "\1\0\5\54\1\316\23\54\1\0\11\54\1\0\2\54"+
    "\1\0\3\54\1\0\2\207\12\0\1\211\52\0\1\207"+
    "\3\0\4\102\1\0\1\102\5\0\6\102\1\0\5\102"+
    "\1\317\23\102\1\0\11\102\1\0\6\102\4\123\1\0"+
    "\1\123\4\0\1\123\1\320\5\123\2\0\51\123\4\130"+
    "\1\0\1\130\2\0\3\130\1\321\5\130\2\0\30\130"+
    "\1\0\1\130\1\0\16\130\6\0\1\322\111\0\1\323"+
    "\1\324\1\325\1\326\1\327\2\0\1\330\2\0\1\331"+
    "\1\332\1\333\1\334\1\0\1\335\1\336\1\0\1\337"+
    "\1\0\1\340\6\0\1\330\1\0\1\335\1\336\1\340"+
    "\5\0\1\330\1\336\4\0\1\341\61\0\1\322\6\0"+
    "\6\223\1\342\65\223\74\224\17\0\1\343\111\0\1\344"+
    "\5\0\1\345\15\0\1\345\35\0\1\346\6\0\1\347"+
    "\2\0\1\350\65\0\1\351\3\0\1\352\23\0\1\352"+
    "\11\0\1\352\25\0\1\353\11\0\1\354\1\355\1\356"+
    "\74\0\1\357\63\0\1\224\72\0\1\360\73\0\1\361"+
    "\3\0\1\362\23\0\1\362\11\0\1\362\37\0\1\363"+
    "\1\0\1\364\57\0\1\365\17\0\1\366\2\0\1\367"+
    "\12\0\1\366\41\0\1\370\16\0\1\371\54\0\1\372"+
    "\2\0\1\373\12\0\1\374\65\0\1\375\66\0\1\376"+
    "\64\0\1\377\77\0\1\u0100\110\0\1\u0101\15\0\1\u0101"+
    "\7\0\1\u0101\30\0\1\u0102\67\0\1\u0103\100\0\1\u0104"+
    "\4\0\1\u0105\102\0\1\u0106\15\0\1\u0106\7\0\1\u0106"+
    "\26\0\1\u0107\112\0\1\u0108\15\0\1\u0108\7\0\1\u0108"+
    "\42\0\1\u0109\60\0\1\u010a\20\0\1\260\67\0\1\u010b"+
    "\15\0\1\u010b\13\0\1\u010c\1\0\1\u010d\4\0\1\u010e"+
    "\3\0\1\u010d\4\0\1\u010d\1\0\30\u010d\3\0\7\u010d"+
    "\54\0\1\u010f\77\0\1\u0110\12\0\1\u0110\44\0\1\u0111"+
    "\64\0\1\260\72\0\1\u0101\113\0\1\u0112\55\0\1\u0113"+
    "\10\0\1\u0114\77\0\1\u0115\1\260\14\0\1\u0115\7\0"+
    "\1\u0115\24\0\1\u0116\16\0\1\u0117\15\0\1\u0117\37\0"+
    "\1\u0118\104\0\1\u0119\76\0\1\u011a\56\0\1\u011b\26\0"+
    "\1\u011c\56\0\1\u011d\7\0\1\u011e\71\0\1\u011f\15\0"+
    "\1\u011f\41\0\1\u0120\3\0\1\u011c\23\0\1\u011c\11\0"+
    "\1\u011c\5\0\1\224\103\0\1\u0121\106\0\1\u0122\45\0"+
    "\6\305\1\u0123\13\305\1\223\51\305\26\0\1\u0124\45\0"+
    "\13\33\1\u0125\6\33\1\0\51\33\6\310\1\u0126\13\310"+
    "\1\223\43\310\1\223\5\310\13\37\1\u0127\6\37\1\0"+
    "\43\37\1\0\5\37\3\312\1\223\2\312\1\u0128\13\312"+
    "\1\223\51\312\3\44\1\0\7\44\1\u0129\6\44\1\0"+
    "\51\44\6\50\1\0\4\50\1\u012a\6\50\1\0\51\50"+
    "\1\0\2\u012b\65\0\1\u012b\3\0\1\54\2\0\1\54"+
    "\1\0\1\54\5\0\6\54\1\0\21\54\1\u012c\7\54"+
    "\1\0\5\54\1\u012c\3\54\1\0\2\54\1\0\3\54"+
    "\4\102\1\0\1\102\5\0\6\102\1\0\21\102\1\u012d"+
    "\7\102\1\0\5\102\1\u012d\3\102\1\0\6\102\4\123"+
    "\1\0\1\123\4\0\1\123\1\u012e\5\123\2\0\51\123"+
    "\4\130\1\0\1\130\2\0\3\130\1\u012f\5\130\2\0"+
    "\30\130\1\0\1\130\1\0\16\130\35\0\1\u0130\5\0"+
    "\1\u0131\15\0\1\u0131\35\0\1\u0132\6\0\1\u0133\2\0"+
    "\1\u0134\65\0\1\u0135\3\0\1\u0136\23\0\1\u0136\11\0"+
    "\1\u0136\25\0\1\u0137\11\0\1\u0138\1\u0139\1\u013a\74\0"+
    "\1\u013b\63\0\1\322\72\0\1\u013c\73\0\1\u013d\3\0"+
    "\1\u013e\23\0\1\u013e\11\0\1\u013e\37\0\1\u013f\1\0"+
    "\1\u0140\57\0\1\u0141\17\0\1\u0142\2\0\1\u0143\12\0"+
    "\1\u0142\41\0\1\u0144\16\0\1\u0145\54\0\1\u0146\2\0"+
    "\1\u0147\12\0\1\u0148\65\0\1\u0149\66\0\1\u014a\44\0"+
    "\1\322\70\0\6\223\1\342\11\223\1\u014b\53\223\23\0"+
    "\1\u014c\77\0\1\u014d\110\0\1\u014e\15\0\1\u014e\7\0"+
    "\1\u014e\30\0\1\u014f\67\0\1\u0150\100\0\1\u0151\4\0"+
    "\1\u0152\102\0\1\u0153\15\0\1\u0153\7\0\1\u0153\26\0"+
    "\1\u0154\112\0\1\u0155\15\0\1\u0155\7\0\1\u0155\42\0"+
    "\1\u0156\60\0\1\224\20\0\1\224\67\0\1\224\15\0"+
    "\1\224\57\0\1\u0157\77\0\1\u0158\12\0\1\u0158\44\0"+
    "\1\u0159\64\0\1\224\72\0\1\u014e\113\0\1\353\55\0"+
    "\1\u015a\10\0\1\u015b\77\0\1\u0154\1\224\14\0\1\u0154"+
    "\7\0\1\u0154\24\0\1\u015c\16\0\1\u015d\15\0\1\u015d"+
    "\37\0\1\u015e\104\0\1\u015f\76\0\1\u0160\56\0\1\u0161"+
    "\26\0\1\u0162\56\0\1\u0163\7\0\1\u0164\55\0\1\u0165"+
    "\3\0\1\u0162\23\0\1\u0162\11\0\1\u0162\41\0\1\u0166"+
    "\57\0\1\u0167\77\0\1\260\71\0\1\u0168\112\0\1\u0169"+
    "\15\0\1\u0169\7\0\1\u0169\34\0\1\u016a\23\0\1\u016a"+
    "\11\0\1\u016a\31\0\1\u016b\67\0\1\u016c\102\0\1\u016d"+
    "\70\0\1\260\3\0\1\150\23\0\1\150\11\0\1\150"+
    "\47\0\1\u016e\27\0\1\u010c\1\0\1\260\4\0\1\u010e"+
    "\3\0\1\u010d\4\0\1\260\1\0\30\u010a\3\0\7\u010a"+
    "\10\0\1\u010c\1\0\1\u010d\4\0\1\u010e\3\0\1\u010d"+
    "\4\0\1\u010d\1\0\4\u010d\1\u016f\23\u010d\3\0\1\u0170"+
    "\6\u010d\10\0\1\u010c\6\0\1\u010e\115\0\1\u0171\106\0"+
    "\1\260\47\0\1\260\77\0\1\u0172\107\0\1\u0173\2\0"+
    "\1\u0174\15\0\1\u0174\7\0\1\u0174\27\0\1\u0175\12\0"+
    "\1\u0176\64\0\1\u0177\67\0\1\u0178\113\0\1\u0179\77\0"+
    "\1\u017a\50\0\1\u017b\112\0\1\u017c\52\0\1\u0167\103\0"+
    "\1\u0101\65\0\1\u0103\77\0\1\u017d\23\0\1\u017d\11\0"+
    "\1\u017d\26\0\1\u017e\106\0\1\260\34\0\13\u0121\1\u017f"+
    "\60\u0121\47\0\1\u0180\6\0\1\u0181\15\0\6\305\1\u0123"+
    "\11\305\1\u0182\1\305\1\223\51\305\43\0\1\u0183\12\0"+
    "\1\u0184\2\0\1\u0183\12\0\13\u0125\1\u0185\6\u0125\1\u0121"+
    "\51\u0125\6\310\1\u0126\11\310\1\u0186\1\310\1\223\43\310"+
    "\1\223\5\310\13\u0127\1\u0187\6\u0127\1\u0121\43\u0127\1\u0121"+
    "\5\u0127\3\312\1\223\2\312\1\u0128\11\312\1\u0188\1\312"+
    "\1\223\51\312\3\u0129\1\u0121\7\u0129\1\u0189\6\u0129\1\u0121"+
    "\51\u0129\6\u012a\1\u0121\4\u012a\1\u018a\6\u012a\1\u0121\51\u012a"+
    "\1\54\2\0\1\54\1\0\1\54\5\0\6\54\1\0"+
    "\2\54\1\u018b\26\54\1\0\11\54\1\0\2\54\1\0"+
    "\3\54\4\102\1\0\1\102\5\0\6\102\1\0\2\102"+
    "\1\u018c\26\102\1\0\11\102\1\0\6\102\4\u012e\1\u0121"+
    "\1\u012e\4\u0121\1\u012e\1\u018d\5\u012e\2\u0121\51\u012e\4\u012f"+
    "\1\u0121\1\u012f\2\u0121\3\u012f\1\u018e\5\u012f\2\u0121\30\u012f"+
    "\1\u0121\1\u012f\1\u0121\16\u012f\23\0\1\u018f\77\0\1\u0190"+
    "\110\0\1\u0191\15\0\1\u0191\7\0\1\u0191\30\0\1\u0192"+
    "\67\0\1\u0193\100\0\1\u0194\4\0\1\u0195\102\0\1\u0196"+
    "\15\0\1\u0196\7\0\1\u0196\26\0\1\u0197\112\0\1\u0198"+
    "\15\0\1\u0198\7\0\1\u0198\42\0\1\u0199\60\0\1\u019a"+
    "\20\0\1\322\67\0\1\u019b\15\0\1\u019b\57\0\1\u019c"+
    "\77\0\1\u019d\12\0\1\u019d\44\0\1\u019e\64\0\1\322"+
    "\72\0\1\u0191\113\0\1\u019f\55\0\1\u01a0\10\0\1\u01a1"+
    "\77\0\1\u01a2\1\322\14\0\1\u01a2\7\0\1\u01a2\24\0"+
    "\1\u01a3\16\0\1\u01a4\15\0\1\u01a4\37\0\1\u01a5\104\0"+
    "\1\u01a6\76\0\1\u01a7\56\0\1\u01a8\26\0\1\u01a9\56\0"+
    "\1\u01aa\7\0\1\u01ab\55\0\1\u01ac\3\0\1\u01a9\23\0"+
    "\1\u01a9\11\0\1\u01a9\41\0\1\u01ad\57\0\1\u01ae\77\0"+
    "\1\224\71\0\1\u01af\112\0\1\u01b0\15\0\1\u01b0\7\0"+
    "\1\u01b0\34\0\1\u01b1\23\0\1\u01b1\11\0\1\u01b1\31\0"+
    "\1\u01b2\67\0\1\u01b3\102\0\1\224\70\0\1\224\3\0"+
    "\1\233\23\0\1\233\11\0\1\233\47\0\1\u015e\60\0"+
    "\1\u01b4\106\0\1\224\47\0\1\224\113\0\1\u01b5\2\0"+
    "\1\u01b6\15\0\1\u01b6\7\0\1\u01b6\27\0\1\u01b7\12\0"+
    "\1\u01b0\60\0\1\u01b8\113\0\1\u01b9\77\0\1\224\50\0"+
    "\1\u01ba\112\0\1\u01bb\52\0\1\u01ae\103\0\1\u014e\65\0"+
    "\1\u0150\77\0\1\u01bc\23\0\1\u01bc\11\0\1\u01bc\41\0"+
    "\1\224\70\0\1\u0111\36\0\1\u0111\34\0\1\260\36\0"+
    "\1\260\34\0\1\u01bd\36\0\1\u01bd\44\0\1\260\15\0"+
    "\1\260\7\0\1\260\40\0\1\u01be\101\0\1\u0101\52\0"+
    "\1\u01bf\50\0\1\u010c\1\0\1\u010d\4\0\1\u010e\3\0"+
    "\1\u010d\4\0\1\u010d\1\0\4\u010d\1\u016f\20\u010d\1\u01c0"+
    "\2\u010d\3\0\1\u01c1\4\u010d\1\u01c0\1\u010d\61\0\1\u01c2"+
    "\56\0\1\246\65\0\1\u01c3\104\0\1\264\65\0\1\260"+
    "\70\0\1\u01c4\73\0\1\u01c5\112\0\1\u01c6\71\0\1\u01c7"+
    "\15\0\1\u01c7\7\0\1\u01c7\2\0\1\u010c\1\0\1\u010d"+
    "\4\0\1\u010e\3\0\1\u010d\4\0\1\u010d\1\0\10\u010d"+
    "\1\u01c8\4\u010d\1\u01c9\12\u010d\3\0\1\u01ca\1\u01c8\5\u010d"+
    "\4\0\1\150\42\0\1\u01cb\15\0\1\u01cc\50\0\1\u01cd"+
    "\23\0\1\u01cd\11\0\1\u01cd\3\0\1\u01ce\1\u01cf\5\0"+
    "\1\u010e\57\0\1\u01cf\30\0\1\u01d0\103\0\1\u01d1\73\0"+
    "\1\260\61\0\1\u01d2\50\0\13\u0121\1\u01d3\60\u0121\27\0"+
    "\1\u01d4\113\0\1\u0180\72\0\1\u01d5\70\0\1\u0183\15\0"+
    "\1\u0183\12\0\13\u0125\1\u01d6\6\u0125\1\u0121\51\u0125\13\u0127"+
    "\1\u01d7\6\u0127\1\u0121\43\u0127\1\u0121\5\u0127\3\u0129\1\u0121"+
    "\7\u0129\1\u01d8\6\u0129\1\u0121\51\u0129\6\u012a\1\u0121\4\u012a"+
    "\1\u01d9\6\u012a\1\u0121\51\u012a\1\54\2\0\1\54\1\0"+
    "\1\54\5\0\6\54\1\0\1\54\1\u01da\27\54\1\0"+
    "\11\54\1\0\2\54\1\0\3\54\4\102\1\0\1\102"+
    "\5\0\6\102\1\0\1\102\1\u01db\27\102\1\0\11\102"+
    "\1\0\6\102\4\u012e\1\u0121\1\u012e\4\u0121\1\u012e\1\u01dc"+
    "\5\u012e\2\u0121\51\u012e\4\u012f\1\u0121\1\u012f\2\u0121\3\u012f"+
    "\1\u01dd\5\u012f\2\u0121\30\u012f\1\u0121\1\u012f\1\u0121\16\u012f"+
    "\37\0\1\u01de\57\0\1\u01df\77\0\1\322\71\0\1\u01e0"+
    "\112\0\1\u01e1\15\0\1\u01e1\7\0\1\u01e1\34\0\1\u01e2"+
    "\23\0\1\u01e2\11\0\1\u01e2\31\0\1\u01e3\67\0\1\u01e4"+
    "\102\0\1\u01e5\70\0\1\322\3\0\1\330\23\0\1\330"+
    "\11\0\1\330\47\0\1\u01e6\31\0\1\322\15\0\1\322"+
    "\1\0\30\u019a\3\0\7\u019a\36\0\1\u01e7\26\0\1\u01e8"+
    "\47\0\1\u01e9\106\0\1\322\47\0\1\322\77\0\1\u01ea"+
    "\107\0\1\u01eb\2\0\1\u01ec\15\0\1\u01ec\7\0\1\u01ec"+
    "\27\0\1\u01ed\12\0\1\u01e1\64\0\1\u01ee\67\0\1\u01ef"+
    "\113\0\1\u01f0\77\0\1\322\50\0\1\u01f1\112\0\1\u01f2"+
    "\52\0\1\u01df\103\0\1\u0191\65\0\1\u0193\77\0\1\u01f3"+
    "\23\0\1\u01f3\11\0\1\u01f3\41\0\1\322\70\0\1\u0159"+
    "\36\0\1\u0159\34\0\1\224\36\0\1\224\34\0\1\u01f4"+
    "\36\0\1\u01f4\44\0\1\224\15\0\1\224\7\0\1\224"+
    "\40\0\1\u01f5\101\0\1\u014e\52\0\1\u01f6\107\0\1\363"+
    "\62\0\1\u01f7\73\0\1\u01f8\112\0\1\u01f9\65\0\1\u01fa"+
    "\15\0\1\u01fb\50\0\1\u01fc\23\0\1\u01fc\11\0\1\u01fc"+
    "\27\0\1\u01fd\103\0\1\u01fe\73\0\1\224\65\0\1\264"+
    "\73\0\1\u01ff\101\0\1\u01bd\71\0\1\u0200\23\0\1\u0200"+
    "\11\0\1\u0200\31\0\1\u01c3\20\0\1\u0201\12\0\1\u0201"+
    "\11\0\1\u010c\1\0\1\u010d\4\0\1\u010e\3\0\1\u010d"+
    "\4\0\1\260\1\0\30\u010d\3\0\7\u010d\46\0\1\u0202"+
    "\73\0\1\u0203\61\0\1\u0204\47\0\1\u0205\1\0\1\u010d"+
    "\4\0\1\u0206\3\0\1\u010d\4\0\1\u010d\1\0\30\u010d"+
    "\3\0\7\u010d\46\0\1\265\67\0\1\150\4\0\1\u0207"+
    "\16\0\1\150\11\0\1\150\41\0\1\u0208\74\0\1\u01cb"+
    "\76\0\1\u01bd\15\0\1\u01bd\12\0\1\u0209\1\u020a\6\u0209"+
    "\1\u020b\3\u0209\1\u01cf\6\u0209\30\u01cf\3\u0209\7\u01cf\23\u0209"+
    "\1\u01cf\6\u0209\30\u01cf\3\u0209\7\u01cf\7\u0209\45\0\1\u01bd"+
    "\54\0\1\u020c\112\0\1\u020d\26\0\13\u0121\1\u01d3\52\u0121"+
    "\1\u020e\5\u0121\43\0\1\u020f\15\0\1\u020f\36\0\1\u0210"+
    "\47\0\13\u0125\1\u01d6\6\u0125\1\u0121\43\u0125\1\u0211\5\u0125"+
    "\13\u0127\1\u01d7\6\u0127\1\u0121\43\u0127\1\u020e\5\u0127\3\u0129"+
    "\1\u0121\7\u0129\1\u01d8\6\u0129\1\u0121\43\u0129\1\u0212\5\u0129"+
    "\6\u012a\1\u0121\4\u012a\1\u01d9\6\u012a\1\u0121\43\u012a\1\u0213"+
    "\5\u012a\1\54\2\0\1\54\1\0\1\54\5\0\6\54"+
    "\1\0\23\54\1\u0214\5\54\1\0\11\54\1\0\2\54"+
    "\1\0\3\54\4\102\1\0\1\102\5\0\6\102\1\0"+
    "\23\102\1\u0215\5\102\1\0\11\102\1\0\6\102\4\u012e"+
    "\1\u0121\1\u012e\4\u0121\1\u012e\1\u01dc\5\u012e\2\u0121\43\u012e"+
    "\1\u0216\5\u012e\4\u012f\1\u0121\1\u012f\2\u0121\3\u012f\1\u01dd"+
    "\5\u012f\2\u0121\30\u012f\1\u0121\1\u012f\1\u0121\10\u012f\1\u0217"+
    "\5\u012f\34\0\1\u019e\36\0\1\u019e\34\0\1\322\36\0"+
    "\1\322\34\0\1\u0218\36\0\1\u0218\44\0\1\322\15\0"+
    "\1\322\7\0\1\322\40\0\1\u0219\101\0\1\u0191\52\0"+
    "\1\u021a\76\0\1\u01e7\20\0\1\u021b\5\0\1\u021c\4\0"+
    "\1\u021b\62\0\1\u021d\56\0\1\u0132\65\0\1\u01e7\104\0"+
    "\1\u013f\65\0\1\322\70\0\1\u021e\73\0\1\u021f\112\0"+
    "\1\u0220\60\0\1\330\4\0\1\u0221\15\0\1\u0222\1\330"+
    "\11\0\1\330\42\0\1\u0223\15\0\1\u0224\50\0\1\u0225"+
    "\23\0\1\u0225\11\0\1\u0225\27\0\1\u0226\103\0\1\u0227"+
    "\73\0\1\322\65\0\1\363\73\0\1\u0228\101\0\1\u01f4"+
    "\75\0\1\363\73\0\1\u0229\61\0\1\u022a\105\0\1\u022b"+
    "\74\0\1\u01fa\76\0\1\u01f4\15\0\1\u01f4\57\0\1\u01f4"+
    "\54\0\1\u022c\73\0\1\u0111\112\0\1\u022d\54\0\1\u0177"+
    "\112\0\1\u0111\73\0\1\u022e\27\0\1\u0205\6\0\1\u0206"+
    "\120\0\1\u022f\36\0\14\u0209\1\u01cf\5\u0209\1\u0230\30\u01cf"+
    "\3\u0209\7\u01cf\10\u0209\1\u020a\6\u0209\1\u020b\3\u0209\1\u01cf"+
    "\5\u0209\1\u0230\30\u01cf\3\u0209\7\u01cf\7\u0209\43\0\1\u0231"+
    "\12\0\1\u0232\2\0\1\u0231\45\0\1\u0233\23\0\1\u0233"+
    "\11\0\1\u0233\2\0\13\u0121\1\u017f\52\u0121\1\u014b\5\u0121"+
    "\24\0\1\u0234\121\0\1\u0235\21\0\13\u0125\1\u0185\6\u0125"+
    "\1\u0121\43\u0125\1\u0182\5\u0125\3\u0129\1\u0121\7\u0129\1\u0189"+
    "\6\u0129\1\u0121\43\u0129\1\u0188\5\u0129\6\u012a\1\u0121\4\u012a"+
    "\1\u018a\6\u012a\1\u0121\43\u012a\1\u0236\5\u012a\1\54\2\0"+
    "\1\54\1\0\1\54\5\0\6\54\1\0\11\54\1\u0237"+
    "\17\54\1\0\3\54\1\u0237\5\54\1\0\2\54\1\0"+
    "\1\u0237\2\54\4\102\1\0\1\102\5\0\6\102\1\0"+
    "\11\102\1\u0238\17\102\1\0\3\102\1\u0238\5\102\1\0"+
    "\3\102\1\u0238\2\102\4\u012e\1\u0121\1\u012e\4\u0121\1\u012e"+
    "\1\u018d\5\u012e\2\u0121\43\u012e\1\u0239\5\u012e\4\u012f\1\u0121"+
    "\1\u012f\2\u0121\3\u012f\1\u018e\5\u012f\2\u0121\30\u012f\1\u0121"+
    "\1\u012f\1\u0121\10\u012f\1\u023a\5\u012f\27\0\1\u013f\73\0"+
    "\1\u023b\101\0\1\u0218\71\0\1\u023c\23\0\1\u023c\11\0"+
    "\1\u023c\31\0\1\u01e7\20\0\1\u021b\12\0\1\u021b\47\0"+
    "\1\u023d\73\0\1\u023e\61\0\1\u023f\105\0\1\u0140\67\0"+
    "\1\330\4\0\1\u0221\16\0\1\330\11\0\1\330\41\0"+
    "\1\u0240\74\0\1\u0223\76\0\1\u0218\15\0\1\u0218\57\0"+
    "\1\u0218\54\0\1\u0241\73\0\1\u0159\112\0\1\u0159\73\0"+
    "\1\u0242\63\0\1\u015e\101\0\1\u0243\12\0\1\u0244\2\0"+
    "\1\u0243\44\0\1\u0245\74\0\1\u0246\23\0\1\u0246\11\0"+
    "\1\u0246\54\0\1\260\21\0\14\u0209\1\u01cf\5\u0209\1\u0230"+
    "\4\u01cf\1\u0247\23\u01cf\3\u0209\7\u01cf\7\u0209\27\0\1\u0248"+
    "\107\0\1\u0231\15\0\1\u0231\50\0\1\u0249\60\0\1\u024a"+
    "\50\0\1\54\2\0\1\54\1\0\1\54\5\0\6\54"+
    "\1\0\14\54\1\u024b\14\54\1\0\11\54\1\0\2\54"+
    "\1\0\3\54\4\102\1\0\1\102\5\0\6\102\1\0"+
    "\14\102\1\u024c\14\102\1\0\11\102\1\0\6\102\26\0"+
    "\1\u019e\112\0\1\u024d\54\0\1\u01ee\112\0\1\u019e\73\0"+
    "\1\u024e\63\0\1\u01a5\101\0\1\u024f\12\0\1\u0250\2\0"+
    "\1\u024f\45\0\1\u0251\23\0\1\u0251\11\0\1\u0251\31\0"+
    "\1\u0252\107\0\1\u0243\15\0\1\u0243\45\0\1\u0253\22\0"+
    "\1\u0254\1\u0253\11\0\1\u0253\42\0\1\u0120\33\0\14\u0209"+
    "\1\u01cf\6\u0209\14\u01cf\1\u0255\13\u01cf\3\u0209\7\u01cf\7\u0209"+
    "\37\0\1\u0256\50\0\1\u0257\6\0\30\u0257\3\0\7\u0257"+
    "\54\0\1\u0258\26\0\1\54\2\0\1\54\1\0\1\54"+
    "\5\0\1\54\1\u0259\4\54\1\0\1\54\30\u0259\1\0"+
    "\2\54\7\u0259\1\0\2\54\1\0\3\54\4\102\1\0"+
    "\1\102\5\0\1\102\1\u025a\4\102\1\0\1\102\30\u025a"+
    "\1\0\2\102\7\u025a\1\0\6\102\32\0\1\u025b\74\0"+
    "\1\u025c\23\0\1\u025c\11\0\1\u025c\31\0\1\u025d\107\0"+
    "\1\u024f\15\0\1\u024f\52\0\1\u0165\72\0\1\u025e\73\0"+
    "\1\u025f\67\0\1\u0253\23\0\1\u0253\11\0\1\u0253\2\0"+
    "\14\u0209\1\u01cf\6\u0209\3\u01cf\1\u0260\24\u01cf\3\u0209\7\u01cf"+
    "\7\u0209\26\0\1\u0261\100\0\1\u0262\23\0\1\u0262\11\0"+
    "\1\u0262\35\0\1\u0263\22\0\1\u0264\1\u0263\11\0\1\u0263"+
    "\42\0\1\u01ac\72\0\1\u0265\62\0\1\u0266\73\0\1\u0267"+
    "\45\0\14\u0209\1\u01cf\6\u0209\20\u01cf\1\u0268\7\u01cf\3\u0209"+
    "\1\u0269\2\u01cf\1\u0268\3\u01cf\7\u0209\27\0\1\u026a\102\0"+
    "\1\u026b\74\0\1\u026c\67\0\1\u0263\23\0\1\u0263\11\0"+
    "\1\u0263\30\0\1\u026d\74\0\1\357\73\0\1\u026e\44\0"+
    "\14\u0209\1\u01cf\6\u0209\23\u01cf\1\u026f\4\u01cf\3\u0209\7\u01cf"+
    "\23\u0209\1\u01cf\6\u0209\20\u01cf\1\u0268\7\u01cf\3\u0209\3\u01cf"+
    "\1\u0268\3\u01cf\7\u0209\43\0\1\260\15\0\1\260\26\0"+
    "\1\u0270\6\0\30\u0270\3\0\7\u0270\35\0\1\u0271\74\0"+
    "\1\u0272\115\0\1\u010b\12\0\1\u010b\7\0\14\u0209\1\u01cf"+
    "\6\u0209\1\u01cf\1\u0273\26\u01cf\3\u0209\7\u01cf\7\u0209\27\0"+
    "\1\u0274\107\0\1\322\15\0\1\322\12\0\14\u0209\1\u01cf"+
    "\6\u0209\27\u01cf\1\u0275\3\u0209\7\u01cf\7\u0209\51\0\1\u019b"+
    "\12\0\1\u019b\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[34440];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\1\2\0\31\1\1\11\1\1\4\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\11\13\1\1\11\12\1"+
    "\1\11\1\1\2\11\4\1\1\11\2\1\2\0\3\1"+
    "\22\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\4\0\1\11\1\1\3\0\1\11\1\0"+
    "\1\1\2\11\2\1\4\0\2\1\32\0\1\1\21\0"+
    "\1\11\2\0\1\1\1\0\6\1\1\0\4\1\1\11"+
    "\20\0\1\11\46\0\2\1\1\0\2\11\24\0\1\1"+
    "\1\0\13\1\33\0\1\11\41\0\1\1\1\0\2\1"+
    "\6\0\1\1\12\0\1\1\2\0\12\1\13\0\2\1"+
    "\44\0\3\1\4\0\4\1\13\0\10\1\7\0\1\1"+
    "\10\0\1\1\27\0\1\11\4\0\1\1\5\0\7\1"+
    "\5\0\1\1\27\0\1\11\5\1\16\0\1\1\1\0"+
    "\2\1\12\0\1\11\1\0\2\1\20\0\1\1\4\0"+
    "\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[629];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private ArrayDeque<Integer> stateStack;
    private ArrayDeque<Character> blockStack;
    private String currentStatement;
    private boolean lastCharacterWasWord;
    private Set<String> naryStatements = Set.of("pushif", "prependif", "each", "eachelse", "eachwithindex", "eachwithindexelse", "props");

    private char flipBracket(char bracket){
        switch (bracket) {
            case '{': return '}';
            case '[': return ']';
            case '(': return ')';
            case '<': return '>';
            default: return bracket;
        }
    }

    private void checkLastChar(){
      char chr = yycharat(yylength() - 1);

      lastCharacterWasWord = (chr >= 'a' && chr <= 'z') || (chr >= 'A' && chr <= 'Z') || (chr >= '0' && chr <= '9') || chr == '_';
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RBladeLexer(java.io.Reader in) {
    stateStack = new ArrayDeque<Integer>();
  blockStack = new ArrayDeque<Character>();
  currentStatement = "";
  lastCharacterWasWord = false;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 45: break;
          case 2:
            { lastCharacterWasWord = false;
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 46: break;
          case 3:
            { checkLastChar();
    return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 47: break;
          case 4:
            { lastCharacterWasWord = false;
    return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 48: break;
          case 5:
            { checkLastChar();
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 49: break;
          case 6:
            { lastCharacterWasWord = false;
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 50: break;
          case 7:
            { return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 51: break;
          case 8:
            { stateStack.addFirst(yystate());
    blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
    yybegin(STATE_STRING_INTERPOLATED_LITERAL);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 52: break;
          case 9:
            { stateStack.addFirst(yystate());
    blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
    yybegin(STATE_STRING_LITERAL);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 53: break;
          case 10:
            { lastCharacterWasWord = false;
    stateStack.addFirst(yystate());
    yybegin(MATCHED_PARENTHESES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 54: break;
          case 11:
            { lastCharacterWasWord = false;
    currentStatement = "";
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 55: break;
          case 12:
            { lastCharacterWasWord = false;
    if (naryStatements.contains(currentStatement)) {
      return RBladeTypes.RBLADE_STATEMENT_COMMA;
    } else {
      return RBladeTypes.RUBY_EXPRESSION;
    }
            }
          // fall through
          case 56: break;
          case 13:
            { lastCharacterWasWord = false;
    stateStack.addFirst(yystate());
    yybegin(MATCHED_BRACKETS);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 57: break;
          case 14:
            { lastCharacterWasWord = false;
    stateStack.addFirst(yystate());
    yybegin(MATCHED_BRACES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 58: break;
          case 15:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 59: break;
          case 16:
            { lastCharacterWasWord = false;
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 60: break;
          case 17:
            { lastCharacterWasWord = false;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 61: break;
          case 18:
            { lastCharacterWasWord = false;
    yybegin(STATE_PROPS_STATEMENT_VALUE);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 62: break;
          case 19:
            { lastCharacterWasWord = false;
    yybegin(STATE_PROPS_STATEMENT_NAME);
    return RBladeTypes.RBLADE_STATEMENT_COMMA;
            }
          // fall through
          case 63: break;
          case 20:
            { if (yycharat(0) == blockStack.getFirst()) {
      checkLastChar();
      blockStack.removeFirst();
      yybegin(stateStack.removeFirst());
    }

    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 64: break;
          case 21:
            { lastCharacterWasWord = false;
    stateStack.addFirst(STATE_STRING_INTERPOLATION);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 65: break;
          case 22:
            { yybegin(stateStack.removeFirst());
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 66: break;
          case 23:
            { lastCharacterWasWord = false;
    stateStack.addFirst(MATCHED_PARENTHESES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 67: break;
          case 24:
            { lastCharacterWasWord = false;
    yybegin(stateStack.removeFirst());
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 68: break;
          case 25:
            { lastCharacterWasWord = false;
    stateStack.addFirst(MATCHED_BRACKETS);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 69: break;
          case 26:
            { lastCharacterWasWord = false;
    stateStack.addFirst(MATCHED_BRACES);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 70: break;
          case 27:
            { lastCharacterWasWord = false;
      yybegin(ERB_STATEMENT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 71: break;
          case 28:
            { lastCharacterWasWord = false;
      yybegin(RBLADE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 72: break;
          case 29:
            { if (lastCharacterWasWord) {
      yypushback(1);
    }
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 73: break;
          case 30:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 18;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 19;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(STATE_PROPS_STATEMENT_COLON);
    return RBladeTypes.RBLADE_STATEMENT_PROPS_NAME;
            }
          // fall through
          case 74: break;
          case 31:
            { lastCharacterWasWord = false;
    stateStack.addFirst(STATE_STRING_INTERPOLATED_LITERAL);
    yybegin(STATE_STRING_INTERPOLATION);
    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 75: break;
          case 32:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 16;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 17;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 76: break;
          case 33:
            { if (lastCharacterWasWord) {
          return RBladeTypes.HTML_TEMPLATE;
      }
      checkLastChar();

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 77: break;
          case 34:
            { lastCharacterWasWord = false;
      yybegin(RBLADE_UNSAFE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 78: break;
          case 35:
            { if (lastCharacterWasWord) {
        lastCharacterWasWord = false;
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = false;

      currentStatement = yytext().toString().replaceAll("[^a-zA-Z]", "").toLowerCase();
      yybegin(STATE_RUBY_BLOCK);

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 79: break;
          case 36:
            { lastCharacterWasWord = false;
    if (currentStatement.startsWith("each")) {
      return RBladeTypes.RBLADE_STATEMENT_EACH_IN;
    }

    return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 80: break;
          case 37:
            { return RBladeTypes.COMMENT;
            }
          // fall through
          case 81: break;
          case 38:
            { if (lastCharacterWasWord) {
        lastCharacterWasWord = false;
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = false;

      yybegin(STATE_PROPS_STATEMENT_NAME);

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 82: break;
          case 39:
            { lastCharacterWasWord = true;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 83: break;
          case 40:
            { if (lastCharacterWasWord) {
      return RBladeTypes.HTML_TEMPLATE;
  }
  lastCharacterWasWord = true;
  stateStack.addFirst(yystate());
  yybegin(STATE_VERBATIM);
  return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 84: break;
          case 41:
            { lastCharacterWasWord = true;

  return stateStack.isEmpty() ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 85: break;
          case 42:
            { if (lastCharacterWasWord) {
      return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
    }
    lastCharacterWasWord = true;
    yybegin(stateStack.removeFirst());
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 86: break;
          case 43:
            { lastCharacterWasWord = true;
    return stateStack.getFirst() == YYINITIAL ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 87: break;
          case 44:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { if (lastCharacterWasWord) {
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = true;
      yybegin(RBLADE_RUBY);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

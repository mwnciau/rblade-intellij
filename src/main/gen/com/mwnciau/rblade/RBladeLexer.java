// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RBlade.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.mwnciau.rblade;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.mwnciau.rblade.psi.RBladeTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayDeque;
import java.util.Set;

public class RBladeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_VERBATIM = 2;
  public static final int RBLADE_RUBY = 4;
  public static final int RBLADE_PRINT = 6;
  public static final int RBLADE_UNSAFE_PRINT = 8;
  public static final int ERB_STATEMENT = 10;
  public static final int STATE_RUBY_BLOCK = 12;
  public static final int STATE_RUBY_BLOCK_END = 14;
  public static final int STATE_STRING_LITERAL = 16;
  public static final int STATE_STRING_LITERAL_INTERPOLATION = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\0\1\4\1\7\1\10\2\0\1\11"+
    "\1\12\1\0\1\13\12\14\1\15\1\0\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\31\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\31\1\53\1\54\1\55"+
    "\1\0\1\56\1\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\31\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\57\1\60\1\45\1\46"+
    "\1\47\1\50\1\61\1\52\1\31\1\62\1\53\1\63"+
    "\2\0\5\64\1\65\32\64\1\65\217\64\2\66\115\64"+
    "\1\67\u0200\64\1\65\177\64\13\65\35\64\2\65\5\64"+
    "\1\65\57\64\1\65\312\64\1\70\325\64\1\65\377\64";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\3\2\1\3\1\4\12\5\1\6\1\5"+
    "\1\7\1\10\1\11\1\12\2\5\1\13\1\7\1\14"+
    "\1\15\3\14\6\16\1\5\1\17\3\5\1\20\1\21"+
    "\34\0\1\22\4\0\1\23\1\0\1\5\7\0\1\24"+
    "\32\0\1\25\31\0\1\5\72\0\2\25\1\0\1\1"+
    "\1\26\24\0\1\27\3\0\1\30\1\5\33\0\1\31"+
    "\1\32\41\0\1\25\1\0\2\1\5\0\1\25\12\0"+
    "\1\27\5\0\1\5\61\0\2\1\1\25\4\0\3\1"+
    "\10\0\1\33\1\0\1\27\3\0\1\5\53\0\1\26"+
    "\3\0\1\27\3\0\1\5\34\0\1\32\1\0\1\34"+
    "\1\5\20\0\1\5\14\0\1\5\11\0\1\5\11\0"+
    "\1\35\1\5\5\0\1\36\1\5\4\0\1\5\1\0"+
    "\1\37\1\0\1\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0"+
    "\2\5\2\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[578];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u0474\0\u06ae"+
    "\0\u0474\0\u0474\0\u0474\0\u0474\0\u06e7\0\u0720\0\u0474\0\u051f"+
    "\0\u0474\0\u0474\0\u04ad\0\u0558\0\u051f\0\u0474\0\u0759\0\u04ad"+
    "\0\u0558\0\u0720\0\u051f\0\u0792\0\u0474\0\u07cb\0\u0804\0\u083d"+
    "\0\u051f\0\u0474\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0474\0\u0591"+
    "\0\u0675\0\u0eb2\0\u0eeb\0\u0474\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f"+
    "\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u0474\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166"+
    "\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e"+
    "\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6"+
    "\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e"+
    "\0\u0474\0\u0474\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c"+
    "\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34"+
    "\0\u2f6d\0\u2fa6\0\u1cb9\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3"+
    "\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b"+
    "\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453"+
    "\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u0474"+
    "\0\u0474\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771"+
    "\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939"+
    "\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01"+
    "\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9"+
    "\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58\0\u3e91"+
    "\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059"+
    "\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af\0\u0474\0\u41e8"+
    "\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0"+
    "\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578"+
    "\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707\0\u4740"+
    "\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908"+
    "\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0"+
    "\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98"+
    "\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60"+
    "\0\u4e99\0\u3de6\0\u4ed2\0\u4f0b\0\u4f44\0\u0ae9\0\u4f7d\0\u4fb6"+
    "\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3\0\u510c\0\u5145\0\u517e"+
    "\0\u0474\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b\0\u52d4\0\u530d"+
    "\0\u5346\0\u537f\0\u53b8\0\u53f1\0\u542a\0\u5463\0\u549c\0\u54d5"+
    "\0\u550e\0\u5547\0\u5580\0\u55b9\0\u55f2\0\u562b\0\u5664\0\u569d"+
    "\0\u56d6\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3\0\u582c\0\u5865"+
    "\0\u589e\0\u58d7\0\u5910\0\u5949\0\u5982\0\u59bb\0\u59f4\0\u5a2d"+
    "\0\u5a66\0\u5a9f\0\u4e27\0\u5ad8\0\u5b11\0\u5b4a\0\u4f7d\0\u5b83"+
    "\0\u5bbc\0\u5bf5\0\u5bbc\0\u5c2e\0\u5c67\0\u5ca0\0\u2fa6\0\u5cd9"+
    "\0\u5d12\0\u5d4b\0\u5d84\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68\0\u5ea1"+
    "\0\u4695\0\u5eda\0\u5f13\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7\0\u6030"+
    "\0\u6069\0\u60a2\0\u60db\0\u6114\0\u614d\0\u6186\0\u61bf\0\u61f8"+
    "\0\u6231\0\u626a\0\u62a3\0\u62dc\0\u6315\0\u634e\0\u6387\0\u2efb"+
    "\0\u63c0\0\u0474\0\u63f9\0\u6432\0\u646b\0\u64a4\0\u64dd\0\u6516"+
    "\0\u654f\0\u6588\0\u65c1\0\u65fa\0\u6633\0\u666c\0\u66a5\0\u66de"+
    "\0\u6717\0\u6750\0\u6789\0\u67c2\0\u67fb\0\u6834\0\u686d\0\u68a6"+
    "\0\u68df\0\u6918\0\u6951\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e"+
    "\0\u6aa7\0\u6ae0\0\u6b19\0\u6b52\0\u6b8b\0\u6bc4\0\u6bfd\0\u6c36"+
    "\0\u6c6f\0\u6ca8\0\u6ce1\0\u6d1a\0\u6d53\0\u6d8c\0\u6dc5\0\u6dfe"+
    "\0\u6e37\0\u6e70\0\u6ea9\0\u6ee2\0\u6f1b\0\u6f54\0\u6f8d\0\u6fc6"+
    "\0\u6fff\0\u7038\0\u7071\0\u0474\0\u70aa\0\u70e3\0\u711c\0\u7155"+
    "\0\u718e\0\u71c7\0\u7200\0\u0474\0\u7239\0\u7272\0\u72ab\0\u72e4"+
    "\0\u731d\0\u7356\0\u738f\0\u73c8\0\u7401\0\u743a\0\u7473\0\u74ac"+
    "\0\u74e5\0\u751e\0\u7557\0\u7590\0\u75c9\0\u7602\0\u763b\0\u7674"+
    "\0\u0474\0\u0792";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[578];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\16\17\1\20\3\17\1\21\37\17\1\22\6\17\22\23"+
    "\1\24\46\23\16\25\1\26\3\25\1\27\37\25\1\30"+
    "\24\25\1\26\3\25\1\31\37\25\1\30\1\32\10\25"+
    "\1\33\12\25\1\26\3\25\1\31\37\25\1\30\14\25"+
    "\1\34\7\25\1\26\3\25\1\31\37\25\1\30\6\25"+
    "\1\35\2\36\1\35\1\37\1\35\1\40\1\41\1\42"+
    "\1\43\1\35\1\25\1\35\1\44\1\45\2\35\1\46"+
    "\1\31\30\35\1\41\1\35\1\47\4\35\1\50\1\47"+
    "\1\35\1\36\3\35\10\51\1\52\5\51\1\53\3\51"+
    "\1\54\37\51\1\55\6\51\5\56\1\57\10\56\1\60"+
    "\3\56\1\61\31\56\1\62\5\56\1\63\6\56\4\64"+
    "\1\65\1\64\1\66\4\64\1\25\2\64\1\67\3\64"+
    "\1\70\37\64\1\71\1\72\5\64\16\0\1\73\3\0"+
    "\1\74\46\0\71\14\16\0\1\75\72\0\1\76\50\0"+
    "\16\17\1\0\3\17\1\0\37\17\1\0\6\17\6\0"+
    "\1\77\104\0\1\100\1\0\1\101\1\102\1\103\1\104"+
    "\1\105\2\0\1\106\2\0\1\107\1\110\1\111\1\112"+
    "\1\0\1\113\1\114\1\0\1\115\1\116\1\117\6\0"+
    "\1\113\1\114\1\0\1\120\3\0\1\106\1\114\4\0"+
    "\1\121\56\0\1\122\6\0\22\23\1\0\46\23\27\0"+
    "\1\123\140\0\1\124\111\0\1\125\17\0\1\116\103\0"+
    "\1\126\55\0\1\116\104\0\1\127\10\0\1\130\105\0"+
    "\1\127\50\0\1\35\2\0\1\35\1\0\1\35\4\0"+
    "\1\35\1\0\1\35\1\0\3\35\2\0\30\35\1\0"+
    "\1\35\1\0\4\35\2\0\1\35\1\0\3\35\1\0"+
    "\2\131\30\0\1\132\31\0\1\131\1\132\2\0\14\37"+
    "\1\0\6\37\10\0\1\133\6\0\1\133\5\0\1\133"+
    "\2\0\4\37\3\133\2\37\5\0\1\35\2\0\1\35"+
    "\1\0\1\35\1\124\3\0\1\35\1\0\1\35\1\0"+
    "\3\35\2\0\30\35\1\0\1\35\1\0\4\35\2\0"+
    "\1\35\1\0\3\35\71\25\62\0\1\134\6\0\4\64"+
    "\1\0\1\64\1\0\4\64\1\0\46\64\2\0\5\64"+
    "\14\65\1\0\6\65\10\0\1\135\6\0\1\135\5\0"+
    "\1\135\2\0\4\65\3\135\2\65\5\0\4\64\1\0"+
    "\1\64\1\124\4\64\1\0\46\64\2\0\11\64\1\0"+
    "\1\64\1\0\4\64\1\0\33\64\1\136\12\64\2\0"+
    "\5\64\6\0\1\137\104\0\1\140\37\0\1\141\14\0"+
    "\1\142\70\0\1\143\62\0\5\144\1\145\1\146\62\144"+
    "\24\0\1\147\1\150\1\151\1\152\1\153\2\0\1\154"+
    "\2\0\1\155\1\156\1\157\1\160\1\0\1\161\1\162"+
    "\1\0\1\163\1\0\1\164\6\0\1\161\1\162\5\0"+
    "\1\154\1\162\36\0\1\165\5\0\1\166\13\0\1\166"+
    "\34\0\1\167\6\0\1\170\2\0\1\171\62\0\1\172"+
    "\3\0\1\173\32\0\1\173\25\0\1\174\11\0\1\175"+
    "\1\176\1\177\71\0\1\200\60\0\1\201\67\0\1\202"+
    "\70\0\1\203\3\0\1\204\32\0\1\204\37\0\1\205"+
    "\1\0\1\206\54\0\1\207\17\0\1\210\2\0\1\211"+
    "\10\0\1\210\40\0\1\212\16\0\1\213\51\0\1\214"+
    "\2\0\1\215\12\0\1\216\62\0\1\217\60\0\1\220"+
    "\73\0\1\221\41\0\1\222\56\0\1\146\11\0\1\223"+
    "\65\0\12\224\1\225\50\224\1\226\5\224\37\0\1\227"+
    "\36\0\1\145\122\0\1\230\43\0\1\231\115\0\1\232"+
    "\31\0\14\37\1\0\6\37\30\0\4\37\3\0\2\37"+
    "\5\0\14\65\1\0\6\65\30\0\4\65\3\0\2\65"+
    "\5\0\4\64\1\0\1\64\1\0\4\64\1\0\13\64"+
    "\1\233\32\64\2\0\5\64\6\0\1\234\106\0\1\235"+
    "\1\236\1\237\1\240\1\241\2\0\1\242\2\0\1\243"+
    "\1\244\1\245\1\246\1\0\1\247\1\250\1\0\1\251"+
    "\1\0\1\252\6\0\1\247\1\250\5\0\1\242\1\250"+
    "\4\0\1\253\56\0\1\234\25\0\1\254\51\0\20\143"+
    "\1\255\50\143\6\144\1\256\62\144\6\145\1\257\62\145"+
    "\71\146\35\0\1\260\5\0\1\261\13\0\1\261\34\0"+
    "\1\262\6\0\1\263\2\0\1\264\62\0\1\265\3\0"+
    "\1\266\32\0\1\266\25\0\1\267\11\0\1\270\1\271"+
    "\1\272\71\0\1\273\60\0\1\146\67\0\1\274\70\0"+
    "\1\275\3\0\1\276\32\0\1\276\37\0\1\277\1\0"+
    "\1\300\54\0\1\301\17\0\1\302\2\0\1\303\10\0"+
    "\1\302\40\0\1\304\16\0\1\305\51\0\1\306\2\0"+
    "\1\307\12\0\1\310\62\0\1\311\63\0\1\312\61\0"+
    "\1\313\74\0\1\314\105\0\1\315\13\0\1\315\6\0"+
    "\1\315\30\0\1\316\64\0\1\317\75\0\1\320\4\0"+
    "\1\321\77\0\1\322\13\0\1\322\6\0\1\322\26\0"+
    "\1\323\107\0\1\324\13\0\1\324\6\0\1\324\42\0"+
    "\1\325\55\0\1\326\20\0\1\201\64\0\1\327\13\0"+
    "\1\327\12\0\1\330\1\0\1\331\3\0\1\332\4\0"+
    "\1\331\4\0\1\331\1\0\30\331\3\0\4\331\54\0"+
    "\1\333\74\0\1\334\7\0\1\334\44\0\1\335\61\0"+
    "\1\201\67\0\1\315\110\0\1\336\52\0\1\337\10\0"+
    "\1\340\74\0\1\341\1\201\12\0\1\341\6\0\1\341"+
    "\24\0\1\342\16\0\1\343\52\0\1\344\101\0\1\345"+
    "\73\0\1\346\53\0\1\347\26\0\1\350\53\0\1\351"+
    "\7\0\1\352\66\0\1\353\13\0\1\353\40\0\1\354"+
    "\3\0\1\350\32\0\1\350\5\0\1\146\65\0\3\223"+
    "\1\355\65\223\63\224\1\226\17\224\1\356\50\224\1\226"+
    "\70\224\1\357\5\224\26\0\1\360\70\0\1\361\54\0"+
    "\1\362\57\0\2\363\62\0\1\363\3\0\4\64\1\0"+
    "\1\64\1\0\4\64\1\0\27\64\1\364\13\64\1\364"+
    "\2\64\2\0\5\64\35\0\1\365\5\0\1\366\13\0"+
    "\1\366\34\0\1\367\6\0\1\370\2\0\1\371\62\0"+
    "\1\372\3\0\1\373\32\0\1\373\25\0\1\374\11\0"+
    "\1\375\1\376\1\377\71\0\1\u0100\60\0\1\234\67\0"+
    "\1\u0101\70\0\1\u0102\3\0\1\u0103\32\0\1\u0103\37\0"+
    "\1\u0104\1\0\1\u0105\54\0\1\u0106\17\0\1\u0107\2\0"+
    "\1\u0108\10\0\1\u0107\40\0\1\u0109\16\0\1\u010a\51\0"+
    "\1\u010b\2\0\1\u010c\12\0\1\u010d\62\0\1\u010e\63\0"+
    "\1\u010f\41\0\1\234\104\0\1\234\51\0\6\143\1\0"+
    "\11\143\1\255\50\143\6\144\1\256\11\144\1\u0110\50\144"+
    "\6\145\1\257\11\145\1\u0111\50\145\23\0\1\u0112\74\0"+
    "\1\u0113\105\0\1\u0114\13\0\1\u0114\6\0\1\u0114\30\0"+
    "\1\u0115\64\0\1\u0116\75\0\1\u0117\4\0\1\u0118\77\0"+
    "\1\u0119\13\0\1\u0119\6\0\1\u0119\26\0\1\u011a\107\0"+
    "\1\u011b\13\0\1\u011b\6\0\1\u011b\42\0\1\u011c\55\0"+
    "\1\146\20\0\1\146\64\0\1\146\13\0\1\146\56\0"+
    "\1\u011d\74\0\1\u011e\7\0\1\u011e\44\0\1\u011f\61\0"+
    "\1\146\67\0\1\u0114\110\0\1\267\52\0\1\u0120\10\0"+
    "\1\u0121\74\0\1\u011a\1\146\12\0\1\u011a\6\0\1\u011a"+
    "\24\0\1\u0122\16\0\1\u0123\52\0\1\u0124\101\0\1\u0125"+
    "\73\0\1\u0126\53\0\1\u0127\26\0\1\u0128\53\0\1\u0129"+
    "\7\0\1\u012a\52\0\1\u012b\3\0\1\u0128\32\0\1\u0128"+
    "\41\0\1\u012c\54\0\1\u012d\74\0\1\201\66\0\1\u012e"+
    "\107\0\1\u012f\13\0\1\u012f\6\0\1\u012f\34\0\1\u0130"+
    "\32\0\1\u0130\31\0\1\u0131\64\0\1\u0132\77\0\1\u0133"+
    "\65\0\1\201\3\0\1\106\32\0\1\106\47\0\1\u0134"+
    "\24\0\1\330\1\0\1\201\3\0\1\332\4\0\1\331"+
    "\4\0\1\201\1\0\30\326\3\0\4\326\10\0\1\330"+
    "\1\0\1\331\3\0\1\332\4\0\1\331\4\0\1\331"+
    "\1\0\4\331\1\u0135\23\331\3\0\1\u0136\3\331\10\0"+
    "\1\330\5\0\1\332\113\0\1\u0137\103\0\1\201\44\0"+
    "\1\201\74\0\1\u0138\104\0\1\u0139\2\0\1\u013a\13\0"+
    "\1\u013a\6\0\1\u013a\27\0\1\u013b\12\0\1\u012f\61\0"+
    "\1\u013c\64\0\1\u013d\110\0\1\u013e\74\0\1\u013f\45\0"+
    "\1\u0140\107\0\1\u0141\47\0\1\u012d\100\0\1\315\62\0"+
    "\1\317\74\0\1\u0142\32\0\1\u0142\26\0\1\u0143\103\0"+
    "\1\201\31\0\3\223\1\u0144\65\223\12\356\1\u0145\50\356"+
    "\1\u0146\5\356\63\0\1\u0147\54\0\1\u0148\6\0\1\u0149"+
    "\55\0\1\u014a\12\0\1\u014b\1\u014a\11\0\12\362\1\u014c"+
    "\56\362\4\64\1\0\1\64\1\0\4\64\1\0\10\64"+
    "\1\u014d\35\64\2\0\5\64\23\0\1\u014e\74\0\1\u014f"+
    "\105\0\1\u0150\13\0\1\u0150\6\0\1\u0150\30\0\1\u0151"+
    "\64\0\1\u0152\75\0\1\u0153\4\0\1\u0154\77\0\1\u0155"+
    "\13\0\1\u0155\6\0\1\u0155\26\0\1\u0156\107\0\1\u0157"+
    "\13\0\1\u0157\6\0\1\u0157\42\0\1\u0158\55\0\1\u0159"+
    "\20\0\1\234\64\0\1\u015a\13\0\1\u015a\56\0\1\u015b"+
    "\74\0\1\u015c\7\0\1\u015c\44\0\1\u015d\61\0\1\234"+
    "\67\0\1\u0150\110\0\1\u015e\52\0\1\u015f\10\0\1\u0160"+
    "\74\0\1\u0161\1\234\12\0\1\u0161\6\0\1\u0161\24\0"+
    "\1\u0162\16\0\1\u0163\52\0\1\u0164\101\0\1\u0165\73\0"+
    "\1\u0166\53\0\1\u0167\26\0\1\u0168\53\0\1\u0169\7\0"+
    "\1\u016a\52\0\1\u016b\3\0\1\u0168\32\0\1\u0168\41\0"+
    "\1\u016c\54\0\1\u016d\74\0\1\146\66\0\1\u016e\107\0"+
    "\1\u016f\13\0\1\u016f\6\0\1\u016f\34\0\1\u0170\32\0"+
    "\1\u0170\31\0\1\u0171\64\0\1\u0172\77\0\1\146\65\0"+
    "\1\146\3\0\1\154\32\0\1\154\47\0\1\u0124\55\0"+
    "\1\u0173\103\0\1\146\44\0\1\146\110\0\1\u0174\2\0"+
    "\1\u0175\13\0\1\u0175\6\0\1\u0175\27\0\1\u0176\12\0"+
    "\1\u016f\55\0\1\u0177\110\0\1\u0178\74\0\1\146\45\0"+
    "\1\u0179\107\0\1\u017a\47\0\1\u016d\100\0\1\u0114\62\0"+
    "\1\u0116\74\0\1\u017b\32\0\1\u017b\41\0\1\146\65\0"+
    "\1\335\33\0\1\335\34\0\1\201\33\0\1\201\34\0"+
    "\1\u017c\33\0\1\u017c\44\0\1\201\13\0\1\201\6\0"+
    "\1\201\40\0\1\u017d\76\0\1\315\47\0\1\u017e\45\0"+
    "\1\330\1\0\1\331\3\0\1\332\4\0\1\331\4\0"+
    "\1\331\1\0\4\331\1\u0135\20\331\1\u017f\2\331\3\0"+
    "\1\u0180\3\331\61\0\1\u0181\53\0\1\167\62\0\1\u0182"+
    "\101\0\1\205\62\0\1\201\65\0\1\u0183\70\0\1\u0184"+
    "\107\0\1\u0185\23\0\1\330\1\0\1\331\3\0\1\332"+
    "\4\0\1\331\4\0\1\331\1\0\10\331\1\u0186\4\331"+
    "\1\u0187\12\331\3\0\1\u0188\3\331\4\0\1\106\42\0"+
    "\1\u0189\15\0\1\u018a\45\0\1\u018b\32\0\1\u018b\3\0"+
    "\1\u018c\1\u018d\4\0\1\332\55\0\1\u018d\30\0\1\u018e"+
    "\100\0\1\u018f\70\0\1\201\56\0\1\u0190\45\0\3\223"+
    "\1\u0144\57\223\1\u0191\5\223\12\356\1\u0192\50\356\1\u0146"+
    "\17\356\1\u0145\50\356\1\u0193\5\356\27\0\1\u0194\110\0"+
    "\1\u0148\67\0\1\u0195\65\0\1\u014a\13\0\1\u014a\11\0"+
    "\12\362\1\u0196\56\362\4\64\1\0\1\64\1\0\4\64"+
    "\1\0\7\64\1\u0197\36\64\2\0\5\64\37\0\1\u0198"+
    "\54\0\1\u0199\74\0\1\234\66\0\1\u019a\107\0\1\u019b"+
    "\13\0\1\u019b\6\0\1\u019b\34\0\1\u019c\32\0\1\u019c"+
    "\31\0\1\u019d\64\0\1\u019e\77\0\1\u019f\65\0\1\234"+
    "\3\0\1\242\32\0\1\242\47\0\1\u01a0\26\0\1\234"+
    "\15\0\1\234\1\0\30\u0159\3\0\4\u0159\36\0\1\u01a1"+
    "\26\0\1\u01a2\44\0\1\u01a3\103\0\1\234\44\0\1\234"+
    "\74\0\1\u01a4\104\0\1\u01a5\2\0\1\u01a6\13\0\1\u01a6"+
    "\6\0\1\u01a6\27\0\1\u01a7\12\0\1\u019b\61\0\1\u01a8"+
    "\64\0\1\u01a9\110\0\1\u01aa\74\0\1\234\45\0\1\u01ab"+
    "\107\0\1\u01ac\47\0\1\u0199\100\0\1\u0150\62\0\1\u0152"+
    "\74\0\1\u01ad\32\0\1\u01ad\41\0\1\234\65\0\1\u011f"+
    "\33\0\1\u011f\34\0\1\146\33\0\1\146\34\0\1\u01ae"+
    "\33\0\1\u01ae\44\0\1\146\13\0\1\146\6\0\1\146"+
    "\40\0\1\u01af\76\0\1\u0114\47\0\1\u01b0\104\0\1\277"+
    "\57\0\1\u01b1\70\0\1\u01b2\107\0\1\u01b3\62\0\1\u01b4"+
    "\15\0\1\u01b5\45\0\1\u01b6\32\0\1\u01b6\27\0\1\u01b7"+
    "\100\0\1\u01b8\70\0\1\146\62\0\1\205\70\0\1\u01b9"+
    "\76\0\1\u017c\66\0\1\u01ba\32\0\1\u01ba\31\0\1\u0182"+
    "\20\0\1\u01bb\21\0\1\330\1\0\1\331\3\0\1\332"+
    "\4\0\1\331\4\0\1\201\1\0\30\331\3\0\4\331"+
    "\46\0\1\u01bc\70\0\1\u01bd\56\0\1\u01be\102\0\1\206"+
    "\64\0\1\106\4\0\1\u01bf\25\0\1\106\41\0\1\u01c0"+
    "\71\0\1\u0189\73\0\1\u017c\13\0\1\u017c\11\0\1\u01c1"+
    "\1\u01c2\5\u01c1\1\u01c3\4\u01c1\1\u018d\6\u01c1\30\u018d\3\u01c1"+
    "\4\u018d\23\u01c1\1\u018d\6\u01c1\30\u018d\3\u01c1\4\u018d\7\u01c1"+
    "\45\0\1\u017c\51\0\1\u01c4\107\0\1\u01c5\23\0\12\356"+
    "\1\u0192\50\356\1\u01c6\5\356\12\362\1\u014c\50\362\1\u01c7"+
    "\5\362\43\0\1\u01c8\13\0\1\u01c8\35\0\1\u01c9\44\0"+
    "\12\362\1\u0196\50\362\1\u01ca\5\362\4\64\1\0\1\64"+
    "\1\0\4\64\1\0\31\64\1\u01cb\14\64\2\0\5\64"+
    "\34\0\1\u015d\33\0\1\u015d\34\0\1\234\33\0\1\234"+
    "\34\0\1\u01cc\33\0\1\u01cc\44\0\1\234\13\0\1\234"+
    "\6\0\1\234\40\0\1\u01cd\76\0\1\u0150\47\0\1\u01ce"+
    "\73\0\1\u01a1\20\0\1\u01cf\5\0\1\u01d0\64\0\1\u01d1"+
    "\53\0\1\367\62\0\1\u01a1\101\0\1\u0104\62\0\1\234"+
    "\65\0\1\u01d2\70\0\1\u01d3\107\0\1\u01d4\55\0\1\242"+
    "\4\0\1\u01d5\15\0\1\u01d6\7\0\1\242\42\0\1\u01d7"+
    "\15\0\1\u01d8\45\0\1\u01d9\32\0\1\u01d9\27\0\1\u01da"+
    "\100\0\1\u01db\70\0\1\234\62\0\1\277\70\0\1\u01dc"+
    "\76\0\1\u01ae\72\0\1\277\70\0\1\u01dd\56\0\1\u01de"+
    "\102\0\1\u01df\71\0\1\u01b4\73\0\1\u01ae\13\0\1\u01ae"+
    "\56\0\1\u01ae\51\0\1\u01e0\70\0\1\335\107\0\1\u01e1"+
    "\51\0\1\u013c\107\0\1\335\70\0\1\u01e2\60\0\1\u01e3"+
    "\33\0\14\u01c1\1\u018d\5\u01c1\1\u01e4\30\u018d\3\u01c1\4\u018d"+
    "\10\u01c1\1\u01c2\5\u01c1\1\u01c3\4\u01c1\1\u018d\5\u01c1\1\u01e4"+
    "\30\u018d\3\u01c1\4\u018d\7\u01c1\43\0\1\u01e5\12\0\1\u01e6"+
    "\1\u01e5\44\0\1\u01e7\32\0\1\u01e7\2\0\12\356\1\u0145"+
    "\50\356\1\u01e8\5\356\24\0\1\u01e9\116\0\1\u01ea\16\0"+
    "\12\362\1\u014c\50\362\1\u0111\5\362\4\64\1\0\1\64"+
    "\1\0\4\64\1\0\17\64\1\u01eb\26\64\2\0\2\64"+
    "\1\u01eb\2\64\27\0\1\u0104\70\0\1\u01ec\76\0\1\u01cc"+
    "\66\0\1\u01ed\32\0\1\u01ed\31\0\1\u01a1\20\0\1\u01cf"+
    "\57\0\1\u01ee\70\0\1\u01ef\56\0\1\u01f0\102\0\1\u0105"+
    "\64\0\1\242\4\0\1\u01d5\25\0\1\242\41\0\1\u01f1"+
    "\71\0\1\u01d7\73\0\1\u01cc\13\0\1\u01cc\56\0\1\u01cc"+
    "\51\0\1\u01f2\70\0\1\u011f\107\0\1\u011f\70\0\1\u01f3"+
    "\60\0\1\u0124\76\0\1\u01f4\12\0\1\u01f5\1\u01f4\43\0"+
    "\1\u01f6\71\0\1\u01f7\32\0\1\u01f7\54\0\1\201\16\0"+
    "\14\u01c1\1\u018d\5\u01c1\1\u01e4\4\u018d\1\u01f8\23\u018d\3\u01c1"+
    "\4\u018d\7\u01c1\27\0\1\u01f9\104\0\1\u01e5\13\0\1\u01e5"+
    "\47\0\1\u01fa\55\0\1\u01fb\45\0\4\64\1\0\1\64"+
    "\1\0\4\64\1\0\22\64\1\u01fc\23\64\2\0\5\64"+
    "\26\0\1\u015d\107\0\1\u01fd\51\0\1\u01a8\107\0\1\u015d"+
    "\70\0\1\u01fe\60\0\1\u0164\76\0\1\u01ff\12\0\1\u0200"+
    "\1\u01ff\44\0\1\u0201\32\0\1\u0201\31\0\1\u0202\104\0"+
    "\1\u01f4\13\0\1\u01f4\44\0\1\u0203\22\0\1\u0204\7\0"+
    "\1\u0203\42\0\1\354\30\0\14\u01c1\1\u018d\6\u01c1\14\u018d"+
    "\1\u0205\13\u018d\3\u01c1\4\u018d\7\u01c1\37\0\1\u0206\31\0"+
    "\14\u0207\1\0\6\u0207\30\0\3\u0207\4\0\7\u0207\45\0"+
    "\1\u0208\23\0\4\u0209\1\u0207\1\u0209\1\u0207\4\u0209\1\u0207"+
    "\1\64\6\u0209\30\64\3\u0209\4\64\2\u0207\5\u0209\32\0"+
    "\1\u020a\71\0\1\u020b\32\0\1\u020b\31\0\1\u020c\104\0"+
    "\1\u01ff\13\0\1\u01ff\51\0\1\u012b\67\0\1\u020d\70\0"+
    "\1\u020e\64\0\1\u0203\32\0\1\u0203\2\0\14\u01c1\1\u018d"+
    "\6\u01c1\3\u018d\1\u020f\24\u018d\3\u01c1\4\u018d\7\u01c1\26\0"+
    "\1\u0210\42\0\14\u0211\1\u0207\6\u0211\30\u0207\3\u0211\4\u0207"+
    "\7\u0211\33\0\1\u0212\32\0\1\u0212\2\0\4\u0213\1\u0211"+
    "\1\u0213\1\u0211\4\u0213\1\u0211\1\u0209\6\u0213\30\u0209\3\u0213"+
    "\4\u0209\2\u0211\5\u0213\33\0\1\u0214\22\0\1\u0215\7\0"+
    "\1\u0214\42\0\1\u016b\67\0\1\u0216\57\0\1\u0217\70\0"+
    "\1\u0218\42\0\14\u01c1\1\u018d\6\u01c1\20\u018d\1\u0219\7\u018d"+
    "\3\u01c1\1\u021a\1\u0219\2\u018d\7\u01c1\27\0\1\u021b\41\0"+
    "\14\u0211\1\u0207\5\u0211\1\u021c\30\u0207\3\u0211\4\u0207\7\u0211"+
    "\36\0\1\u021d\32\0\4\u0213\1\u0211\1\u0213\1\u0211\4\u0213"+
    "\1\u0211\1\u0209\5\u0213\1\u021e\30\u0209\3\u0213\4\u0209\2\u0211"+
    "\5\u0213\37\0\1\u021f\64\0\1\u0214\32\0\1\u0214\30\0"+
    "\1\u0220\71\0\1\273\70\0\1\u0221\41\0\14\u01c1\1\u018d"+
    "\6\u01c1\23\u018d\1\u0222\4\u018d\3\u01c1\4\u018d\23\u01c1\1\u018d"+
    "\6\u01c1\20\u018d\1\u0219\7\u018d\3\u01c1\1\u018d\1\u0219\2\u018d"+
    "\7\u01c1\43\0\1\201\13\0\1\201\11\0\14\u0211\1\u0207"+
    "\5\u0211\1\u021c\4\u0207\1\u0223\23\u0207\3\u0211\4\u0207\7\u0211"+
    "\14\0\1\u0224\6\0\30\u0224\3\0\4\u0224\7\0\4\u0213"+
    "\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211\1\u0209\5\u0213\1\u021e"+
    "\4\u0209\1\u0225\23\u0209\3\u0213\4\u0209\2\u0211\5\u0213\26\0"+
    "\1\u0226\71\0\1\u0227\112\0\1\327\7\0\1\327\7\0"+
    "\14\u01c1\1\u018d\6\u01c1\1\u018d\1\u0228\26\u018d\3\u01c1\4\u018d"+
    "\7\u01c1\14\u0211\1\u0207\6\u0211\14\u0207\1\u0229\13\u0207\3\u0211"+
    "\4\u0207\7\u0211\4\u0213\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211"+
    "\1\u0209\6\u0213\14\u0209\1\u022a\13\u0209\3\u0213\4\u0209\2\u0211"+
    "\5\u0213\27\0\1\u022b\104\0\1\234\13\0\1\234\11\0"+
    "\14\u01c1\1\u018d\6\u01c1\27\u018d\1\u022c\3\u01c1\4\u018d\7\u01c1"+
    "\14\u0211\1\u0207\6\u0211\3\u0207\1\u022d\24\u0207\3\u0211\4\u0207"+
    "\7\u0211\4\u0213\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211\1\u0209"+
    "\6\u0213\3\u0209\1\u022e\24\u0209\3\u0213\4\u0209\2\u0211\5\u0213"+
    "\51\0\1\u015a\7\0\1\u015a\7\0\14\u0211\1\u0207\6\u0211"+
    "\24\u0207\1\u022f\3\u0207\3\u0211\1\u0230\3\u0207\7\u0211\4\u0213"+
    "\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211\1\u0209\6\u0213\24\u0209"+
    "\1\u0231\3\u0209\3\u0213\1\u0232\3\u0209\2\u0211\5\u0213\14\u0211"+
    "\1\u0207\6\u0211\4\u0207\1\u0233\23\u0207\3\u0211\4\u0207\23\u0211"+
    "\1\u0207\6\u0211\24\u0207\1\u022f\3\u0207\3\u0211\4\u0207\7\u0211"+
    "\4\u0213\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211\1\u0209\6\u0213"+
    "\4\u0209\1\u0234\23\u0209\3\u0213\4\u0209\2\u0211\11\u0213\1\u0211"+
    "\1\u0213\1\u0211\4\u0213\1\u0211\1\u0209\6\u0213\24\u0209\1\u0231"+
    "\3\u0209\3\u0213\4\u0209\2\u0211\5\u0213\14\u0211\1\u0207\6\u0211"+
    "\20\u0207\1\u0235\7\u0207\3\u0211\1\u0207\1\u0235\2\u0207\7\u0211"+
    "\4\u0213\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211\1\u0209\6\u0213"+
    "\20\u0209\1\u0236\7\u0209\3\u0213\1\u0209\1\u0236\2\u0209\2\u0211"+
    "\5\u0213\14\u0211\1\u0207\6\u0211\1\u0207\1\u0237\26\u0207\3\u0211"+
    "\4\u0207\7\u0211\4\u0213\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211"+
    "\1\u0209\6\u0213\1\u0209\1\u0238\26\u0209\3\u0213\4\u0209\2\u0211"+
    "\5\u0213\14\u0211\1\u0207\6\u0211\1\u0239\27\u0207\3\u0211\4\u0207"+
    "\7\u0211\4\u0213\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211\1\u0209"+
    "\6\u0213\1\u023a\27\u0209\3\u0213\4\u0209\2\u0211\5\u0213\14\u0211"+
    "\1\u0207\6\u0211\22\u0207\1\u023b\5\u0207\3\u0211\4\u0207\7\u0211"+
    "\4\u0213\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211\1\u0209\6\u0213"+
    "\22\u0209\1\u023c\5\u0209\3\u0213\4\u0209\2\u0211\5\u0213\14\u0211"+
    "\1\u0207\6\u0211\10\u0207\1\u023d\17\u0207\3\u0211\4\u0207\4\u0211"+
    "\1\u023e\2\u0211\4\u0213\1\u0211\1\u0213\1\u0211\4\u0213\1\u0211"+
    "\1\u0209\6\u0213\10\u0209\1\u023f\17\u0209\3\u0213\4\u0209\2\u0211"+
    "\2\u0213\1\u0240\2\u0213\14\u0211\1\u0207\6\u0211\13\u0207\1\u0241"+
    "\14\u0207\3\u0211\4\u0207\23\u0211\1\u0207\5\u0211\1\u021c\13\u0207"+
    "\1\u0241\14\u0207\3\u0211\4\u0207\7\u0211\4\u0213\1\u0211\1\u0213"+
    "\1\u0211\4\u0213\1\u0211\1\u0209\6\u0213\13\u0209\1\u0242\14\u0209"+
    "\3\u0213\4\u0209\2\u0211\11\u0213\1\u0211\1\u0213\1\u0211\4\u0213"+
    "\1\u0211\1\u0209\5\u0213\1\u021e\13\u0209\1\u0242\14\u0209\3\u0213"+
    "\4\u0209\2\u0211\5\u0213";

  private static int [] zzUnpacktrans() {
    int [] result = new int[30381];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\1\2\0\6\1\1\11\11\1\1\11\1\1"+
    "\4\11\2\1\1\11\1\1\2\11\3\1\1\11\6\1"+
    "\1\11\4\1\1\11\34\0\1\11\4\0\1\11\1\0"+
    "\1\1\3\0\2\1\2\0\1\1\32\0\1\1\31\0"+
    "\1\1\1\11\17\0\2\1\50\0\2\1\1\0\2\11"+
    "\24\0\1\1\3\0\2\1\33\0\2\11\41\0\1\1"+
    "\1\0\2\1\5\0\1\1\12\0\1\11\5\0\1\1"+
    "\13\0\2\1\44\0\3\1\4\0\3\1\10\0\1\11"+
    "\1\0\1\1\3\0\1\1\7\0\1\1\10\0\1\1"+
    "\32\0\1\1\3\0\1\1\3\0\1\1\5\0\1\1"+
    "\26\0\1\1\1\0\1\11\1\1\20\0\1\1\14\0"+
    "\1\1\11\0\1\1\11\0\2\1\5\0\1\11\1\1"+
    "\4\0\1\1\1\0\1\11\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[578];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int parentheses;
    private ArrayDeque<Integer> stateStack = new ArrayDeque<Integer>();
    private ArrayDeque<Character> blockStack = new ArrayDeque<Character>();
    private boolean stringIsInterpolated;
    private String currentStatement = "";
    private boolean lastCharacterWasWord = false;
    private Set<String> naryStatements = Set.of("pushif", "prependif", "each", "eachelse", "eachwithindex", "eachwithindexelse", "props");

    private char flipBracket(char bracket){
        switch (bracket) {
            case '{': return '}';
            case '[': return ']';
            case '(': return ')';
            case '<': return '>';
            default: return bracket;
        }
    }

    private void checkLastChar(){
      char chr = yycharat(yylength() - 1);

      lastCharacterWasWord = (chr >= 'a' && chr <= 'z') || (chr >= 'A' && chr <= 'Z') || (chr >= '0' && chr <= '9') || chr == '_';
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RBladeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 33: break;
          case 2:
            { lastCharacterWasWord = false;
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 34: break;
          case 3:
            { checkLastChar();
    return stateStack.size() == 1 ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 35: break;
          case 4:
            { lastCharacterWasWord = false;
    return stateStack.size() == 1 ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 36: break;
          case 5:
            { return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 37: break;
          case 6:
            { stateStack.addFirst(STATE_RUBY_BLOCK);
      blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
      stringIsInterpolated = yycharat(0) == '"' || yylength() == 2 || (yylength() == 3 && (yycharat(1) == 'Q' || yycharat(1) == 'W' || yycharat(1) == 'I' || yycharat(1) == 'r' || yycharat(1) == 'x'));
      yybegin(STATE_STRING_LITERAL);
      return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 38: break;
          case 7:
            { if (!blockStack.isEmpty() && yycharat(0) == '|' && blockStack.peekFirst() == '|') {
        blockStack.removeFirst();
      } else {
        blockStack.addFirst(flipBracket(yycharat(0)));
      }

      return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 39: break;
          case 8:
            { if (blockStack.isEmpty()) {
        yypushback(yylength());
        yybegin(stateStack.removeFirst());
      } else {
        if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
          blockStack.removeFirst();
        }

        return RBladeTypes.RUBY_EXPRESSION;
      }
            }
          // fall through
          case 40: break;
          case 9:
            { if (blockStack.isEmpty() && (naryStatements.contains(currentStatement))) {
                                            return RBladeTypes.RBLADE_STATEMENT_COMMA;
                                          } else {
                                            return RBladeTypes.RUBY_EXPRESSION;
                                          }
            }
          // fall through
          case 41: break;
          case 10:
            { if (blockStack.isEmpty() && currentStatement.equals("props")) {
                                                return RBladeTypes.RBLADE_STATEMENT_PROPS_COLON;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 42: break;
          case 11:
            { if (!blockStack.isEmpty() && blockStack.peekFirst() == yycharat(0)) {
        blockStack.removeFirst();
      }

      return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 43: break;
          case 12:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 44: break;
          case 13:
            { yybegin(YYINITIAL);
    currentStatement = "";
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 45: break;
          case 14:
            { if (yycharat(0) == blockStack.getFirst()) {
                                                blockStack.removeFirst();
                                                yybegin(stateStack.removeFirst());
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 46: break;
          case 15:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION);
                                          blockStack.addFirst(flipBracket(yycharat(yylength() - 1)));
                                          yybegin(STATE_STRING_LITERAL);

                                          return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 47: break;
          case 16:
            { stateStack.addFirst(STATE_STRING_LITERAL_INTERPOLATION); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 48: break;
          case 17:
            { yybegin(stateStack.removeFirst()); return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 49: break;
          case 18:
            { lastCharacterWasWord = false;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 50: break;
          case 19:
            { if (stringIsInterpolated) {
                                              stateStack.addFirst(STATE_STRING_LITERAL);
                                              yybegin(STATE_STRING_LITERAL_INTERPOLATION);
                                            }
                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 51: break;
          case 20:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 11;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { checkLastChar();
      return RBladeTypes.HTML_TEMPLATE;
            }
          // fall through
          case 52: break;
          case 21:
            { if (lastCharacterWasWord) {
          return RBladeTypes.HTML_TEMPLATE;
      }
      checkLastChar();

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 53: break;
          case 22:
            { if (lastCharacterWasWord) {
        lastCharacterWasWord = false;
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = false;

      stateStack.addFirst(STATE_RUBY_BLOCK_END);
      yybegin(STATE_RUBY_BLOCK);
      currentStatement = yytext().toString().replaceAll("[^a-zA-Z]", "").toLowerCase();

      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 54: break;
          case 23:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { lastCharacterWasWord = false;
      yybegin(RBLADE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 55: break;
          case 24:
            { if (blockStack.isEmpty() && currentStatement.startsWith("each")) {
                                                return RBladeTypes.RBLADE_STATEMENT_EACH_IN;
                                            }

                                            return RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 56: break;
          case 25:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 12;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 13;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { lastCharacterWasWord = false;
      yybegin(ERB_STATEMENT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 57: break;
          case 26:
            { return RBladeTypes.COMMENT;
            }
          // fall through
          case 58: break;
          case 27:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { lastCharacterWasWord = false;
      yybegin(RBLADE_UNSAFE_PRINT);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 59: break;
          case 28:
            { lastCharacterWasWord = true;
    yybegin(YYINITIAL);
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 60: break;
          case 29:
            { if (lastCharacterWasWord) {
      return stateStack.size() == 1 ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
    }
    lastCharacterWasWord = true;
    yybegin(stateStack.removeFirst());
    return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 61: break;
          case 30:
            { lastCharacterWasWord = true;
    return stateStack.size() == 1 ? RBladeTypes.HTML_TEMPLATE : RBladeTypes.RUBY_EXPRESSION;
            }
          // fall through
          case 62: break;
          case 31:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { if (lastCharacterWasWord) {
        return RBladeTypes.HTML_TEMPLATE;
      }
      lastCharacterWasWord = true;
      yybegin(RBLADE_RUBY);
      return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 63: break;
          case 32:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 9);
            { if (lastCharacterWasWord) {
      return RBladeTypes.HTML_TEMPLATE;
  }
  lastCharacterWasWord = true;
  stateStack.addFirst(yystate());
  yybegin(STATE_VERBATIM);
  return RBladeTypes.RBLADE_STATEMENT;
            }
          // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
